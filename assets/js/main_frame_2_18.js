/* eslint-disable no-inner-declarations */
if (user === undefined) {
    var DEBUG_MODE = false

    var BASE_APP_URL = "https://app.recruitcrm.io";
    if (DEBUG_MODE) {
        BASE_APP_URL = "http://localhost";
    }

    // We need this block of code for Canada extension
    // Start
    var EXTENSION_ID = 'pabamgafdnanldcgdhpfohfdpjjbekom' // Prod
    // var EXTENSION_ID = 'aencnjhhpfdojledpfelnjjibkgmanjg' // Canada Prod
    // var EXTENSION_ID = 'hbebajjmcjhkfcnemgiehekglikbcpnh' // Local
    var BASE_URL = 'chrome-extension://' + EXTENSION_ID + '/';
    var BASE_IMAGES_URL = BASE_URL + 'assets/images';
    // End
    var user = {};
    var extSettings = {}
    var profile = {};
    var jobSelectId = '#assign_to_job_select';
    var jobs = undefined;
    var hotlists = {};
    var userCallFinished = false;
    var newWindow = null;
    var base64Text = "";
    var tagInputs = {};
    var linkedInObserver = null;
    var copiedLinkedinUrl = null;
    var profileXing = null;
    // listOfEducation & listOfExperience are used to store the Education & Work History of the profile
    var listOfEducation = [];
    var listOfExperience = [];
    var flagForWorkAndEducation = true;
    var flagForCalendarInvite = true;
    var flagForGoogleMeet = false;
    var isLinkedInPage = false;
    var flagForTeamMeet = false;
    var flagForZoomMeet = false
    var candidateSectionFieldsData = null;
    var defaultExtensionFields = ['firstname', 'lastname', 'emailid', 'contactnumber', 'locality', 'lastorganisation', 'position', 'resumefilename', 'skill'];
    var defaultExtensionFieldsForContact = ['firstname', 'lastname' ,'designation', 'email', 'contactnumber', 'locality', 'address', 'companyid'];
    var defaultExtensionFieldsForCompany = ['companyname', 'email', 'contactnumber', 'website', 'aboutcompany', 'address'];
    const mappingContactDefaultFieldsWithIds = {
        'contact_firstname': 'firstname',
        'contact_lastname': 'lastname',
        'contact_email': 'email',
        'contact_designation': 'designation',
        'contact_locality': 'locality',
        'contact_contactnumber': 'contactnumber',
        'contact_address': 'address',
        'contact_companyid': 'companyid'
    };
    const mappingCandidateDefaultFieldsWithIds = {
        'candidate_firstname': 'firstname',
        'candidate_lastname': 'lastname',
        'candidate_emailid': 'emailid',
        'candidate_contactnumber': 'contactnumber',
        'candidate_locality': 'locality',
        'candidate_lastorganisation': 'lastorganisation',
        'candidate_position': 'position'
    }
    var fieldsVisibleOnExtension = {};
    var fieldsVisibleOnExtensionForContact = {};
    var fieldsVisibleOnExtensionForCompany = {};
    var fieldsVisibleOnExtensionForCompanyContact = {}
    var defaultOrdering = [{ id: 1, name: 'Profile Information' },{ id: 2, name: 'Additional Details / Notes' },{ id: 3, name: 'Work Experience' },{ id: 4, name: 'Education Information' }];
    var candidateExtraFieldsData = [];
    var genderData = [];
    var currencyTypes = [];
    var languageList = [];
    var candidateColumns = [];
    let contactColumns = [];
    let companyContactColumns = [];
    let companyColumns = [];
    var proficiencyList = ['No proficiency', 'Elementary proficiency', 'Limited working proficiency', 'Professional working proficiency', 'Full professional proficiency', 'Native or bilingual proficiency'];
    let selectedValues = {}; // Object to store selected values of Language & Proficiency
    let fileTypeCustomFields = [];
    let fileTypeCustomFieldsForContact = [];
    let fileTypeCustomFieldsForCompany = [];
    let fileTypeCustomFieldsForCompanyContact = [];
    let fileDataForCompany = {};
    let fileDataForCompanyContact = {};
    let dropdownCustomFields = [];
    let dropdownCustomFieldsForContact = [];
    let dropdownCustomFieldsForCompany = [];
    let dropdownCustomFieldsForCompanyContact = [];
    let multiselectCustomFields = [];
    let multiselectCustomFieldsForContact = [];
    let multiselectCustomFieldsForCompany = [];
    let multiselectCustomFieldsForCompanyContact = [];
    let listofmultiselectcolumn = [];
    let listofmultiselectcolumnForContact = [];
    let listofmultiselectcolumnForCompany = [];
    let listofmultiselectcolumnForCompanyContact = [];
    let flagForShowOnExtension = false;
    let flagForStandardDateField = false;
    let flagForDefaultContactStage = false;
    let flagForFileCustomField = false;
    let flagForCandidateWorkingAtACompany = false;
    let flagForOffLimits = false;
    let flagForSearchableDropdown = false;
    let countOfLanguageProfieciency = 1;
    let flagForCompanyCustomSectionFields = false;
    let flagForContactCustomSectionFields = false;
    let enforceRequiredFieldsOnExtension = {};
    let flagForEnforceRequiredFieldsOnExtension = false;
    let flagForCompanyContacts = false;
    let flagForNestedCustomFields = false;
    const candidateDefaultDataFields = ['genderid', 'workexpyr', 'relevantexperience', 'salarytype', 'currencyid'];
    let differentEmailValueForCandidate = false;
    let oldValueForEmailCandidate = '';
    let differentEmailValueForContact = false;
    let oldValueForEmailContact = '';
    let differentPhoneValueForCandidate = false;
    let oldValueForPhoneCandidate = '';
    let differentPhoneValueForContact = false;
    let oldValueForPhoneContact = '';
    let noteTypeList = [];
    let duplicateContactSlug = null;
    let duplicateCandidateSlug = null;
    let holdCandidateObject = null;
    let existingCandidate = null;
    let countOfDuplicateFound = 0;
    let holdContactObject = null;
    let holdCompanyObject = null;
    const defaultSelectedOptions = {};
    const multiselectCheckboxValueContainer = {};
    let checkDuplicateNotCalled = true;
    let files ={};
    let flagForExtensionEnhancement = false;
    let flagForAddressFields = false;
    var Domains = {
        'www.linkedin.com': {
            slugParamNumber: 1,
            name: "LinkedIn",
            checkURL: function () {
                var url = window.location.href;
                if (url.includes('linkedin.com/recruiter/')) {
                    this.name = "LinkedIn Recruiter";
                } else if (url.includes('linkedin.com/talent/')) {
                    this.name = "Recruiter Lite";
                } else if (url.includes('linkedin.com/sales/')) {
                    this.name = "Sales Navigator";
                }
            }
        },
        'facebook.com': {
            slugParamNumber: 0,
            csp: true
        },
        'twitter.com': {},
        'www.xing.com': {
            slugParamNumber: 3,
            name: "Xing"
        },
        'app.zoominfo.com': {
            name: "Zoom Info"
        },
        'employers.indeed.com': {
            topDocFrame: true,
            name: "Indeed"
        },
        'stackoverflow.com': {},
        'github.com': {},
        'www.glassdoor.com': {},
        'mail.google.com': {
            name: "Gmail"
        },
        'outlook.live.com': {
            name: "Outlook"
        },
        'outlook.office365.com': {
            name: "Outlook"
        },
        'outlook.office.com': {
            name: "Outlook"
        },
        'outlook.microsoft365.com': {
            name: "Outlook"
        },
        'outlook.microsoft.com': {
            name: "Outlook"
        },
        'go.zoominfo.com': {
            name: "ZoomInfo"
        },
        'hiring.naukri.com': {
            name: "Naukri"
        },
        'resdex.naukri.com': {
            name: "Naukri Resdex"
        },
        'recruiter-app.zoominfo.com': {
            name: "ZoomTalentOS"
        }
    };
    var Monitors = [];
    var candidate = {};
    var candidateNotes = [];
    var company = {};
    var _comapnyid = '';
    var _jobid = '';
    var contact = {};
    var contactNotes = [];
    var submitedEntity = undefined;
    var currentUrlObj = window.top.location
    var previousUrl = JSON.parse(JSON.stringify(currentUrlObj));
    var notifications = [];
    var notification_ids = [];
    var assignedJobs = [];
    var hiringStages = [];
    var hiringStageTriggers = [];
    var selectedJobId = null
    var selectedAssignmentId = null
    var candidateSlug = null;
    var contactSlug = null;
    var entityTypeId = null;
    var candidateAddress = null;
    var experianceInYear = null;
    var specialization = null;
    var versionTag = "";
    var linkedInslug = "";
    var createCandidate = false;
    var ctp = {
        "www.linkedin.com": false
    }
    var do_log = function (message) {
        if (DEBUG_MODE) {
            console.log(message);
        }
    };
    var fromTopJQcontext = function (selector, topDocIframe = false) {
        if (!topDocIframe) {
            return $(selector, window.top.document);
        } else {
            return $(selector, window.top.document.getElementById('rcrmtTopDocFrame').contentDocument);
        }
    }
    var EventListnsers = [];
    const addToHotlist = 'Add to Hotlist';
    const contactAdded = 'Contact Added';
    const candidateAdded = 'Candidate Added';
    const companyAdded = 'Company Added';
    const meetingAdded = 'Meeting Added';
    const manuallyAdded = 'Manually Added';
    const hotlistBtnClick = 'Add to Hotlist - Button Click';
    const meetingBtnClick = 'Add Meeting - Button Click';
    const taskBtnClick = 'Add Task - Button Click';
    const resumeUploaded = 'Resume Uploaded - Extension';
    const contactUpdated = 'Contact Updated';
    const candidateUpdated = 'Candidate Updated';
    const companyUpdated = 'Company Updated';
    const chromeExtension = 'Chrome Extension';
    const actionSource = 'Action Source';
    const platformName = 'Platform';
    const entityName = 'Entity';
    const extensionPage = 'Extension Page';
    const createHotlist = 'Create New Hotlist';
    const shareWithTeammate = 'Share With Teammate';
    const formField = 'Form Fields';
    const saveAsCandidateContact = 'Also Save As A Candidate / Contact';
    const savePdf = 'Save Profile as PDF';
    const meetingType = 'Meeting Type';
    const titleLength = 'Title Length';
    const whereLength = 'Where - Length';
    const descriptionLength = 'Description Length';
    const relatedEntityType = 'Related Entity';
    const reminderDuration = 'Reminder Duration';
    const numberOfAttendees = 'Number of Attendees';
    const calendarInvite = 'Calender Invite';
    const meetingDuration = 'Meeting Duration';
    const startTimeDate = 'Start time and date';
    const remarkLength = 'Remark Char Length';
    const emailTriggerCheck = 'Email Trigger';
    const fileType = 'File Type';
    const methodResume = 'Method';
    const tasktype = 'Task Type';
    const addressFields = ['locality', 'city', 'state', 'country', 'postal_code'];
    var relatedEntity = {
        "2": "Contact",
        "3": "Company",
        "4": "Job",
        "5": "Candidate",
        "11": "Deal"
    }
    var conferenceData = {};

    var filteredOptionsUser = [];
    var filteredOptionsTeam = [];
    
    var collaboratorDataUser = [];
    var collaboratorDataTeam = [];
    var collaboratorTaskUserIds = [];
    var collaboratorTaskTeamIds = [];
    var collaboratorCandidateNotesUserIds = [];
    var collaboratorCandidateNotesTeamIds = [];
    var collaboratorContactNotesUserIds = [];
    var collaboratorContactNotesTeamIds = [];
    var collaboratorCompanyNotesUserIds = [];
    var collaboratorCompanyNotesTeamIds = [];
    var collaboratorMeetingUserIds = [];
    var collaboratorMeetingTeamIds = [];
    var selectedCandidateNoteType = '';
    var selectedContactNoteType = '';
    var selectedCompanyNoteType = '';
    let flagForNoteTypeOnExtension = false;
    let selectedTaskType = '';
    let selectedMeetingType = '';
    var companyContactOptions = [];
    var selectedCompanyContacts = [];
    var taskTypeList = [];
    var meetingTypeList = [];
    var nestedCustomFieldEntities = [
        {
            2 : {
                'rootNodes' : [],
                'children' : [],
                'nestedFields' : [],
                'defaultOptions' : []
            },
            3 : {
                'rootNodes' : [],
                'children' : [],
                'nestedFields' : [],
                'defaultOptions' : []
            },
            5 : {
                'rootNodes' : [],
                'children' : [],
                'nestedFields' : [],
                'defaultOptions' : []
            }
        }
    ];
    const contactEntityTypeId = 2;
    const companyEntityTypeId = 3;
    const candidateEntityTypeId = 5;
    const companyContactEntityTypeId = 7;
    const entityTypeFields = ['candidate', 'company', 'contact', 'deals', 'job', 'user', 'team'];
    var entitiesArray = [contactEntityTypeId, companyEntityTypeId, candidateEntityTypeId];
    var entityTypeFieldColumnValues = {};
    var entityTypeFieldsForEntities =
        {
            2 : {
                'candidateType' : [],
                'contactType' : [],
                'companyType' : [],
                'dealsType' : [],
                'jobType' : [],
                'userType' : [],
                'teamType' : []
            },
            3 : {
                'candidateType' : [],
                'contactType' : [],
                'companyType' : [],
                'dealsType' : [],
                'jobType' : [],
                'userType' : [],
                'teamType' : []
            },
            5 : {
                'candidateType' : [],
                'contactType' : [],
                'companyType' : [],
                'dealsType' : [],
                'jobType' : [],
                'userType' : [],
                'teamType' : []
            }
        };

    function resetProfileUI() {
        if ($('#rcrmtTopDocFrame', window.top.document).length) {
            $('#rcrmtTopDocFrame', window.top.document).remove();
        }
        $(".image").each(function (index, element) {
            $(element).attr("src", $(element).attr('data-defaultrsrc'));
        });
        $(".cimage").each(function (index, element) {
            $(element).attr("src", $(element).attr('data-defaultrsrc'));
        });
        $("input").each(function (index, element) {
            $(element).val("");
        });
        $("textarea").each(function (index, element) {
            $(element).val("");
        });
        $('.candidate_resume_p').each(function (index, element) {
            $(element).text("Click or Drag Resume/CV Here.");
        });
        $('.candidate_resume_p').removeClass('color-primary');
        $('.exists-message-container').toggleClass('slidedown', false).toggleClass('d-block', false).toggleClass('d-none', true);
        $('.form-container').toggleClass('slidedown', false);
        $('#pdf_version_tag').val("")
        Object.values(tagInputs).forEach((tagInput) => {
            tagInput.removeAllTags();
        });
        base64Text = "";
    }
    function updateProfileUI(reset = true, checkDuplicate = false, callback = function () { }) {
        if (reset) {
            resetProfileUI();
        }
        if(flagForExtensionEnhancement && profile.cname != undefined  && profile.cname.value != undefined && profile.cname.value != ""  && profile.cname.value != null){
            $('#contact_companyid').val( profile.cname.value.trim());
            sendMessageToParent({ 'message': 'getCompanies', 'q': profile.cname.value.trim() });
            $(".search-company-loader").removeClass("d-none").addClass("d-block");
        }
        Object.keys(profile).forEach(selector => {
            if (profile[selector] != undefined) {
                switch (profile[selector].type) {
                    case "image":
                        $("." + selector).each(function (index, element) {
                            $(element).attr("src", profile[selector].value.trim());
                        });
                        break;
                    case "input":
                        $("." + selector).each(function (index, element) {
                            if (profile[selector] !== undefined && profile[selector].value !== undefined) {
                                $(element).val(profile[selector]?.value?.trim());
                            }
                        });
                        break;
                    case "longText":
                        fullResumeText = profile[selector].value.trim();
                        break;
                    case "tags":
                        $("." + selector + ".tagified").each(function (index, element) {
                            if (profile[selector] !== undefined && profile[selector].value !== undefined) {
                                tagInputs[$(element).attr('name')].removeAllTags()
                                if (profile[selector].value.length) {
                                    tagInputs[$(element).attr('name')].addTags(profile[selector].value)
                                }
                            }
                        });
                        break;
                    default:
                        break;
                }
                profile[selector] = undefined;
            }
        });
    }

    /**
     * Returns if slugs are to be compared or not
     */
    function checkSlug() {
        var checkSlug = true;
        if (currentUrlObj.href.indexOf('https://www.linkedin.com/talent/') > -1) { //Don
            checkSlug = false;
        }
        if (currentUrlObj.href.indexOf('https://www.linkedin.com/sales/') > -1) {
            checkSlug = false;
        }
        return checkSlug;
    }

    /**
     * Compares previous and current url and returns true if the slug has changed else returns false
     * Returns true in cases where slug is not be checked so the process continues as new profile
     */
    function slugChanged() {
        var slugChanged = true;
        if (!checkSlug()) {
            return slugChanged;
        }
        var strPreviousUrl = previousUrl.href;
        if (strPreviousUrl != '' && Object.keys(Domains).indexOf(document.domain) != -1) {
            var slugDomain = Domains[document.domain];
            var prevUrlPaths = previousUrl.pathname.split('/');
            var currUrlPaths = currentUrlObj.pathname.toString().split('/');
            prevUrlPaths.splice(0, 1); currUrlPaths.splice(0, 1);
            if (prevUrlPaths[slugDomain.slugParamNumber] != undefined && currUrlPaths[slugDomain.slugParamNumber] != undefined) {
                if (prevUrlPaths[slugDomain.slugParamNumber] == currUrlPaths[slugDomain.slugParamNumber]) {
                    return false;
                }
            }
            // if (urlPaths)
        }
        return slugChanged;
    }
    //-----------------------------------------------MonitorsSectionStart-----------------------------------------------------//
    function startMonitors() {
        stopAllMonitors();
        var domainIndex = Object.keys(Domains).indexOf(document.domain);
        resetProfileUI();
        $('.linkedin-pdf').toggleClass('d-none', true)
        if (Domains[document.domain] && Domains[document.domain].topDocFrame) {
            var i = document.createElement('iframe');
            i.style.display = 'none';
            document.body.appendChild(i);
            i.src = currentUrlObj;
            i.id = "rcrmtTopDocFrame";
            window.top.document.body.appendChild(i);
            // console.log('creating an iframe in top doc');
        }
        switch (domainIndex) {
            case 0:
                isLinkedInPage = true;
                $('.linkedin-pdf').toggleClass('d-none', false)
                if (isLinkedInProfilePage()) {
                    Monitors.push(startLinkedMonitor());
                    setFrameLoadingState();
                }
                break;
            // case 1:
            //     if (isFacebookProfilePage()) {
            //         Monitors.push(startFacebookMonitor());
            //         setFrameLoadingState();
            //     }
            //     break;
            case 3:
                if (isXingProfilePage()) {
                    Monitors.push(startXingMonitor());
                    setFrameLoadingState();
                }
                break;
            case 4:
                if (isZoomInfoProfilePage()) {
                    Monitors.push(startZoomInfoMonitor());
                    setFrameLoadingState();
                }
                break;
            case 5:
                if (isIndeedProfilePage()) {
                    Monitors.push(startIndeedMonitor());
                    setFrameLoadingState();
                }
                break;
            case 9:
                if (isGmailThreadPage()) {
                    Monitors.push(startGmailMonitor());
                    setFrameLoadingState();
                }
                break;
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                if (isOutlookThreadPage()) {
                    Monitors.push(startOutlookMonitor());
                    setFrameLoadingState();
                }
                break;
            case 15:
                if (isZoomProfilePage()) {
                    Monitors.push(startZoomMonitor());
                    setFrameLoadingState();
                }
                break;
            case 16:
                if (isNaukriProfilePage()) {
                    Monitors.push(startNaukriMonitor());
                    setFrameLoadingState();
                }
                break;
            case 17: // Naukri Resdex
                if (isNaukriProfilePage()) {
                    Monitors.push(startNaukriResdexMonitor());
                    setFrameLoadingState();
                }
                break;
            case 18:
                if (isZoomInfoProfilePage()) {
                    Monitors.push(startZoomTalentOSInfoMonitor());
                    setFrameLoadingState();
                }
                break;
            default:
                break;
        }
    }

    function stopAllMonitors() {
        Monitors.forEach(interval => {
            clearInterval(interval);
        });
    }
    function startLinkedInObserver() {
        if (!linkedInObserver) {
            const addLogo = debounce(function () {
                if (!extSettings.ctp) {
                    return
                }
                let linPathNames = [
                    '/in/',
                    '/company/',
                    // 'school'
                ]
                let linKeys = {
                    '[data-control-name="background_details_company"]:not(.rcrmfied-133)': {},//Profile details page experience section
                    // '[data-control-name="background_details_school"]:not(.rcrmfied-133)': {},//Profile details page education section
                    '[data-control-name="actor_container"]:not(.rcrmfied-133)': {}, //Feed page profiles
                    '[data-control-name="browsemap_profile"]:not(.rcrmfied-133)': {},//Profile details page people also viewed section
                    '[data-control-name="pymk_profile"]:not(.rcrmfied-133)': {},//Profile details page people you may know section
                    '[data-control-name="recommendation_details_profile"]:not(.rcrmfied-133)': {},//Profile details Recommendations section
                    '[data-control-name="interests_profile_clicked"]:not(.rcrmfied-133)': {},//Profile details page Interests section: profiles
                    '[data-control-name="interests_company_clicked"]:not(.rcrmfied-133)': {},//Profile details page Interests section: companies
                    '[data-control-name="background_details_certification"]:not(.rcrmfied-133)': {},//Profile details page certifications section
                    '.entity-result .entity-result__image .app-aware-link:not(.rcrmfied-133)': {},//Search results list page
                    '.entity-result .entity-result__universal-image .app-aware-link:not(.rcrmfied-133)': {},//Search results list page
                    '.entity-result__universal-image .app-aware-link:not(.rcrmfied-133)': {},//Search results list page
                    '.search-marvel-srp .reusable-search__entity-results-list .entity-result .entity-result__image-1 .app-aware-link:not(.rcrmfied-133)': {}, //Search results list page
                    '.pv-browsemap-section__member-container .link-without-hover-visited:not(.rcrmfied-133)': {},//Search for People Also Viewed
                    '.pv-profile-pymk__list .pv-pymk-section__member-container .link-without-hover-visited:not(.rcrmfied-133)': {}//Search for People you may know

                }
                Object.keys(linKeys).forEach(linKey => {
                    elems = fromTopJQcontext(linKey);
                    if (elems.length) {

                        $(elems).addClass('rcrmfied-133').each((index, elem) => {
                            linPathNames.forEach(linPathName => {
                                let ctpSpan = document.createElement('span');
                                ctpSpan.innerHTML = '<button class="rcrm-ctp" style="line-height:18px !important;">R</button>'
                                var classList = "rcrm-ctp-span";
                                classList = linKeys[linKey].classList ? classList + " " + linKeys[linKey].classList : classList
                                ctpSpan.classList = classList;
                                if (elem.href.indexOf(linPathName) > -1) {
                                    $(elem).parent().append(ctpSpan).addClass("pos-rel");
                                }
                            });
                        })
                    }
                });
                //Add on click event ot only the newly added profile links.
                fromTopJQcontext('.rcrm-ctp-span:not(.event-added)').on('click', '.rcrm-ctp', function (e) {
                    previousUrl = new URL(currentUrlObj.href)
                    currentUrlObj = new URL($('a', $(e.currentTarget.parentElement).parent())[0].href)
                    window.postMessage({
                        "message": "urlchanged",
                        "linkedInCtp": true
                    });
                    e.preventDefault()
                    e.stopPropagation();
                    return;
                });
                fromTopJQcontext('.rcrm-ctp-span:not(.event-added)').addClass("event-added")
            }, 500)
            linkedInObserver = new MutationObserver(() => addLogo());
            var container = window.top.document.body
            var config = {
                childList: true,
                subtree: true
            };
            // add logos to preloaded urls
            addLogo();
            linkedInObserver.observe(container, config);
            return linkedInObserver;
        } else {
            return false
        }
    }
    function stopLinkedInObserver(removeExisting = true) {
        if (linkedInObserver) {
            linkedInObserver.disconnect()
            linkedInObserver = null
            //Remove all pre-recrmfied profile links
            if (removeExisting) {
                fromTopJQcontext(".rcrm-ctp-span").remove(0)
                fromTopJQcontext(".rcrmfied-133").removeClass("rcrmfied-133")
            }

        }
    }
    function startLinkedMonitor() {
        stopLinkedInObserver(false)
        if (extSettings.ctp !== false) {
            startLinkedInObserver();
        }
        return linkedInterval = setInterval(() => {
            do_log = "linked in interval is running";
            if (ctp[window.top.document.domain] || fromTopJQcontext(".profile-view-grid").length || fromTopJQcontext(".org-top-card").length || $("#primary-content") || fromTopJQcontext("#profile-container") || fromTopJQcontext(".company-page").length) {//Page loaded
                do_log = "linked in interval stopped";
                do_log = "parsing data";
                $("#candidate_link").click();
                parseLinkedIn();
                stopAllMonitors();
            }
        }, 500);
    }

    //Naukri
    function startNaukriMonitor() {
        return naukriInterval = setInterval(() => {
            do_log = "Naukri interval is running";
            if (fromTopJQcontext("#oreroot").length) {//Page loaded
                // console.log('Page Loaded');
                do_log = "Naukri interval stopped";
                do_log = "parsing data";
                $("#candidate_link").click();
                stopAllMonitors();
                parseNaukri();
            }
        }, 500);
    }

    //Naukri Resdex
    function startNaukriResdexMonitor() {
        return naukriResdexInterval = setInterval(() => {            
            do_log = "Naukri Resdex interval is running";
            if (fromTopJQcontext("#rdxRoot").length) {//Page loaded
                // console.log('Page Loaded');
                do_log = "Naukri Resdex interval stopped";
                $("#candidate_link").click();
                stopAllMonitors();
                parseNaukriResdex();
            }
        }, 500);
    }

    function startFacebookMonitor() {
        var fbIntervalCount = 0
        return facebookInterval = setInterval(() => {
            do_log = "facebook interval is running";
            if (fromTopJQcontext("#pagelet_timeline_main_column").length || fbIntervalCount < 15) {//Page loaded (Or a page that is non parsable)
                do_log = "facebook interval stopped";
                do_log = "parsing data";
                $("#candidate_link").click();
                parseFacebook();
                stopAllMonitors();
            }
            fbIntervalCount++;
        }, 500);
    }
    function startXingMonitor() {
        return xingInterval = setInterval(() => {
            do_log = "Xing interval is running";
            if (fromTopJQcontext("#profile-xingid-container").length || fromTopJQcontext(".ModuleHeader-ModuleHeader-headerHeadlineContainer-ccf8dd52").length || fromTopJQcontext("#cv-print-header").length
                || fromTopJQcontext('#content').length || fromTopJQcontext('#app-layout').length || fromTopJQcontext('#app').length || fromTopJQcontext('#stm').length) { //Page loaded
                do_log = "Xing interval stopped";
                do_log = "parsing data";
                $("#candidate_link").click();
                stopAllMonitors();
                parseXing();
            }
        }, 500);
    }
    function startZoomInfoMonitor() {
        return zoomInterval = setInterval(() => {
            do_log = "Zoominfo interval is running";
            if (fromTopJQcontext(".contactProfile").length || fromTopJQcontext(".profile-container").length) {//Page loaded
                do_log = "Zoominfo interval stopped";
                do_log = "parsing data";
                $("#candidate_link").click();
                parseZoomInfo();
                stopAllMonitors();
            }
        }, 500);
    }

    function startZoomTalentOSInfoMonitor() {
        return zoomInterval = setInterval(() => {
            do_log = "Zoominfo Talent OS interval is running";
            if (fromTopJQcontext(".zi-candidate-detail-contact-info").length ||
                fromTopJQcontext(".zi-candidate-detail").length ||
                fromTopJQcontext(".mat-toolbar").length ||
                fromTopJQcontext(".zi-icon").length ) {//Page loaded
                do_log = "Zoominfo Talent OS interval stopped";
                do_log = "parsing data";
                $("#candidate_link").click();
                parseZoomTalentOS();
                stopAllMonitors();
            }
        }, 500);
    }

    function startZoomMonitor() {
        return zoomInterval = setInterval(() => {
            do_log = "Zoominfo interval is running";
            if (fromTopJQcontext(".contactProfile").length || fromTopJQcontext(".profile-container").length) {//Page loaded
                do_log = "Zoominfo interval stopped";
                do_log = "parsing data";
                $("#candidate_link").click();
                parseZoom();
                stopAllMonitors();
            }
        }, 500);
    }

    function startIndeedMonitor() {
        return zoomInterval = setInterval(() => {
            do_log = "Indeed interval is running";
            if (fromTopJQcontext("#candidateProfileContainer").length) {//Page loaded
                do_log = "Indeed interval stopped";
                do_log = "parsing data";
                $("#candidate_link").click();
                parseIndeed();
                stopAllMonitors();
            }
        }, 500);
    }
    function startGmailMonitor() {
        return gmailInterval = setInterval(() => {
            do_log = "Gmail interval is running";
            if (fromTopJQcontext("#\\:1").length) {//Page loaded
                do_log = "Gmail interval stopped";
                do_log = "parsing data";
                $("#candidate_link").click();
                parseGmail();
                stopAllMonitors();
            }
        }, 500);
    }
    function startOutlookMonitor() {
        return outlookInterval = setInterval(() => {
            do_log = "Outlook interval is running";
            $outlookMonitorCounter = 0;
            if (fromTopJQcontext("#ReadingPaneContainerId").length) {//Page loaded
                $outlookMonitorCounter++;
                do_log = "Outlook interval stopped";
                do_log = "parsing data";
                $("#candidate_link").click();
                parseOutlook();
                stopAllMonitors();
            } else if ($outlookMonitorCounter > 20) {
                stopAllMonitors();
            }
        }, 500);
    }
    //-----------------------------------------------MonitorsSectionEnd-----------------------------------------------------//

    //-----------------------------------------------ParsingSectionStart--------------------------------------------------//

    //-----------------------------------------------LinkedInParsingSectionStart--------------------------------------------//


    function extractPersonFromLinkedInResponse(response) {
        if (response) {
            versionTag = "";
            if (response.hasOwnProperty('profileContactInfo')) {
                let linContact = response.profileContactInfo;
                if (linContact.emailAddress && linContact.emailAddress.length) {
                    profile.email = {
                        "value": linContact.emailAddress || '',
                        "type": "input"
                    };
                }
                if (linContact.phoneNumbers && linContact.phoneNumbers.length) {
                    profile.phone = {
                        "value": linContact.phoneNumbers[0].number || '',
                        "type": "input"
                    };
                }
            }
            if (response.hasOwnProperty('profileView')) {
                let linProfile = response.profileView;
                if (linProfile.profile) {
                    versionTag = linProfile.profile.versionTag
                    profile.pdf_version_tag = {
                        "type": "input",
                        "value": versionTag
                    }
                    var name = linProfile.profile.firstName + ' ' + linProfile.profile.lastName;
                    name = name.trim().split(' ')
                    var fname = name[0].trim() || '';
                    profile.fname = {
                        "value": fname,
                        "type": "input"
                    }
                    var lname = name.join(' ').replace(name[0], '').trim();
                    profile.lname = {
                        "value": lname,
                        "type": "input"
                    }
                    if (linProfile.profile.hasOwnProperty('miniProfile')) {
                        profile.linkedin = {
                            "value": linProfile.profile.miniProfile.publicIdentifier ? ('https://www.linkedin.com/in/' + linProfile.profile.miniProfile.publicIdentifier) : '',
                            "type": "input"
                        }
                        if (linProfile.profile.miniProfile.picture) {
                            var imgUrl = extractLinkedInImg(linProfile.profile.miniProfile.picture);
                            profile.image = {
                                "value": imgUrl || '',
                                "type": "image"
                            };
                        }
                    }
                    var geoLocation = linProfile.profile.geoLocationName ? (linProfile.profile.geoLocationName + ", ") : '';
                    var geoCountry = linProfile.profile.geoCountryName || '';

                    var _location = geoLocation + geoCountry;
                    profile.location = {
                        "value": _location,
                        "type": "input"
                    }
                }

                if (linProfile.hasOwnProperty('positionView') && linProfile.positionView.elements) {
                    if (linProfile.positionView.elements.length) {
                        let position = linProfile.positionView.elements[0];
                        if (position) {
                            profile.organisation = {
                                "value": position.companyName || '',
                                "type": "input"
                            }
                            profile.cname = {
                                "value": position.companyName || '',
                                "type": "input"
                            }
                            profile.position = {
                                "value": position.title || '',
                                "type": "input"
                            }
                            if (position.company && position.company.miniCompany) {
                                let linMCompany = position.company.miniCompany;
                                let clinkedin = linMCompany.universalName;
                                if (clinkedin.indexOf("linkedin.com/") < 0) {
                                    clinkedin = "https://www.linkedin.com/company/" + clinkedin
                                }
                                profile.clinkedin = {
                                    "value": clinkedin || '',
                                    "type": "input"
                                }
                                if (linMCompany.logo) {
                                    var imgUrl = extractLinkedInImg(linMCompany.logo);
                                    profile.cimage = {
                                        "value": imgUrl || '',
                                        "type": "image"
                                    };
                                }
                            }

                        }
                    }
                }
                
                if (flagForWorkAndEducation){
                    // 'educationView' contains the Education Histry of the candidate
                    if(linProfile.hasOwnProperty('educationView') && linProfile.educationView.elements.length){
                        let education = [];
                        for(let i=0; i<linProfile.educationView.elements.length; i++){
                            // extracting the Education Details
                            let edu = {};
                            edu.institute_name = linProfile.educationView.elements[i].schoolName || '';
                            edu.educational_qualification = linProfile.educationView.elements[i].degreeName || '';
                            edu.educational_specialization = linProfile.educationView.elements[i].fieldOfStudy || '';
                            edu.grade = linProfile.educationView.elements[i].grade || '';
                            edu.education_description = linProfile.educationView.elements[i].description || '';

                            // 'timePeriod' contains the start and end date of the education, and is optional i.e. it may not be present
                            if (linProfile.educationView.elements[i].timePeriod){
                                // extracting the start date
                                if (linProfile.educationView.elements[i].timePeriod.startDate){
                                    edu.education_start_date = linProfile.educationView.elements[i].timePeriod.startDate;
                                }
                                else{
                                    edu.education_start_date = {};
                                }
                                // extracting the end date
                                if (linProfile.educationView.elements[i].timePeriod.endDate){
                                    edu.education_end_date = linProfile.educationView.elements[i].timePeriod.endDate;
                                }
                                else{
                                    edu.education_end_date = {};
                                }
                            }
                            else{
                                edu.education_start_date = {};
                                edu.education_end_date = {};
                            }
                            // location is not present 
                            edu.education_location = '';
                            education.push(edu);
                        }
                        listOfEducation = education;
                    
                        let parentTag = document.getElementById("educationHistoryHeader");
                        let parentTagRemove = document.getElementById('educationHistoryHeaderEmpty');
                        parentTagRemove.style.display = 'none';
                        parentTag.style.display = 'block';
                        parentTag.innerHTML = '';
                        if (listOfEducation.length <= 2){
                            parentTag.classList.remove("scroll");
                        }
                        else{
                            parentTag.classList.add("scroll");
                        }
                        for(let i=0; i < listOfEducation.length; i++){
                            let education = listOfEducation[i];
                            let subTag = document.createElement("div");
                            let tagSchool, tagDegree = '', tagDate = '', tagGrade = '', tagDescription = '';
                            let breakLine = '<hr style="border: 1px #77777780 solid; margin-left: 20px; margin-right: 20px; margin-top: 5px;"/>';

                            tagSchool = '<div class="p-t-10 p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><h4 style="color:black;">' + education.institute_name + '</h4></div></div></div>';

                            if (education.educational_qualification != '' || education.educational_specialization != ''){
                                tagDegree = '<div class="p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><p style="padding-top: 5px;">' + education.educational_qualification + ', ' + education.educational_specialization + '</p></div></div></div>';
                            }
                            if (education.education_start_date != undefined || education.education_end_date != undefined){
                                tagDate = '<div class="p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><p>' + calculateInterval(education.education_start_date, education.education_end_date, true) + '</p></div></div></div>';
                            }
                            if (education.grade != ''){
                                tagGrade = '<div class="p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><p>' + 'Grade: ' + education.grade + '</p></div></div></div>';
                            }
                            if (education.education_description.length >= 49){
                                let firstHalf = education.education_description.substring(0, 49);
                                tagDescription = '<div class="p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><p style="color: black; display: inline;">' + firstHalf + '<span id="readMoreDots">...</span> </p><span class="desc-tooltip"> Read more <br> <div class="tooltiptext">' + education.education_description.replaceAll("\n", "<br>") + '</div> </span></div></div></div>';
                            }
                            else {
                                if (education.education_description != ''){
                                    tagDescription = '<div class="p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><p style="color: black; display: inline;">' + education.education_description + '</p></div></div></div>';
                                }
                            }

                            if (i == listOfEducation.length - 1){
                                subTag.innerHTML = tagSchool + tagDegree + tagDate + tagGrade + tagDescription;
                            }
                            else{
                                subTag.innerHTML = tagSchool + tagDegree + tagDate + tagGrade + tagDescription + breakLine;
                            }

                            education.education_start_date = getUnixTimestamp(education.education_start_date);
                            education.education_end_date = getUnixTimestamp(education.education_end_date, true);
                        
                            parentTag.appendChild(subTag);
                        }
                    }
                    else{
                        let parentTagRemove = document.getElementById('educationHistoryHeaderEmpty');
                        parentTagRemove.style.display = 'none';
                    }
                    // 'experienceView' contains the Experience Histry of the candidate
                    if(linProfile.hasOwnProperty('positionView') && linProfile.positionView.elements.length){
                        let experience = [];
                        for(let i=0; i<linProfile.positionView.elements.length; i++){
                            // extracting the Experience Details
                            let exp = {};
                            exp.title = linProfile.positionView.elements[i].title || '';
                            exp.work_company_name = linProfile.positionView.elements[i].companyName || '';
                            exp.work_location = linProfile.positionView.elements[i].locationName || '';
                            // 'salary' & 'is_currently_working' is not present 
                            exp.salary = 0;
                            exp.is_currently_working = 0;
                            if (i == 0 && linProfile.positionView.elements[i].timePeriod && linProfile.positionView.elements[i].timePeriod.endDate == undefined){
                                exp.is_currently_working = 1;
                            }
                            exp.work_description = linProfile.positionView.elements[i].description || '';
                            // 'company' field is optional i.e. it may not be present
                            if (linProfile.positionView.elements[i].company != undefined && linProfile.positionView.elements[i].company.industries != undefined){
                                // getting the industry
                                exp.industry_id = linProfile.positionView.elements[i].company.industries[0] || 0;
                            }
                            else{
                                exp.industry_id = 0;
                            }
                            // 'timePeriod' contains the start and end date of the experience, and is optional 
                            if (linProfile.positionView.elements[i].timePeriod){
                                // extracting the start date
                                if (linProfile.positionView.elements[i].timePeriod.startDate){
                                    exp.work_start_date = linProfile.positionView.elements[i].timePeriod.startDate;
                                }
                                else {
                                    exp.work_start_date = {};
                                }
                                // extracting the end date
                                if (linProfile.positionView.elements[i].timePeriod.endDate){
                                    exp.work_end_date = linProfile.positionView.elements[i].timePeriod.endDate;
                                }
                                else{
                                    exp.work_end_date = {};
                                }
                            }
                            else{
                                exp.work_start_date = {};
                                exp.work_end_date = {};
                            }

                            experience.push(exp);
                        }
                        listOfExperience = experience;

                        let parentTag = document.getElementById("workHistoryHeader");
                        let parentTagRemove = document.getElementById('workHistoryHeaderEmpty');
                        parentTagRemove.style.display = 'none';
                        parentTag.style.display = 'block';
                        parentTag.innerHTML = '';
                        if (listOfExperience.length <= 1){
                            parentTag.classList.remove("scroll");
                        }
                        else{
                            parentTag.classList.add("scroll");
                        }
                        // loop through the experience array and create the UI
                        for(let i=0; i<listOfExperience.length; i++){
                            let experience = listOfExperience[i];
                            let subTag = document.createElement("div");
                            subTag.setAttribute("id", "");
                            let tagTitle, tagCompany, tagDate, tagLocation = '', tagDescription = '';
                            let breakLine = '<hr style="border: 1px #77777780 solid; margin-left: 20px; margin-right: 20px; margin-top: 5px;"/>';

                            tagTitle = '<div class="p-t-10 p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><h4 style="color:black;">' + experience.title + '</h4></div></div></div>';
                            tagCompany = '<div class="p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><b style="padding-top: 5px;">' + experience.work_company_name + '</b></div></div></div>';
                            tagDate = '<div class="p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><p>' + calculateInterval(experience.work_start_date, experience.work_end_date) + '</p></div></div></div>';
                        
                            if (experience.work_location != ''){
                                tagLocation = '<div class="p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><p>' + experience.work_location + '</p></div></div></div>';
                            }
                            if (experience.work_description.length >= 49){
                                let firstHalf = experience.work_description.substring(0, 49);
                                tagDescription = '<div class="p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><p style="color: black; display: inline;">' + firstHalf + '<span id="readMoreDots">...</span> </p><span class="desc-tooltip"> Read more <br> <div class="tooltiptext">' + experience.work_description.replaceAll("\n", "<br>") + '</div> </span></div></div></div>';
                            }
                            else{
                                if (experience.work_description != ''){
                                    tagDescription = '<div class="p-l-20 p-r-20"><div class="rcrm-form-group"><div class=""><i class="mdi mdi-input"></i><p style="color: black; display: inline;">' + experience.work_description + '</p></div></div></div>';
                                }
                            }
                        
                            if (i == listOfExperience.length - 1){
                                subTag.innerHTML = tagTitle + tagCompany + tagDate + tagLocation + tagDescription;
                            }
                            else{
                                subTag.innerHTML = tagTitle + tagCompany + tagDate + tagLocation + tagDescription + breakLine;
                            }

                            experience.work_start_date = getUnixTimestamp(experience.work_start_date);
                            experience.work_end_date = getUnixTimestamp(experience.work_end_date, true);
                        
                            parentTag.appendChild(subTag);
                        }
                    }
                    else{
                        let parentTagRemove = document.getElementById('workHistoryHeaderEmpty');
                        parentTagRemove.style.display = 'none';
                    }
                }
            }
            if (response.hasOwnProperty('skills')) {
                var _skills = response.skills
                var skills = [];
                var profileSkills = _skills.elements;
                if (profileSkills && profileSkills.length) {
                    skills = profileSkills.map(skill => skill.name);
                    profile.skill = {
                        'value': skills,
                        'type': "tags"
                    }
                }
            }
            // instead of calling finishParsing(true), we are calling checkDuplicate. Inside checkDuplicate, we called finishParsing()
            // checkDuplicate();
            finishParsing(true);
        }
    }

    function calculateInterval(start_date, end_date, onlyDate = false){
        let months = {1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun', 7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'};
        let startDate = '';
        let endDate = '';

        if(Object.keys(start_date).length == 0 && Object.keys(end_date).length == 0){
            return '';
        }
        if (onlyDate){
            if (start_date != undefined){
                let month = '';
                let year = '';
                if (start_date.month != undefined){
                    month = months[start_date.month];
                }
                if (start_date.year != undefined){
                    year = start_date.year;
                }
                startDate = month + ' ' + year;
            }
            if (end_date != undefined){
                let month = '';
                let year = '';
                if (end_date.month != undefined){
                    month = months[end_date.month];
                }
                if (end_date.year != undefined){
                    year = end_date.year;
                }
                endDate = month + ' ' + year;
            }

            return startDate + '  -  ' + endDate;
        }

        if (start_date.year != undefined){
            let month = '';
            let year = '';
            if (start_date.month != undefined){
                month = months[start_date.month];
            }
            if (start_date.year != undefined){
                year = start_date.year;
            }
            startDate = month + ' ' + year;
        }
        if (end_date.year != undefined){
            let month = '';
            let year = '';
            if (end_date.month != undefined){
                month = months[end_date.month];
            }
            if (end_date.year != undefined){
                year = end_date.year;
            }
            endDate = month + ' ' + year;
        }
        else{
            endDate = 'Present';
        }

        let timeframe = '';
        if (endDate === ''){
            timeframe = startDate;
        }
        else {
            timeframe = startDate + '  -  ' + endDate;
        }

        let interval = '';
        let date = new Date();

        // if we have all 4 data 
        if (start_date.month && end_date.month && start_date.year && end_date.year){    
            let totalMonths = ((end_date.year - start_date.year) * 12) + end_date.month - start_date.month + 1;
            let totalYears = Math.floor(totalMonths / 12);
            let remainingMonths = totalMonths % 12;
            interval = totalYears + ' yrs ' + remainingMonths + ' mos';
        }
        // if we have complete startdate and enddate is "present"
        else if (start_date.month && start_date.year){
            let totalMonths = ((date.getFullYear() - start_date.year) * 12) + (date.getMonth() + 1) - start_date.month + 1;
            let totalYears = Math.floor(totalMonths / 12);
            let remainingMonths = totalMonths % 12;
            interval = totalYears + ' yrs ' + remainingMonths + ' mos';
        }
        // if we have only years 
        else if (start_date.year && end_date.year){
            let totalYears = end_date.year - start_date.year;
            interval = totalYears + ' yrs';
        }

        let htmlDot = '<span class="dot"></span>';
        if (interval != '' && interval[0] == '0'){
            interval =  interval.substring(6);
        }
        if (interval.startsWith("1 yrs")){
            interval = "1 yr " + interval.substring(5);
        }
        if (interval.endsWith("0 mos")){
            interval = interval.substring(0, 5);
        }
        let htmlTimeframe =  timeframe + '   ' + htmlDot + '  ' + interval;
        return htmlTimeframe;
    }

    function getUnixTimestamp(dateObject, end=false){
        // when we have both 
        if (dateObject.month != undefined && dateObject.year != undefined){
            let date = dateObject.year + '.' + dateObject.month;
            let unixDate = Math.floor(new Date(date).getTime() / 1000);
            return unixDate;
        }
        // when we only have year 
        else if (dateObject.year != undefined){
            let date = dateObject.year;
            if (end){
                date += '.12.31';
            }
            else {
                date += '.1.1';
            }
            let unixDate = Math.floor(new Date(date).getTime() / 1000);
            return unixDate;
        }
        else{
            return null;
        }
    }

    function extractCompanyFromLinkedInResponse(response) {
        if (response && response.company && response.company.elements && response.company.elements.length) {
            var linCompany = response.company.elements[0];
            var website = linCompany.companyPageUrl || "";
            profile.website = { "value": website, "type": "input" };
            if (linCompany.logo && linCompany.logo.image) {
                var imgUrl = extractLinkedInImg(linCompany.logo.image)
                profile.cimage = {
                    "value": imgUrl || '',
                    "type": "image"
                };
            }
            profile.cname = {
                "value": linCompany.name || '',
                "type": "input"
            }
            profile.aboutcompany = {
                "value": linCompany.description || '',
                "type": "input"
            }
            var headquarter = linCompany.headquarter;
            if (headquarter) {
                var clocation = headquarter.line1 || "";
                clocation = headquarter.line2 ? clocation + ", " + headquarter.line2 : clocation;
                clocation = headquarter.city ? clocation + ", " + headquarter.city : clocation;
                clocation = headquarter.geographicArea ? clocation + ", " + headquarter.geographicArea : clocation;
                clocation = headquarter.postalCode ? clocation + " " + headquarter.postalCode : clocation;
                clocation = headquarter.country ? clocation + ", " + headquarter.country : clocation;
                profile.clocation = {
                    "value": clocation.replace(/,+/g, ',').trim().replace(/^,|,$/g, ''),
                    "type": "input"
                };
            }
            if (linCompany.url) {
                profile.clinkedin = { "value": linCompany.url, "type": "input" };
            }
            finishParsing(true);
            $("#company_link").click();
        }
    }
    function extractLinkedInImg(linPicture) {
        var picture = linPicture['com.linkedin.common.VectorImage'];
        var url = '';
        if (picture && picture.rootUrl && picture.artifacts) {
            let artifacts = picture.artifacts;
            if (artifacts && artifacts.length) {
                let bgImage = picture.rootUrl;
                let artifact = artifacts[1] ? artifacts[1] : artifacts[0];
                let artifactStr = artifact.fileIdentifyingUrlPathSegment;
                if (artifactStr) {
                    bgImage += artifactStr || '';
                    url = bgImage;
                }
            }
        }
        return url;
    }
    function parseLinkedIn() {
        if (ctp[window.top.document.domain]) {
            let entityId = 5
            if (currentUrlObj.pathname.split('/')[1] == "company") {
                entityId = 3;
            }
            parseLinkedInByUrl(entityId);
            return true;
        }
        if (currentUrlObj.toString().indexOf("linkedin.com/talent/hire") > -1
            || currentUrlObj.toString().indexOf("linkedin.com/talent/search") > -1) { // Recruiter
            var localPhone = fromTopJQcontext('.contact-info [data-test-contact-phone]');
            if (localPhone.length) {
                profile.phone = {
                    "value": localPhone[0].innerText,
                    "type": "input"
                };
            }


            var localEmail = fromTopJQcontext('.contact-info [data-test-contact-email-address]');
            if (localEmail.length) {
                profile.email = {
                    "value": localEmail[0].innerText,
                    "type": "input"
                };
            }

            var linkedin = fromTopJQcontext('[data-test-public-profile-link]').attr('href');
            var slug = linkedin.split('/')[4];
            parseLinkedInRecruiterPersonByUrl(slug);
        } else if (currentUrlObj.toString().indexOf("linkedin.com/talent/profile") > -1) {
            // Recruiter Professional Services page
            var email = fromTopJQcontext(".topcard-condensed__contact-info [data-test-contact-email-address]");
            if (email && email.length) {
                profile.email = {
                    "value": $(email[0]).text(),
                    "type": "input"
                };
            }
            var phone = fromTopJQcontext(".topcard-condensed__contact-info [data-test-contact-phone]");
            if (phone && phone.length) {
                profile.phone = {
                    "value": $(phone[0]).text(),
                    "type": "input"
                };
            }

            var linkedin = fromTopJQcontext('[data-test-personal-info-profile-link]')[0]?.href;
            if (!linkedin) {
                linkedin = fromTopJQcontext('[data-test-public-profile-link]')[0]?.href;
            }
            var slug = linkedin.split('/')[4];
            parseLinkedInRecruiterPersonByUrl(slug);
        } else if (currentUrlObj.toString().indexOf("linkedin.com/talent/inbox") > -1) {
            // Recruiter Professional Inbox page
            var email = fromTopJQcontext(".topcard-condensed__contact-info [data-test-contact-email-address]");
            if (email && email.length) {
                profile.email = {
                    "value": $(email[0]).text(),
                    "type": "input"
                };
            }
            var phone = fromTopJQcontext(".topcard-condensed__contact-info [data-test-contact-phone]");
            if (phone && phone.length) {
                profile.phone = {
                    "value": $(phone[0]).text(),
                    "type": "input"
                };
            }

            var linkedin = fromTopJQcontext('[data-test-personal-info-profile-link]')[0]?.href;
            if (!linkedin) {
                linkedin = fromTopJQcontext('[data-test-public-profile-link]')[0]?.href;
            }
            var slug = linkedin.split('/')[4];
            parseLinkedInRecruiterPersonByUrl(slug);
        } else if (currentUrlObj.toString().indexOf("linkedin.com/recruiter/profile") > -1) { // Recruiter page
            var i = document.createElement('iframe');
            i.style.display = 'none';
            i.src = currentUrlObj;
            document.body.appendChild(i);
            i.onload = function () {
                var linkedinDetailIinterval = setInterval(() => {
                    let btn_info = $("button[data-lira-action=edit-contact-info]", i.contentWindow.document);
                    if (btn_info.length) {
                        clearInterval(linkedinDetailIinterval);
                        btn_info.click();
                        var linkedinRecuiterDetailIinterval = setInterval(() => {//Keep checking if detail content is loaded clear interval once loaded
                            if ($("#edit-contact-info-form", i.contentWindow.document).length) {
                                var email = $("#edit-contact-info-form #email-list ul li:nth-child(1) span.type-text", i.contentWindow.document).text();
                                profile.email = { "value": email, "type": "input" };
                                var phone = $("#edit-contact-info-form #phone-list ul li:nth-child(1) span.type-text", i.contentWindow.document).text();
                                profile.phone = { "value": phone, "type": "input" };
                                clearInterval(linkedinRecuiterDetailIinterval);
                                i.parentNode.removeChild(i);
                                finishParsing(false);
                            }
                        }, 250);
                    }
                }, 250);
            };
            var linkedin = fromTopJQcontext('#topcard div.module-footer ul li.public-profile.searchable a').attr('href');
            var slug = linkedin.split('/')[4];
            parseLinkedInRecruiterPersonByUrl(slug);
            /*
                        var messageData = {};
                        messageData.message = "getLinkedInPersonProfilePdf";
                        messageData.type = "5";
                        messageData.slug = slug;
                        versionTag = $("#pdf_version_tag").val()
                        messageData.versionTag = versionTag;
                        sendMessageToParent(messageData); */

        }
        else if (currentUrlObj.toString().indexOf("linkedin.com/company/") > -1 ||
            currentUrlObj.toString().indexOf("linkedin.com/showcase/") > -1) { // Company page
            parseLinkedInByUrl(3);
        }
        else if (currentUrlObj.toString().indexOf("linkedin.com/recruiter/company/") > -1) { // Recruiter Company page
            parseLinkedInRecruiterCompanyByUrl();
        }
        else if (currentUrlObj.toString().indexOf("linkedin.com/school/") > -1) { // school page
            parseLinkedInByUrl(3);
        }
        else if (currentUrlObj.toString().indexOf("linkedin.com/sales/people/") > -1 ||
        currentUrlObj.toString().indexOf("linkedin.com/sales/search/people/") > -1) { // Recruiter Professional Services page

            window.top.document.querySelector('[data-control-name=copy_linkedin]').click();

            readClipboardFromDevTools().then((result) => {
                // console.log("Returned value: ", result);
                copiedLinkedinUrl = result;
                var slug = result.split('/')[4];
                parseLinkedInRecruiterPersonByUrl(slug);
            });
        }
        else if (currentUrlObj.toString().indexOf("linkedin.com/sales/lead/") > -1) { // Recruiter Professional Services page
            var rawLinkedinUrl = '';
            window.top.document.querySelector('._overflow-menu--trigger_1xow7n').click();

            setTimeout(() => {
                var links = window.top.document.links;
                const conditions = ['sales', 'feed', 'school', 'groups'];
                for (var i = 0; i < links.length; i++) {
                    if (!conditions.some(el => links[i].href.includes(el)) &&
                        links[i].href.includes('https://www.linkedin.com')) {
                        var url = links[i].href;
                        rawLinkedinUrl = url;
                    }
                }
                copiedLinkedinUrl = rawLinkedinUrl;
                var slug = rawLinkedinUrl?.split('/')[4]?.split('?')[0];
                parseLinkedInRecruiterPersonByUrl(slug);
            }, 500);
        }
        else if (currentUrlObj.toString().indexOf("linkedin.com/sales/company/") > -1) { // Recruiter Professional Services page

            window.top.document.querySelector('.ember-view._button_ps32ck._small_ps32ck._tertiary_ps32ck._circle_ps32ck._container_iq15dg.ml2.mr2').click();
            window.top.document.querySelector('[data-control-name=copy_li_url]').click();

            readClipboardFromDevTools().then((result) => {
                // console.log("Returned value: ", result);
                copiedLinkedinUrl = result;
                var slug = result.split('/')[4];
                parseLinkedInCompanyByUrl(slug);
            });

            /* setTimeout(() => {
                 window.focus();
 
                 window.navigator.clipboard.readText()
                     .then(text => {
                         copiedLinkedinUrl = text;
                         var slug = text.split('/')[4];
                         parseLinkedInCompanyByUrl(slug);
                     })
                     .catch(err => {
                         console.error('Failed to read clipboard contents: ', err);
                     });
             }, 500); */
        }
        else if (currentUrlObj.toString().indexOf("/search/results") < 0) {// All linked profile urls
            parseLinkedInByUrl(5)
        } else {
            finishParsing(true);
        }

    }

    function readClipboardFromDevTools() {
        return new Promise((resolve, reject) => {
            _asyncCopyFn = (async () => {
                try {
                    const value = await navigator.clipboard.readText();
                    // console.log(`${value} is read!`);
                    resolve(value);
                } catch (e) {
                    reject(e);
                }
                window.removeEventListener("focus", _asyncCopyFn);
            });

            window.addEventListener("focus", _asyncCopyFn);
            console.log("Hit <Tab> to give focus back to document (or we will face a DOMException);");
            $('#click-alert-modal').modal('show');
        });
    }


    /**
     * Calls the correct function that will call the function to fetch correct linkedin profile
     * @param {int} entityId
     */
    function parseLinkedInByUrl(entityId) {
        var entFunMap = {
            3: parseLinkedInCompanyByUrl,
            5: parseLinkedInPersonByUrl,
            2: parseLinkedInPersonByUrl,
        }
        entFunMap[entityId]();

    }
    /**
     *
     * @param {String} linkedInslug Slug of the Profile/Company
     * @param {String} message Message to send to popup.js inject_ed in linked in
     */
    function fetchLinkedInByUrl(linkedInslug, message, entityId) {
        try {
            var messageData = {};
            messageData.message = message;
            messageData.type = entityId;
            messageData.slug = linkedInslug;
            sendMessageToParent(messageData);
        } catch (error) {
            finishParsing(true);
        }
    }
    function parseLinkedInPersonByUrl() {
        linkedInslug = $(currentUrlObj).attr('pathname');
        linkedInslug = linkedInslug.split("/")[2];
        message = "getLinkedInPersonProfile"
        fetchLinkedInByUrl(linkedInslug, message, 5);
    }
    function parseLinkedInRecruiterPersonByUrl(slug) {
        linkedInslug = slug;
        message = "getLinkedInPersonProfile"
        fetchLinkedInByUrl(linkedInslug, message, 5);
    }
    function parseLinkedInCompanyByUrl(slug = null) {
        linkedInslug = "";
        if (!slug) {
            linkedInslug = $(currentUrlObj).attr('pathname');
            linkedInslug = linkedInslug.split("/")[2];
        } else {
            linkedInslug = slug;
        }

        linkedInslug = decodeURIComponent(linkedInslug);

        const format = /[ `!@#$%^&*()_+\=\[\]{};':"\\|,.<>\/?~]/;
        if (format.test(linkedInslug)) {
            linkedInslug = encodeURIComponent(linkedInslug);
        }

        message = "getLinkedInCompanyProfile"
        fetchLinkedInByUrl(linkedInslug, message, 3);
    }
    function parseLinkedInRecruiterCompanyByUrl() {
        linkedInslug = $(currentUrlObj).attr('pathname');
        linkedInslug = decodeURIComponent(linkedInslug.split("/")[3]);

        const format = /[ `!@#$%^&*()_+\=\[\]{};':"\\|,.<>\/?~]/;
        if (format.test(linkedInslug)) {
            linkedInslug = encodeURIComponent(linkedInslug);
        }

        message = "getLinkedInCompanyProfile"
        fetchLinkedInByUrl(linkedInslug, message, 3);
    }
    function isLinkedInProfilePage() {
        var currentUrl = currentUrlObj.toString();
        return (currentUrl.indexOf("linkedin.com/recruiter/") > -1 ||
            currentUrl.indexOf("linkedin.com/in/") > -1 ||
            currentUrl.indexOf("linkedin.com/school/") > -1 ||
            currentUrl.indexOf("linkedin.com/showcase/") > -1 ||
            currentUrl.indexOf("linkedin.com/company/") > -1) ||
            currentUrl.indexOf("linkedin.com/sales/people") > -1 ||
            currentUrl.indexOf("linkedin.com/sales/search/people") > -1 ||
            currentUrl.indexOf("linkedin.com/sales/lead") > -1 ||
            currentUrl.indexOf("linkedin.com/sales/company") > -1 ||
            currentUrl.indexOf("linkedin.com/search/results/") > -1 ||
            (currentUrl.indexOf("linkedin.com/talent/") > -1 && currentUrl.indexOf("/profile/") > -1)
    };
    //-----------------------------------------------LinkedInParsingSectionEnd--------------------------------------------//

    //-------------------------------------------NaukriParsingSectionStart------------------------------------------//
    function isNaukriProfilePage() {
        return (currentUrlObj.toString().indexOf("hiring.naukri.com/hiring/") > -1 ||
            currentUrlObj.toString().indexOf("resdex.naukri.com/") > -1);
    };

    //-----------------------------------------------FaceBookParsingSectionStart------------------------------------------//
    function isFacebookProfilePage() {
        return (fromTopJQcontext("#PagesCoverElementContainerPagelet", true).length || fromTopJQcontext("#fbProfileCover", true).length);
    };
    function parseFacebook() {
        if (fromTopJQcontext("#fbProfileCover").length, true) {
            // var i = document.createElement('iframe');
            // i.style.display = 'none';
            // i.target = "_top";
            // i.src = currentUrlObj;
            // document.body.appendChild(i);
            // i.onload = function () {
            // console.log($('#fbProfileCover [data-tab-key="about"]', i.contentWindow.document));
            // var facebookDetailIinterval = setInterval(() => {
            let btn_about = fromTopJQcontext('#fbProfileCover a[data-tab-key="about"]', true);
            if (btn_about.length) {
                // clearInterval(facebookDetailIinterval);
                fromTopJQcontext('#fbProfileCover [data-tab-key="about"]', true)[0].click();
                var facebookDetailContactsIinterval = setInterval(() => {
                    if (fromTopJQcontext("a._Interaction__ProfileSectionContactBasic").length, true) {
                        clearInterval(facebookDetailContactsIinterval);
                        fromTopJQcontext("a._Interaction__ProfileSectionContactBasic", true).click();
                        var facebookDetailContactsInnerIinterval = setInterval(() => {
                            if (fromTopJQcontext('#pagelet_contact', true).length) {
                                clearInterval(facebookDetailContactsInnerIinterval);
                                fromTopJQcontext('#pagelet_contact .clearfix', true).each(function (element) { console.log($(element).text()) });
                                // i.parentNode.removeChild(i);
                                finishParsing(false);
                            }
                        }, 50);


                    }
                }, 200);

            }
            // }, 250);
            // };
            var bgImage = fromTopJQcontext("#fbProfileCover .profilePicThumb img.silhouette.img", true).length ? "" : fromTopJQcontext("#fbProfileCover .profilePicThumb img.img", true).attr('src');
            if (bgImage != '') {
                profile.image = { "value": bgImage, "type": "image" };
            }
            var name = fromTopJQcontext("#fbProfileCover #fb-timeline-cover-name", true).text();
            setSplitName(name);
            var organisation = fromTopJQcontext('#profile_timeline_intro_card .sp_PcNl_Pzo88k.sx_15b8d3', true);
            if (organisation.length) {
                var position = fromTopJQcontext(organisation[0], true).parent().find('div.textContent').text();
                var indexOfAt = position.indexOf(' at ');
                profile.position = { "value": indexOfAt >= 0 ? position.substr(0, indexOfAt) : position, "type": "input" };
                var organisation = fromTopJQcontext(".pv-top-card-v2-section__company-name", true);
                if (indexOfAt >= 0) {
                    profile.organisation = { "value": position.substr(indexOfAt + 4), "type": "input" };
                } else {
                    profile.organisation = { "value": organisation.text(), "type": "input" };
                }
            }
            finishParsing(true);
        }
        else if (fromTopJQcontext("#pagelet_page_cover")) {
        }
    }
    //-----------------------------------------------FaceBookParsingSectionEnd--------------------------------------------//

    //-----------------------------------------------TwitterParsingSectionStart------------------------------------------//
    function parseTwitter() {

    }
    //-----------------------------------------------TwitterParsingSectionEnd-------------------------------------------//

    //-----------------------------------------------XingParsingSectionStart------------------------------------------//
    function parseXing() {
        var i = document.createElement('iframe');
        i.style.display = 'none';
        i.src = currentUrlObj;

        if (currentUrlObj.toString().indexOf("xing.com/profile/") > -1) { // Candidate page

            var profileId = currentUrlObj.pathname.split('/')[2];

            const myHeaders = new Headers();

            var cookieData = Object.fromEntries(document.cookie.split('; ').map(v => v.split('=').map(decodeURIComponent)));
            myHeaders.append("Cookie", JSON.stringify(cookieData).slice(1, -1));

            myHeaders.append("Accept-Language", "en");
            myHeaders.append("Cache-Control", "no-cache");
            myHeaders.append("Connection", "keep-alive");
            myHeaders.append("Origin", "https://www.xing.com");
            myHeaders.append("Pragma", "no-cache");
            myHeaders.append("Sec-Fetch-Dest", "empty");
            myHeaders.append("Sec-Fetch-Mode", "cors");
            myHeaders.append("Sec-Fetch-Site", "same-origin");
            myHeaders.append("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 OPR/108.0.0.0");
            myHeaders.append("accept", "*/*");
            myHeaders.append("content-type", "application/json");
            myHeaders.append("sec-ch-ua", "\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Opera\";v=\"108\"");
            myHeaders.append("sec-ch-ua-mobile", "?0");
            myHeaders.append("sec-ch-ua-platform", "\"macOS\"");
            myHeaders.append("xing-hops-version", "16.5.1");
            myHeaders.append("xing-one-preview", "true");

            // const graphql = JSON.stringify({
            //     query: "query getProfile($profileId: SlugOrID!, $headerImageOptions: [ImageOptions!]!) {\n  xingId(id: $profileId) {\n    ...xingIdBaseData\n    __typename\n  }\n  profileTrackingVariables(id: $profileId) {\n    name\n    value\n    __typename\n  }\n  profileModules(id: $profileId, includeDeactivatedModules: true) {\n    __typename\n    xingIdModule {\n      __typename\n      order\n      active\n    }\n    displayAdModule {\n      __typename\n      order\n      active\n    }\n    vompModule {\n      __typename\n      order\n      active\n    }\n    contactsModule {\n      __typename\n      order\n      active\n    }\n    legalInformationModule {\n      __typename\n      order\n      active\n    }\n    neffiModule {\n      __typename\n      order\n      active\n    }\n    noteModule {\n      __typename\n      order\n      active\n    }\n    accomplishmentsModule {\n      __typename\n      order\n      active\n    }\n    jobWishesPreferenceModule {\n      __typename\n      order\n      active\n    }\n    contentInsiderModule {\n      __typename\n      globalId\n      order\n      active\n    }\n    timelineModule {\n      __typename\n      order\n      globalId\n      active\n    }\n    personalDetailsModule {\n      __typename\n      order\n      active\n    }\n    statsModule {\n      __typename\n      order\n      active\n    }\n    skillsModule {\n      __typename\n      order\n      active\n    }\n    projobsUpsellBannerModule {\n      __typename\n      order\n      active\n    }\n    interestsModule {\n      __typename\n      order\n      active\n    }\n    languagesModule {\n      __typename\n      order\n      active\n    }\n    aboutMeModule {\n      __typename\n      order\n      active\n    }\n    commonalitiesModule {\n      __typename\n      order\n      active\n    }\n    hiringHighlightsModule {\n      __typename\n      order\n      active\n    }\n  }\n}\n\nfragment xingIdBaseData on XingId {\n  __typename\n  displayName\n  gender\n  firstName\n  hasDefaultHeaderImage\n  headerImage(options: $headerImageOptions) {\n    reference\n    url\n    __typename\n  }\n  id\n  isHiring\n  isUpsellRequiredForHeaderImage\n  lastName\n  location {\n    displayLocation\n    __typename\n  }\n  occupations {\n    category\n    links {\n      urn\n      url\n      __typename\n    }\n    summary\n    __typename\n  }\n  profileImage(size: [SQUARE_256, SQUARE_1024]) {\n    size\n    url\n    __typename\n  }\n  userFlags {\n    displayFlag\n    __typename\n  }\n}",
            //     variables: { "profileId": profileId, "headerImageOptions": [{ "height": 360, "reference": "handheld", "width": 739 }, { "height": 314, "reference": "tablet", "width": 644 }, { "height": 480, "reference": "desktop", "width": 984 }, { "height": 480, "reference": "nav", "width": 984 }] }
            // })

            const graphql = JSON.stringify({
                query: "query getProfile($profileId: SlugOrID!, $actionsFilter: [AvailableAction!], $headerImageOptions: [ImageOptions!]!) {\n  profileModules(id: $profileId, includeDeactivatedModules: true) {\n    aboutMeModule {\n      ...aboutMeModuleData\n      __typename\n    }\n    accomplishmentsModule {\n      ...accomplishmentsModuleData\n      __typename\n    }\n    commonalitiesModule {\n      ...commonalitiesModuleData\n      __typename\n    }\n    contactsModule {\n      ...contactsModuleData\n      __typename\n    }\n    contentInsiderModule {\n      ...contentInsiderModuleData\n      __typename\n    }\n    displayAdModule {\n      ...displayAdModuleData\n      __typename\n    }\n    hiringHighlightsModule {\n      ...hiringHighlightsModuleData\n      __typename\n    }\n    interestsModule {\n      ...interestsModuleData\n      __typename\n    }\n    jobWishesPreferenceModule {\n      ...jobWishesPreferenceModuleData\n      __typename\n    }\n    languagesModule {\n      ...languagesModuleData\n      __typename\n    }\n    legalInformationModule {\n      ...legalInformationModuleData\n      __typename\n    }\n    neffiModule {\n      ...neffiModuleData\n      __typename\n    }\n    noteModule {\n      ...noteModuleData\n      __typename\n    }\n    personalDetailsModule {\n      ...personalDetailsModuleData\n      __typename\n    }\n    projobsUpsellBannerModule {\n      ...projobsUpsellBannerModuleData\n      __typename\n    }\n    skillsModule {\n      ...skillsModuleData\n      __typename\n    }\n    statsModule {\n      ...statsModuleData\n      __typename\n    }\n    timelineModule {\n      ...timelineModuleData\n      __typename\n    }\n    vompModule {\n      ...vompModuleData\n      __typename\n    }\n    xingIdModule(actionsFilter: $actionsFilter) {\n      ...xingIdModuleData\n      __typename\n    }\n    __typename\n  }\n  profileTrackingVariables(id: $profileId) {\n    name\n    value\n    __typename\n  }\n  viewer {\n    ...viewerData\n    __typename\n  }\n  xingId(id: $profileId) {\n    ...xingIdBaseData\n    __typename\n  }\n}\n\nfragment accomplishment on Accomplishment {\n  __typename\n  globalId\n  value\n  subtype\n  year\n  url\n}\n\nfragment accomplishmentsModuleContentData on AccomplishmentsCollection {\n  __typename\n  collection {\n    ...accomplishment\n    __typename\n  }\n}\n\nfragment TopArticles on ContentArticle {\n  __typename\n  description\n  hasVideo\n  id\n  image {\n    __typename\n    srcSquare\n    srcSquare2x\n    srcWide\n    srcWide2x\n  }\n  isExternal\n  isFeatured\n  publishedAt\n  title\n  url\n}\n\nfragment languagesCollectionData on ProfileLanguage {\n  __typename\n  identifier\n  text\n  skillLevelId\n}\n\nfragment skillsModuleContentData on ProfileSkills {\n  id: globalId\n  globalId\n  collection {\n    value\n    isTop\n    category\n    __typename\n  }\n  __typename\n}\n\nfragment profileJobPreferencesDataState on JobPreferencesDataState {\n  __typename\n  careerLevel {\n    __typename\n    state\n  }\n  disciplines\n  idealEmployers\n  industries\n  jobTitles {\n    __typename\n    state\n  }\n  locations {\n    __typename\n    state\n  }\n  salaryExpectations\n  workingHours\n  workplaces\n}\n\nfragment profileJobPreferencesDataStateInfo on JobPreferencesDataStateInfo {\n  __typename\n  dataStates {\n    ...profileJobPreferencesDataState\n    __typename\n  }\n  filledPreferences\n  totalPreferences\n}\n\nfragment aboutMeModuleData on ProfileAboutMeModule {\n  __typename\n  active\n  content {\n    __typename\n    id\n    intro\n    globalId\n  }\n  order\n  title\n}\n\nfragment accomplishmentsModuleData on AccomplishmentsModule {\n  __typename\n  active\n  content {\n    ...accomplishmentsModuleContentData\n    __typename\n  }\n  globalId\n  id: globalId\n  order\n  title\n}\n\nfragment commonalitiesModuleData on CommonalitiesModule {\n  __typename\n  active\n  order\n}\n\nfragment contactsModuleData on ContactsModule {\n  __typename\n  active\n  order\n}\n\nfragment contentInsiderModuleData on ContentInsiderModule {\n  __typename\n  active\n  globalId\n  id\n  interactions {\n    __typename\n    isFollowed\n  }\n  metadata {\n    __typename\n    followersCount\n    publishedArticlesCount\n  }\n  order\n  pageId: id\n  tagline\n  topArticles {\n    __typename\n    collection {\n      __typename\n      ...TopArticles\n    }\n  }\n  userId\n}\n\nfragment displayAdModuleData on DisplayAdModule {\n  __typename\n  active\n  order\n}\n\nfragment hiringHighlightsModuleData on HiringHighlightsModule {\n  __typename\n  active\n  order\n}\n\nfragment interestsModuleData on ProfileInterestsModule {\n  __typename\n  active\n  content {\n    globalId\n    interests\n    __typename\n  }\n  order\n  title\n}\n\nfragment jobWishesPreferenceModuleData on JobWishesPreferenceModule {\n  __typename\n  active\n  data {\n    __typename\n    seekingStatus\n  }\n  order\n  title\n}\n\nfragment languagesModuleData on ProfileLanguagesModule {\n  __typename\n  active\n  content {\n    __typename\n    collection {\n      ...languagesCollectionData\n      __typename\n    }\n  }\n  order\n  title\n}\n\nfragment legalInformationModuleData on LegalInformationModule {\n  __typename\n  active\n  content\n  order\n  title\n}\n\nfragment neffiModuleData on NeffiModule {\n  __typename\n  active\n  neffiWdt {\n    __typename\n    description\n    fields {\n      __typename\n      checked\n      deeplink\n      description\n      module\n      name\n      outdated\n      text\n    }\n    quality\n    score\n    shouldCelebrate\n    title\n  }\n  order\n}\n\nfragment noteModuleData on NoteModule {\n  __typename\n  active\n  globalId\n  id: globalId\n  note {\n    content\n    __typename\n  }\n  order\n}\n\nfragment personalDetailsModuleData on PersonalDetailsModule {\n  __typename\n  order\n  active\n}\n\nfragment projobsUpsellBannerModuleData on ProjobsUpsellBannerModule {\n  __typename\n  active\n  order\n}\n\nfragment skillsModuleData on ProfileSkillsModule {\n  active\n  content {\n    ...skillsModuleContentData\n    __typename\n  }\n  lastModified\n  order\n  outdated\n  title\n  __typename\n}\n\nfragment statsModuleData on ProfileStatsModule {\n  __typename\n  order\n  active\n}\n\nfragment timelineModuleData on ProfileTimelineModule {\n  __typename\n  order\n  active\n  globalId\n}\n\nfragment vompModuleData on VOMPModule {\n  __typename\n  order\n  active\n}\n\nfragment xingIdModuleData on XingIdModule {\n  __typename\n  globalId\n  id: globalId\n  actions {\n    __typename\n    label\n  }\n  active\n  order\n  xingId {\n    __typename\n    displayName\n    gender\n    globalId\n    hasDefaultHeaderImage\n    headerImage(options: $headerImageOptions) {\n      __typename\n      reference\n      url\n    }\n    id\n    isHiring\n    isUpsellRequiredForHeaderImage\n    location {\n      __typename\n      displayLocation\n    }\n    occupations {\n      __typename\n      category\n      headline\n      links {\n        __typename\n        url\n        urn\n      }\n      subline\n      summary\n    }\n    profileImage(size: [SQUARE_128, SQUARE_256, SQUARE_1024]) {\n      __typename\n      size\n      url\n    }\n    status {\n      __typename\n      localizationValue\n    }\n    userFlags {\n      __typename\n      displayFlag\n    }\n  }\n}\n\nfragment viewerData on Viewer {\n  id\n  contactsNetwork {\n    __typename\n    total\n  }\n  jobPreferencesDataStateInfo {\n    ...profileJobPreferencesDataStateInfo\n    __typename\n  }\n  tracy {\n    willingnessToChangeJobs {\n      probability\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment xingIdBaseData on XingId {\n  __typename\n  displayName\n  firstName\n  globalId\n  id\n  lastName\n}\n",
                variables: {"actionsFilter":["ADD_CONTACT","DELETE_CONTACT","DECLINE_CONTACT_REQUEST","ADD_LEAD","BLOCK_USER","CONFIRM_CONTACT","EDIT_XING_ID","FOLLOW","INVITE_GROUP","OPEN_INSIDER_COLLECTION","OPEN_SETTINGS","OPEN_LO_PREVIEW","OPEN_RECRUITER_PREVIEW","OPEN_XTM","PRINT","REMOVE_LEAD","REPORT_PROFILE","SEND_MESSAGE","SHARE","SHOW_CONTACT_DETAILS","UNFOLLOW"],"headerImageOptions":[{"height":360,"reference":"handheld","width":739},{"height":314,"reference":"tablet","width":644},{"height":480,"reference":"desktop","width":984},{"height":480,"reference":"nav","width":984}],"profileId":profileId}
            })
            const requestOptions = {
                method: "POST",
                headers: myHeaders,
                body: graphql,
                redirect: "follow"
            };

            fetch("https://www.xing.com/xing-one/api", requestOptions)
                .then((response) => response.text())
                .then((result) => {
                    var profileData = JSON.parse(result);
                    educationData = profileData?.data?.profileModules?.accomplishmentsModule?.content?.collection;
                    profileData = profileData?.data?.profileModules?.xingIdModule?.xingId;

                    //Image
                    var profilePic = profileData?.profileImage[0].url;
                    if (profilePic && profilePic != '' && profilePic != "/assets/images/company_placeholder.jpg") {
                        profile.image = { "value": profilePic, "type": "image" };
                    }

                    //Name
                    var name = profileData?.displayName;
                    setSplitName(name);

                    //Locality
                    var location = profileData.location.displayLocation?.trim().replace(/\*+/g, '');
                    if (location?.length && !location?.includes('undefined')) {
                        profile.location = { "value": !location.includes('undefined') ? location : '', "type": "input" };
                    }

                    //Xing Profile
                    profileXing = "https://www.xing.com/profile/"+ profileId + '/cv';

                    listOfEducation = convertXingEducation(educationData);

                    // Get skills of the profile
                    getProfileSkillsFromXingTalentManager(cookieData, profileData?.id, true);

                })
                .catch((error) => {
                    console.error(error)
                    finishParsing(true);
                });
        }
        else if (currentUrlObj.toString().indexOf("xing.com/pages/") > -1) { // Company page

            //Company Name
            var cname = fromTopJQcontext(".header-Header-title-c5d8b2b9").text();
            cname = cname == "" ? fromTopJQcontext(".header .header-logo-wrapper .header-name .organization-name").not('.first-bar').text() : cname;
            profile.cname = { "value": cname, "type": "input" };

            //Company Website
            var website = fromTopJQcontext(".locations-Location-websiteLink-e29143d7 .locations-Location-webContacts-da392021").attr('href');
            profile.website = { "value": website, "type": "input" };

            //Company Address
            var clocation = fromTopJQcontext(".locations-Location-address-aa54f5ed").text();
            profile.clocation = { "value": clocation.trim(), "type": "input" };

            //About Company
            var cAboutCompany = fromTopJQcontext(".AboutUs-AboutUs-text-a20b8ced").text();
            profile.aboutcompany = { "value": cAboutCompany || '', "type": "input" }

            // Company Image [currently not accessible]
            // let image = window.top.document.querySelector('[data-cy="LOGO_IMAGE"]')?.src;
            // if (image.indexOf('/nobody_m') == -1) {
            //     profile.cimage = { "value": image, "type": "image" };
            // }

            finishParsing(true);
            $("#company_link").click();
        }
        else if (currentUrlObj.toString().indexOf("xing.com/xtm/profiles/") > -1) { // Candidate TM page
            var xingTMInterval = setInterval(() => {
                clearInterval(xingTMInterval);
                var slugPosition = 3;
                parseXingTalentManagerProfile(slugPosition);
            }, 250);
        } else if (currentUrlObj.toString().indexOf("xing.com/xtm/search/profiles/") > -1) { // Search Candidate TM page
            var xingTMSearchInterval = setInterval(() => {
                clearInterval(xingTMSearchInterval);
                var slugPosition = 4;
                parseXingTalentManagerProfile(slugPosition);
            }, 250);
        } else if (currentUrlObj.toString().indexOf("xing.com/xtm/projects/") > -1) { // Candidate under Project TM page
            var xingTMSearchInterval = setInterval(() => {
                clearInterval(xingTMSearchInterval);
                var slugPosition = 5;
                parseXingTalentManagerProfile(slugPosition);
            }, 250);
        }
        else {
            finishParsing(true);
        }
    }
    function isXingProfilePage() {
        return (currentUrlObj.toString().indexOf("xing.com/profile/") > -1 || currentUrlObj.toString().indexOf("xing.com/pages/") > -1
            || currentUrlObj.toString().indexOf("xing.com/xtm/") > -1);
    };
    //-----------------------------------------------XingParsingSectionEnd--------------------------------------------//

    //-----------------------------------------------ZoominfoParsingSectionStart--------------------------------------------//
    function parseZoomInfo() {
        var i = document.createElement('iframe');
        i.style.display = 'none';
        document.body.appendChild(i);
        i.src = "404";
        i.src = currentUrlObj;

        if (currentUrlObj.toString().indexOf("app.zoominfo.com/#/apps/profile/person") > -1) { // Contact

            i.onload = function () {
                var zoomInterval_1 = setInterval(() => {
                    //Stopping parsing
                    clearInterval(zoomInterval_1);

                    var profileDataFromLocalStorage = JSON.parse(localStorage.getItem('zi-RecentlyViewed-people'));
                    var profileData = profileDataFromLocalStorage[0].basic;

                    //Name
                    var name = profileData.firstName + ' ' + profileData.lastName;
                    setSplitName(name);

                    //Position
                    var position = profileData.title;
                    profile.position = { "value": !position?.includes('undefined') ? position : '', "type": "input" };

                    //Email
                    let email = "";
                    if (profileData.email != "-" && profileData.email != "g***@***.com") {
                        email = profileData.email;
                    } else if (profileData.personalEmail != "-" && profileData.personalEmail != "g***@***.com") {
                        email = profileData.personalEmail;
                    }
                    if (email?.length && !email?.includes('undefined')) {
                        profile.email = { "value": email ? email?.replace('-', "") : "", "type": "input" };
                    }

                    //Phone
                    let phone = "";
                    if (profileData.mobilePhone != "-") {
                        phone = profileData.mobilePhone;
                    } else if (profileData.phone != "-") {
                        phone = profileData.phone;
                    } else if (profileData.company.phone != "-") {
                        phone = profileData.company.phone;
                    }
                    if (phone?.length && !phone?.includes('undefined')) {
                        profile.phone = { "value": phone ? phone?.replace('-', "") : "", "type": "input" };
                    }

                    //Locality
                    var location = profileData.address?.city + ', ' + profileData.address?.state;
                    if (location?.length && !location?.includes('undefined')) {
                        profile.location = { "value": !location.includes('undefined') ? location : '', "type": "input" };
                    }

                    //Address
                    var address = profileData.displayAddress;
                    if (address?.length && !address?.includes('undefined')) {
                        profile.address = { "value": address, "type": "input" };
                    }

                    //Image
                    var profilePic = profileData.image;
                    if (profilePic && profilePic != '' && profilePic != "/assets/images/company_placeholder.jpg"
                        && profilePic != "https://app.zoominfo.com/assets/images/contact_placeholder.png") {
                        profile.image = { "value": profilePic, "type": "image" };
                    }

                    //Organization
                    var organisation = profileData.company?.name;
                    profile.organisation = { "value": !organisation?.includes('undefined') ? organisation : '', "type": "input" };

                    //Company Name
                    var cname = profileData.company?.name;;
                    profile.cname = { "value": !cname?.includes('undefined') ? cname : '', "type": "input" };

                    //Company Website
                    var website = profileData.company.domain;
                    profile.website = { "value": website?.replace(/\/\/+/, ' '), "type": "input" };

                    //Company Location
                    var clocation = profileData.company.address?.Street + ' ' + profileData.company.address?.City + ' '
                        + profileData.company.address?.State + ' ' + profileData.company.address?.CountryCode;
                    profile.clocation = { "value": !clocation?.includes('undefined') ? clocation : '', "type": "input" };

                    //Company Image
                    var cbgImage = 'https://res.cloudinary.com/zoominfo-com/image/upload/w_80,h_55,c_fit/' + profileData.company.domain?.replace('www.', '');
                    if (cbgImage && cbgImage != '' && cbgImage != "/assets/images/company_placeholder.jpg"
                        && cbgImage != "https://app.zoominfo.com/assets/images/company_placeholder.png") {
                        profile.cimage = { "value": cbgImage, "type": "image" };
                    }

                    // instead of calling finishParsing(true), we are calling checkDuplicate. Inside checkDuplicate, we called finishParsing()
                    finishParsing(true);

                    //Activating Contact Tab
                    $("#contact_link").click();

                }, 250);
            }
        }
        else if (currentUrlObj.toString().indexOf("app.zoominfo.com/#/apps/profile/company") > -1) { // Company page
            i.onload = function () {
                var zoomInterval_1 = setInterval(() => {
                    //Stopping parsing
                    clearInterval(zoomInterval_1);

                    var profileDataFromLocalStorage = JSON.parse(localStorage.getItem('zi-RecentlyViewed-companies'));
                    var profileData = profileDataFromLocalStorage[0].basic;

                    //Company Name
                    var cname = profileData.name;;
                    profile.cname = { "value": !cname.includes('undefined') ? cname : '', "type": "input" };

                    //Company Website
                    var website = profileData.domain;
                    profile.website = { "value": !website.includes('undefined') ? website : '', "type": "input" };

                    //Company Location
                    var clocation = profileData.address?.Street + ' ' + profileData.address?.City + ' '
                        + profileData.address?.State + ' ' + profileData.address?.CountryCode;
                    profile.clocation = { "value": !clocation.includes('undefined') ? clocation : '', "type": "input" };

                    //Company Image
                    var cbgImage = 'https://res.cloudinary.com/zoominfo-com/image/upload/w_80,h_55,c_fit/' + profileData.domain?.replace('www.', '');
                    if (cbgImage && cbgImage != '' && cbgImage != "/assets/images/company_placeholder.jpg"
                        && cbgImage != "https://app.zoominfo.com/assets/images/company_placeholder.png") {
                        profile.cimage = { "value": cbgImage, "type": "image" };
                    }

                    finishParsing(true);
                    //Activating Company Tab
                    $("#company_link").click();

                }, 250);
            }
        }
        else {
            finishParsing(true);
        }
    }

    function parseZoomTalentOS(){
        var i = document.createElement('iframe');
        i.style.display = 'none';
        document.body.appendChild(i);
        i.src = "404";
        i.src = currentUrlObj;

        var userAgent = navigator.userAgent;
        var platform = navigator.userAgentData.platform;

        if (currentUrlObj.toString().indexOf("recruiter-app.zoominfo.com/candidates/") > -1 ||
            currentUrlObj.toString().indexOf("recruiter-app.zoominfo.com/candidates") > -1) { 

            i.onload = function () {
                var zoomTalentOSInterval = setInterval(() => {
                    //Stopping parsing
                    clearInterval(zoomTalentOSInterval);

                    var candidateId = "";
                   
                    // Below code is for handling the case where user performs the search
                    let url = currentUrlObj.href;
                    if (url?.includes("searchQuery")) {
                        // Create a URL object
                        let urlObject = new URL(url);
                        let profileShelfId = urlObject?.searchParams?.get("profileShelfId");
                        let profileShelfMode = urlObject?.searchParams?.get("profileShelfMode");
                        if (profileShelfId && profileShelfMode === "candidate") {
                            candidateId = profileShelfId;
                        }
                    } else {
                        candidateId = currentUrlObj.pathname?.split('/')[2];
                    }

                    var myHeaders = new Headers();

                    var ziaccesstoken = getCookie("ziaccesstoken");
                    var ziid = getCookie("ziid");
                    var zisession = getCookie("zisession");
                    var userId = getCookie("userId");

                    ziid = ziid?.replace("%22", "");
                    zisession = zisession?.replace("%22", "");

                    myHeaders.append("sec-ch-ua", "\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\"");
                    myHeaders.append("x-ziaccesstoken", ziaccesstoken);
                    myHeaders.append("ziid", ziid);
                    myHeaders.append("user", userId);
                    myHeaders.append("application", "RecruiterUI");
                    myHeaders.append("session-token", "1");
                    myHeaders.append("x-ziid", ziid);
                    myHeaders.append("sec-ch-ua-platform", platform);
                    myHeaders.append("ziaccesstoken", ziaccesstoken);
                    myHeaders.append("sec-ch-ua-mobile", "?0");
                    myHeaders.append("x-zisession", zisession);
                    myHeaders.append("zisession", zisession);
                    myHeaders.append("User-Agent", userAgent);
                    myHeaders.append("x-sourceid", "Web");
                    myHeaders.append("Accept", "application/json, text/plain, */*");
                    myHeaders.append("Referer", "https://recruiter-app.zoominfo.com/");
                    myHeaders.append("Cookie", "__cf_bm=1RtBuT9Q1RvyUxP7bgW8IfCVEwdbyvb8.GOTqmQEEGg-1684260940-0-AYzbbL/b9KcwdeUmBWuXmv+KeHaJLvVpjCGafTxM+5WQ6kkW9K+RiO4c0z/2K1T0nJNGQ7tQtKdWi6aKmMnUbkg=; _cfuvid=vhw4XjpI2z4K_9FJ0BJTVgHDo6Jb4ZKvWzz.MZyejB4-1684258500723-0-604800000");

                    var requestOptions = {
                    method: 'GET',
                    headers: myHeaders,
                    redirect: 'follow'
                    };

                    let Base_URL = "https://recruiter-app.zoominfo.com/ziapi/recruiter-api/candidate/detail/";
                    let completeURL = Base_URL + candidateId + '?version=v2';

                    fetch(completeURL, requestOptions)
                    .then(response => response.text())
                    .then(result => {
                        var profileData = JSON.parse(result).data;

                        // First Name
                        profile.fname = {
                            "value": profileData?.firstName,
                            "type": "input"
                        };

                        // Last Name
                        profile.lname = {
                            "value": profileData?.lastName,
                            "type": "input"
                        };

                        //Position
                        let position = ''; 
                        if (profileData != undefined && profileData?.jobTitle){
                            // Fetching the first title
                            // var experirenceData = profileData?.employmentHistory[0];
                            // position = experirenceData[Object.keys(experirenceData)[0]][0].title;
                            position = profileData.jobTitle;
                        }
                        profile.position = { "value": !position?.includes('undefined') ? position : '', "type": "input" };

                        //Email
                        let email = "";
                        if (profileData?.email) {
                            email = profileData.email;
                        }
                        if (email?.length && !email?.includes('undefined')) {
                            profile.email = { "value": email ? email?.replace('-', "") : "", "type": "input" };
                        }

                        // //Phone
                        let phone = "";
                        if (profileData?.mobile) {
                            phone = profileData.mobile;
                        }
                        if (phone?.length && !phone?.includes('undefined')) {
                            profile.phone = { "value": phone ? phone?.replace('-', "") : "", "type": "input" };
                        }

                        //Locality
                        var location = profileData?.state;
                        if (location?.length && !location?.includes('undefined')) {
                            profile.location = { "value": !location.includes('undefined') ? location : '', "type": "input" };
                        }

                        //Address
                        var address = profileData?.street ;
                        if (address?.length && !address?.includes('undefined')) {
                            profile.address = { "value": address, "type": "input" };
                        }

                        // Image - [Not accessible]
                        // var profilePic = profileData?.picture;
                        // profile.image = { "value": profilePic, "type": "image" };
                        // if (profilePic && profilePic != '' && profilePic != "/assets/images/company_placeholder.jpg") {
                        //     profile.image = { "value": profilePic, "type": "image" };
                        // }

                        // //Organization
                        var organisation = profileData?.companyName;
                        profile.organisation = { "value": !organisation?.includes('undefined') ? organisation : '', "type": "input" };

                        // Company Name
                        profile.cname = { "value": !organisation?.includes('undefined') ? organisation : '', "type": "input" };

                        //Company Image - Currently we can't fetch company image . 
                        // var cbgImage = profileData?.companyWebsite;
                        // profile.cimage = { "value": cbgImage, "type": "image" };

                        finishParsing(true);
                        // activating candidate form 
                        $("#candidate_link").click();
                        
                    }).catch(error => {
                        console.log('error', error)
                        finishParsing(true);
                    });
                }, 250);
            }
        }
        else if (currentUrlObj.toString().indexOf("recruiter-app.zoominfo.com/company/") > -1) {

            i.onload = function () {
                var zoomTalentOSInterval = setInterval(() => {
                    //Stopping parsing
                    clearInterval(zoomTalentOSInterval);

                    var myHeaders = new Headers();

                    var ziaccesstoken = getCookie("ziaccesstoken");
                    var ziid = getCookie("ziid");
                    var zisession = getCookie("zisession");
                    var userId = getCookie("userId");

                    myHeaders.append("sec-ch-ua", "\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\"");
                    myHeaders.append("x-ziaccesstoken", ziaccesstoken);
                    myHeaders.append("ziid", ziid);
                    myHeaders.append("user", userId);
                    myHeaders.append("application", "RecruiterUI");
                    myHeaders.append("session-token", "1");
                    myHeaders.append("x-ziid", ziid);
                    myHeaders.append("sec-ch-ua-platform", platform);
                    myHeaders.append("ziaccesstoken", ziaccesstoken);
                    myHeaders.append("sec-ch-ua-mobile", "?0");
                    myHeaders.append("x-zisession", zisession);
                    myHeaders.append("zisession", zisession);
                    myHeaders.append("User-Agent", userAgent);
                    myHeaders.append("x-sourceid", "Web");
                    myHeaders.append("Accept", "application/json, text/plain, */*");
                    myHeaders.append("Referer", "https://recruiter-app.zoominfo.com/");
                    myHeaders.append("Cookie", "__cf_bm=lCmvNjucs7QRZZryF7p4S3lFJwubAHRBBunf.3vSUeU-1684402628-0-ASf/oMymrFJtnwl9+zjk6wwYI2K7poJcMPWr8Z4Z5T8GTVwy7ZxO2ileueaddapMwXJEQzKDdmEG7mplG/mlH5k=; _cfuvid=wG7kJiQJsQKgwWyDgQNMUmxv8hhh5xAiSC4XmjjjMqg-1684402628489-0-604800000");

                    var requestOptions = {
                        method: 'GET',
                        headers: myHeaders,
                        redirect: 'follow'
                    };

                    let Base_URL = "https://recruiter-app.zoominfo.com/ziapi/recruiter-api/company/detail/";
                    let companyId = currentUrlObj.pathname.split('/')[2];
                    let completeURL = Base_URL + companyId + '?source=company-detail-component';

                    fetch(completeURL, requestOptions)
                    .then(response => response.text())
                    .then(result => {
                        var profileData = JSON.parse(result).data;

                        //Company Name
                        var cname = profileData?.name;
                        profile.cname = { "value": cname, "type": "input" };

                        //Company Website
                        var website = profileData?.website;
                        profile.website = { "value": website, "type": "input" };

                        //Company Address
                        var clocation = profileData?.street + ', ' + profileData?.state;
                        profile.clocation = { "value": clocation.trim(), "type": "input" };

                        //About Company
                        var cAboutCompany = profileData?.description;
                        profile.aboutcompany = { "value": cAboutCompany || '', "type": "input" }

                        // Company Image [currently not accessible]
                        

                        finishParsing(true);
                        $("#company_link").click();

                    }).catch(error => {
                        console.log('error', error)
                        finishParsing(true);
                    });
                }, 250);
            }
        }
        else {
            finishParsing(true);
        }
    }


    function getCookie(cookieName) {
        var cookies = document.cookie.split(';');
        
        for (var i = 0; i < cookies.length; i++) {
          var cookie = cookies[i].trim();
          
            // Check if the cookie starts with the desired name
            if (cookie.startsWith(cookieName + '=')) {
                // Extract and return the cookie value
                return cookie.substring(cookieName.length + 1);
            }
        }
        
        // Cookie not found
        return null;
    }


    function parseZoom() {
        var i = document.createElement('iframe');
        i.style.display = 'none';
        document.body.appendChild(i);
        i.src = "404";
        i.src = currentUrlObj;

        if (currentUrlObj.toString().indexOf("go.zoominfo.com/#/apps/search/person/results?personProfileId") > -1) { // Contact
            i.onload = function () {
                var zoomInterval_1 = setInterval(() => {
                    if ($('.profile-container', i.contentWindow.document).length) {
                        clearInterval(zoomInterval_1);
                        var name = $('.person-row-container .person-name', i.contentWindow.document).text();
                        setSplitName(name);
                        var position = $('.person-row-container .person-title', i.contentWindow.document).text();
                        profile.position = { "value": position, "type": "input" };
                        var organisation = $('.person-row-container .company-name-link', i.contentWindow.document).text();
                        profile.organisation = { "value": organisation, "type": "input" };
                        var zoomInterval_2_count = 0;
                        var zoomInterval_2 = setInterval(() => {
                            var email = $(".contact-details-content .email-section .business-email a.email-link", i.contentWindow.document);
                            if (email.length || zoomInterval_2_count >= 5) {
                                clearInterval(zoomInterval_2);
                                if (email.length) {
                                    email = $(".contact-details-content .email-section .business-email a.email-link", i.contentWindow.document).attr('href');
                                    profile.email = { "value": email ? email.replace('mailTo:', "") : "", "type": "input" };
                                }
                                var _phone = $(".contact-details-content .contact-details-grid .phone-section", i.contentWindow.document);
                                if (_phone.length) {
                                    var phone = $("a", _phone.children()[1]).attr('href');
                                    profile.phone = { "value": phone ? phone.replace('tel:', "") : "", "type": "input" };
                                }
                                var location = $('#primaryLocation .location-content', i.contentWindow.document);
                                if (location.length) {
                                    profile.location = { "value": location[0].textContent.replace(/\s\s+/g, ' '), "type": "input" };
                                }
                                // var linkedin = $('.contactProfile .contact-details i.linkedin_icon', i.contentWindow.document);
                                // if (linkedin.length) {
                                //     linkedin = $(linkedin[0]).parent('a');
                                //     if (linkedin.length) {
                                //         linkedin = $(linkedin[0]).attr('href');
                                //     }
                                // }
                                // profile.linkedin = { "value": linkedin, "type": "input" };
                                if ($('#Company-Overview-0', i.contentWindow.document).length) {
                                    $('#Company-Overview-0', i.contentWindow.document).click();
                                    var company_zoomInterval_1 = setInterval(() => {
                                        if ($('.profile-container', i.contentWindow.document).length) {
                                            clearInterval(company_zoomInterval_1);
                                            var cname = $('.profile-container .company-name .primary-name', i.contentWindow.document).text();
                                            profile.cname = { "value": cname, "type": "input" };
                                            var website = $(".profile-container #company-domain a", i.contentWindow.document).attr('href');
                                            profile.website = { "value": website.replace(/\/\/+/, ' '), "type": "input" };
                                            var company_zoomInterval_2_count = 0;
                                            var company_zoomInterval_2 = setInterval(() => {
                                                var clocation = $(".profile-container #company-hq-address", i.contentWindow.document).text();
                                                if ((clocation && clocation.trim()) || company_zoomInterval_2_count >= 4) {
                                                    clearInterval(company_zoomInterval_2);
                                                    var cbgImage = $(".profile-container .company-logo img", i.contentWindow.document).attr('src');
                                                    if (cbgImage != '' && cbgImage != "/assets/images/company_placeholder.jpg") {
                                                        profile.cimage = { "value": cbgImage, "type": "image" };
                                                    }
                                                    profile.clocation = { "value": clocation.replace(/\s\s+/g, ' '), "type": "input" };
                                                    i.parentNode.removeChild(i);
                                                    finishParsing(true);
                                                    $("#company_link").click();
                                                }
                                                company_zoomInterval_2_count++;
                                            }, 150);
                                        }
                                    }, 250);
                                } else {
                                    i.parentNode.removeChild(i);
                                    finishParsing(true);
                                    $("#contact_link").click();
                                }
                            }
                            zoomInterval_2_count++;
                        }, 500);
                    }
                }, 250);
            }
        }
        else if (currentUrlObj.toString().indexOf("go.zoominfo.com/#/apps/search/company/results?companyProfileId") > -1) { // Company page
            i.onload = function () {
                var zoomInterval_1 = setInterval(() => {
                    if ($('.profile-container', i.contentWindow.document).length) {
                        clearInterval(zoomInterval_1);
                        var cname = $('.profile-container .company-name .primary-name', i.contentWindow.document).text();
                        profile.cname = { "value": cname, "type": "input" };
                        var website = $(".profile-container #company-domain a", i.contentWindow.document).attr('href');
                        profile.website = { "value": website.replace(/\/\/+/, ' '), "type": "input" };
                        var zoomInterval_2_count = 0;
                        var zoomInterval_2 = setInterval(() => {
                            var clocation = $(".profile-container #company-hq-address", i.contentWindow.document).text();
                            if ((clocation && clocation.trim()) || zoomInterval_2_count >= 4) {
                                clearInterval(zoomInterval_2);
                                var cbgImage = $(".profile-container .company-logo img", i.contentWindow.document).attr('src');
                                if (cbgImage != '' && cbgImage != "/assets/images/company_placeholder.jpg") {
                                    profile.cimage = { "value": cbgImage, "type": "image" };
                                }
                                profile.clocation = { "value": clocation.replace(/\s\s+/g, ' '), "type": "input" };
                                i.parentNode.removeChild(i);
                                finishParsing(true);
                                $("#company_link").click();
                            }
                            zoomInterval_2_count++;
                        }, 150);
                    }
                }, 250);
            }
        }
        else {
            finishParsing(true);
        }
    }

    function isZoomInfoProfilePage() {
        return (currentUrlObj.toString().indexOf("app.zoominfo.com/#/apps/profile/person") > -1 ||
            currentUrlObj.toString().indexOf("app.zoominfo.com/#/apps/profile/company") > -1 || 
            currentUrlObj.toString().indexOf("recruiter-app.zoominfo.com/candidates/") > -1 || 
            currentUrlObj.toString().indexOf("recruiter-app.zoominfo.com/candidates") > -1 || 
            currentUrlObj.toString().indexOf("recruiter-app.zoominfo.com/company/") > -1 );
    };

    function isZoomProfilePage() {
        return (currentUrlObj.toString().indexOf("go.zoominfo.com/#/apps/search/person/results?personProfileId=") > -1 ||
            currentUrlObj.toString().indexOf("go.zoominfo.com/#/apps/search/company/results?companyProfileId=") > -1);
    };
    //-----------------------------------------------ZoominfoParsingSectionEnd--------------------------------------------//

    //-----------------------------------------------IndeeParsingSectionStart--------------------------------------------//
    function isIndeedProfilePage() {
        return (currentUrlObj.toString().indexOf("employers.indeed.com/candidates/view") > -1)
    };
    function parseIndeed() {
        var topDocFrameCounter = 0;
        var indeedCheks = { phone: false, email: false };
        var topDocFrameInterval = setInterval(() => {
            topDocFrameCounter++;
            
            if (fromTopJQcontext("#candidateProfileContainer").length) {
                clearInterval(topDocFrameInterval);
                var name = window.top.document.querySelector('[data-testid=namePlate-candidateName]')?.innerHTML;
                setSplitName(name);
                var position = window.top.document.querySelector('[data-testid=namePlate-leftPanel-lastJobTitle]')?.innerHTML;
                profile.position = { "value": position, "type": "input" };
                var location = window.top.document.querySelector('[data-testid=namePlate-leftPanel-location]')?.innerHTML;
                profile.location = { "value": location, "type": "input" };

                if (window.top.document.querySelector('[data-testid=resume-phone-button]')){
                    window.top.document.querySelector('[data-testid=resume-phone-button]')?.click();
                    var phoneContainer = window.top.document.querySelector('[data-testid=resume-phone-button]');
                    var phone = phoneContainer.querySelector('span')?.innerText;
                    indeedCheks.phone = true;
                    profile.phone = { "value": phone, "type": "input" };
                }
                else{
                    indeedCheks.phone = true;
                }
                var email = window.top.document.querySelector('#namePlate-candidate-email')?.innerHTML;
                profile.email = { "value": email, "type": "input" };
                
                if (window.top.document.querySelector('[data-testid=ResumePanel_loaded]')){
                    var emailIntercalCount = 0;
                    var indedemailInterval = setInterval(() => {
                        emailIntercalCount++;
                        if (fromTopJQcontext(".rdp-resume-container").length) {
                            clearInterval(indedemailInterval);
                            var resumeText = fromTopJQcontext(".rdp-resume-container").text();
                            if (resumeText) {
                                var emailPattern = /[\p{L}\p{N}_\*,\+.-]+@[\p{L}\p{N}-]+\.[\p{L}]{2,}(\.[\p{L}]{2,})?/u;
                                var email = emailPattern.exec(resumeText);
                                if (email && email[0]) {
                                    // profile.email = { "value": email[0], "type": "input" };
                                }
                                profile.fullResumeText = { "value": resumeText, "type": "longText" };
                            }
                            indeedCheks.email = true;
                        } else {
                            if (emailIntercalCount > 20) {
                                clearInterval(indedemailInterval);
                                indeedCheks.email = true;
                            }
                        }
                    }, 100);
                } else {
                    indeedCheks.email = true;
                }

                if (profile.phone == undefined){
                    window.top.document.querySelector('[data-testid=qr-call-button]')?.click();
                    var phnIntercalCount = 0;
                    var indedPhnInterval = setInterval(() => {
                        phnIntercalCount++;
                        if (window.top.document.querySelector('[data-testid=qr-code-contactnumber]') != null) {
                            clearInterval(indedPhnInterval);
                            indeedCheks.phone = true;
                            var phone = window.top.document.querySelector('.css-h2fk57.e37uo190')?.innerHTML;
                            profile.phone = { "value": phone, "type": "input" };
                        } else {
                            if (phnIntercalCount > 20) {
                                clearInterval(indedPhnInterval);
                                indeedCheks.phone = true;
                            }
                        }
                    }, 1000);
                } 
                var indeedCheckInterval = setInterval(() => {
                    for (var check in indeedCheks) {
                        if (!indeedCheks[check]) {
                            return;
                        }
                    }
                    clearInterval(indeedCheckInterval);
                    finishParsing(true);
                }, 750);
            } else {
                if (topDocFrameCounter > 30) {
                    clearInterval(topDocFrameInterval);
                    finishParsing(true);
                }
            }
        }, 150);
    }
    //-----------------------------------------------IndeeParsingSectionEnd--------------------------------------------//

    //-----------------------------------------------GmailSectionEnd--------------------------------------------//

    function isGmailThreadPage() {
        return (currentUrlObj.toString().indexOf("https://mail.google.com/mail/u/0/" > -1))
    };
    function parseGmail() {
        var userEmail = fromTopJQcontext('head').attr('data-inboxsdk-user-email-address');
        var sender = fromTopJQcontext('.gE.iv.gt .gD');
        if (sender && sender.attr('email') != userEmail) {
            var name = sender.attr('name');
            setSplitName(name);
            var email = sender.attr('email');
            profile.email = { "value": email, "type": "input" };
            var image = fromTopJQcontext('#\\:1r_1-e').attr('src');
            if (image && image != '//ssl.gstatic.com/ui/v1/icons/mail/profile_mask2.png') {
                profile.image = { "value": image, "type": "image" };
            }
            finishParsing(true);
        } else {
        }
    }
    //-----------------------------------------------GmailSectionEnd--------------------------------------------//

    //-----------------------------------------------OutlookSectionEnd--------------------------------------------//

    function isOutlookThreadPage() {
        return (
            currentUrlObj.toString().indexOf("https://outlook.live.com/mail") > -1 ||
            currentUrlObj.toString().indexOf("https://outlook.office365.com/mail") > -1 ||
            currentUrlObj.toString().indexOf("https://outlook.office.com/mail") > -1 ||
            currentUrlObj.toString().indexOf("https://outlook.microsoft365.com/mail") > -1 ||
            currentUrlObj.toString().indexOf("https://outlook.microsoft.com/mail") > -1
        )
    };
    function parseOutlook() {
        var parsed = false;
        let name;
        let email;
        let image;
        var currentUrl = currentUrlObj.toString();
        if (currentUrl.indexOf("https://outlook.live.com/") > -1 ||
            currentUrl.indexOf("https://outlook.office365.com/") > -1 ||
            currentUrl.indexOf("https://outlook.office.com/") > -1 ||
            currentUrl.indexOf("https://outlook.microsoft365.com/") > -1 ||
            currentUrl.indexOf("https://outlook.microsoft.com/") > -1) {

            /*  Getting the element from the webpage and considering the latest user who has replay in the email */
            var emailUserElement = window.top.document.querySelectorAll("#ReadingPaneContainerId .aVla3")[0];
            let stringNameAndEmail = emailUserElement.querySelector('.OZZZK').innerText;

            /*  If the above id/class will depricate this can be used */
            if (!stringNameAndEmail) {
                stringNameAndEmail = window.top.document.querySelector('.Q84Kk .ookyc');
            }

            /*  
            *   We generally get the value of stringNameAndEmail in a single string
            *   example: 'Saurav Gupta <saurav@recruitcrm.io>'
            */
            if (!stringNameAndEmail.includes('<')) {
                name = stringNameAndEmail.trim();
            } else {
                name = stringNameAndEmail.substr(0, stringNameAndEmail.lastIndexOf('<')).trim();
                email = stringNameAndEmail.substring(stringNameAndEmail.lastIndexOf('<') + 1, stringNameAndEmail.lastIndexOf('>')).trim();
            }

            /*  Scraping the src of the image tag */
            // image = emailUserElement.querySelector(".ms-Persona-imageArea img")?.src;
        } else {
            
            var emailthreads = fromTopJQcontext('#ReadingPaneContainerId');
            if (emailthreads.length) {
                $(emailthreads).each(function () {
                    if (parsed) {
                        return false;
                    }
                    var currecntEmail = $(this).find('div.VHquDtYElxQkNvZKxCJct').text();

                    name = currecntEmail.substr(0, currecntEmail.lastIndexOf('<')).trim();
                    email = currecntEmail.substr(currecntEmail.lastIndexOf('<')).replace(">", "").replace("<", "").trim();
                    image = $('img.ms-Image-image--cover.ms-Image-image', $(this)).attr('src');

                    parsed = true;
                });
            }
        }
        if (email) {
            profile.email = {
                "value": email,
                "type": "input"
            };
        }
        if (name) {
            setSplitName(name);
        }
        if (image) {
            profile.image = {
                "value": image,
                "type": "image"
            };
        }
        finishParsing(true);
    }
    //-----------------------------------------------OutlookSectionEnd--------------------------------------------//

    //-----------------------------------------------NaukriParsingSectionStart--------------------------------------------//
    function parseNaukri() {
        var i = document.createElement('iframe');
        i.style.display = 'none';
        document.body.appendChild(i);
        i.src = "404";
        i.src = currentUrlObj;

        if (currentUrlObj.toString().indexOf("hiring.naukri.com/hiring/") > -1) { // Contact

            i.onload = function () {
                var naukriInterval_1 = setInterval(() => {
                    //Stopping parsing
                    clearInterval(naukriInterval_1);

                    var cookieData = Object.fromEntries(document.cookie.split('; ').map(v => v.split('=').map(decodeURIComponent)));
                    var myHeaders = new Headers();
                    myHeaders.append("cookie", JSON.stringify(cookieData).slice(1, -1));
                    myHeaders.append("Content-Type", "application/json");
                    myHeaders.append("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36 OPR/82.0.4227.43");
                    myHeaders.append("appid", "5");
                    myHeaders.append("systemid", "naukriIndia");

                    var requestOptions = {
                        method: 'GET',
                        headers: myHeaders,
                        redirect: 'follow'
                    };
                    let Base_URL = "https://hiring.naukri.com/cloudgateway-jobposting/jplite-rm-services/v0/rm/rmsproxy/v0/rms-profile-retrieval-services/v0/response-manager/applications/"
                    fetch(`${Base_URL}/${currentUrlObj.pathname.split('/')[4]}${currentUrlObj.search}`, requestOptions)
                        .then(response => response.text())
                        .then(result => {
                            var profileData = JSON.parse(result);
                            // console.log(profileData);

                            //Name
                            var name = profileData?.name;
                            setSplitName(name);

                            //Position
                            var position = ''; 
                            if (profileData != undefined && profileData?.workExp.length > 0){
                                position = profileData?.workExp[0]?.designation;
                            }
                            profile.position = { "value": !position?.includes('undefined') ? position : '', "type": "input" };

                            //Email
                            let email = "";
                            if (profileData.email[0]?.value != "-") {
                                email = profileData.email[0]?.value;
                            }
                            if (email?.length && !email?.includes('undefined')) {
                                profile.email = { "value": email ? email?.replace('-', "") : "", "type": "input" };
                            }

                            //Phone
                            let phone = "";
                            if (profileData.phoneNumber[0]?.value != "-") {
                                phone = profileData.phoneNumber[0]?.value;
                            }
                            if (phone?.length && !phone?.includes('undefined')) {
                                profile.phone = { "value": phone ? phone?.replace('-', "") : "", "type": "input" };
                            }

                            //Locality
                            var location = profileData?.currentCity;
                            if (location?.length && !location?.includes('undefined')) {
                                profile.location = { "value": !location.includes('undefined') ? location : '', "type": "input" };
                            }

                            //Address
                            var address = profileData.otherDetails?.address?.addressWithPin;
                            if (address?.length && !address?.includes('undefined')) {
                                profile.address = { "value": address, "type": "input" };
                            }
                            candidateAddress = address;
                            experianceInYear = profileData.experience?.years;
                            specialization = profileData.education[0]?.specialization;

                            //Image
                            // var profilePic = profileData.photo;
                            // // profile.image = { "value": profilePic, "type": "image" };
                            // if (profilePic && profilePic != '' && profilePic != "/assets/images/company_placeholder.jpg") {
                            //     profile.image = { "value": profilePic, "type": "image" };
                            // }

                            //Organization
                            var organisation = profileData.companyName;
                            profile.organisation = { "value": !organisation?.includes('undefined') ? organisation : '', "type": "input" };

                            //Skills
                            var skills = profileData.keySkills;
                            profile.skill = {
                                'value': skills,
                                'type': "tags"
                            }

                            //Company Name
                            var cname = profileData.companyName;;
                            profile.cname = { "value": !cname?.includes('undefined') ? cname : '', "type": "input" };

                            //Company Image
                            var cbgImage = '';
                            if (cbgImage && cbgImage != '' && cbgImage != "/assets/images/company_placeholder.jpg") {
                                profile.cimage = { "value": cbgImage, "type": "image" };
                            }
                            finishParsing(true);
                        })
                        .catch(error => console.log('error', error));
                }, 250);
            }
        }
        else {
            finishParsing(true);
        }
    }
    //-----------------------------------------------NaukriParsingSectionEnd--------------------------------------------//

    //-----------------------------------------------NaukriResdexParsingSectionEnd--------------------------------------------//
    function parseNaukriResdex() {
        var i = document.createElement('iframe');
        i.style.display = 'none';
        document.body.appendChild(i);
        i.src = "404";
        i.src = currentUrlObj;

        const url = new URL(currentUrlObj.toString());

        if (url.hostname === "resdex.naukri.com" && url.pathname.includes("/preview")) {
            i.onload = function () {

                var naukriResdexInterval_1 = setInterval(() => {
                    //Stopping parsing
                    clearInterval(naukriResdexInterval_1);

                    var cookieData = Object.fromEntries(document.cookie.split('; ').map(v => v.split('=').map(decodeURIComponent)));

                    const myHeaders = new Headers();
                    myHeaders.append("accept", "application/json");
                    myHeaders.append("accept-language", "en,es;q=0.9,en-GB;q=0.8,en-US;q=0.7,pt;q=0.6");
                    myHeaders.append("appid", "112");
                    myHeaders.append("cache-control", "no-cache");
                    myHeaders.append("content-type", "application/json");
                    myHeaders.append("origin", "https://resdex.naukri.com");
                    myHeaders.append("pragma", "no-cache");
                    myHeaders.append("priority", "u=1, i");
                    myHeaders.append("sec-ch-ua", "\"Chromium\";v=\"136\", \"Google Chrome\";v=\"136\", \"Not.A/Brand\";v=\"99\"");
                    myHeaders.append("sec-ch-ua-mobile", "?0");
                    myHeaders.append("sec-ch-ua-platform", "\"macOS\"");
                    myHeaders.append("sec-fetch-dest", "empty");
                    myHeaders.append("sec-fetch-mode", "cors");
                    myHeaders.append("sec-fetch-site", "same-origin");
                    myHeaders.append("systemid", "naukriIndia");
                    myHeaders.append("user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36");
                    myHeaders.append("cookie", JSON.stringify(cookieData).slice(1, -1));

                    const companyKey = Object.keys(localStorage).find(key => key.includes("talentCloudRollout"));
                    const companyId = companyKey ? companyKey?.split("_")[1] : null;

                    const recruiterKey = Object.keys(localStorage).find(key => key.includes("tcSubsStatus"));
                    const recruiterId = recruiterKey ? recruiterKey?.split("_")[1] : null;

                    // Get the URL (can be window.location.href if running in browser context)
                    const url = currentUrlObj.toString();
                    const params = new URL(url).searchParams;

                    const data = {
                        uniqId: params.get("uniqId"),
                        sid: params.get("sid"),
                        requirementId: params.get("requirementId"),
                        requirementGroupId: params.get("requirementGroupId"),
                        jsKey: null,
                        miscellaneousInfo: {
                            companyId: companyId,
                            rdxUserId: recruiterId,
                            ref: "",
                            cur: url
                        }
                    };

                    const requestOptions = {
                        method: "POST",
                        headers: myHeaders,
                        body: JSON.stringify(data, null, 2),
                        redirect: "follow"
                    };

                    let platform = "rdx";
                    if (url.includes("rdxLiteSrp")) {
                        platform = "rdxlite";
                    }

                    let Base_URL = `https://resdex.naukri.com/cloudgateway-resdex/recruiter-js-profile-services/v0/companies/${companyId}/recruiters/${recruiterId}/${platform}/jsprofile`;

                    fetch(Base_URL, requestOptions)
                        .then((response) => response.text())
                        .then(result => {
                            var profileData = JSON.parse(result);

                            //Name
                            var name = profileData?.name;
                            setSplitName(name);

                            //Position
                            var position = '';
                            if (profileData != undefined && profileData?.workExperiences.length > 0) {
                                position = profileData?.workExperiences[0]?.designation;
                            }
                            profile.position = { "value": !position?.includes('undefined') ? position : '', "type": "input" };

                            //Email
                            let email = "";
                            if (profileData.email) {
                                email = profileData.email;
                            }
                            if (email?.length && !email?.includes('undefined')) {
                                profile.email = { "value": email ? email?.replace('-', "") : "", "type": "input" };
                            }

                            //Phone
                            let phone = "";
                            if (profileData.mobile != "-") {
                                phone = profileData.mobile;
                            }
                            if (phone?.length && !phone?.includes('undefined')) {
                                profile.phone = { "value": phone ? phone?.replace('-', "") : "", "type": "input" };
                            }

                            //Locality
                            var location = profileData?.city;
                            if (location?.length && !location?.includes('undefined')) {
                                profile.location = { "value": !location.includes('undefined') ? location : '', "type": "input" };
                            }

                            //Address
                            var address = profileData.contactAddress;
                            if (address?.length && !address?.includes('undefined')) {
                                profile.address = { "value": address, "type": "input" };
                            }
                            candidateAddress = address;
                            experianceInYear = profileData.rawTotalExperience;

                            //Organization
                            var organisation = '';
                            if (profileData != undefined && profileData?.workExperiences.length > 0) {
                                organisation = profileData?.workExperiences[0]?.organization;
                            }
                            profile.organisation = { "value": !organisation?.includes('undefined') ? organisation : '', "type": "input" };

                            listOfExperience = convertWorkExperiences(profileData.workExperiences);
                            listOfEducation = convertEducationHistory(profileData.educations);

                            //Skills
                            var skills = profileData.keywords;
                            profile.skill = {
                                'value': skills,
                                'type': "tags"
                            }

                            //Company Name
                            var cname = profileData?.workExperiences[0]?.organization;
                            profile.cname = { "value": !cname?.includes('undefined') ? cname : '', "type": "input" };

                            //Company Image
                            var cbgImage = '';
                            if (cbgImage && cbgImage != '' && cbgImage != "/assets/images/company_placeholder.jpg") {
                                profile.cimage = { "value": cbgImage, "type": "image" };
                            }
                            finishParsing(true);
                        })
                        .catch(error => console.error(error));
                }, 250);
            }
        }
        else {
            finishParsing(true);
        }
    }

    function convertEducationHistory(educationArray) {
        if (!Array.isArray(educationArray) || educationArray.length === 0) {
            return []; // Return empty array if input is invalid
        }

        return educationArray.map(input => ({
            institute_name: input.entityInstitute?.label || input.institute?.label || "",
            educational_qualification: input.course?.label || "",
            educational_specialization: input.spec?.label || "",
            grade: "",
            education_location: "", 
            education_start_date: "",
            education_end_date: "",
            education_description: "",
            is_manually_added: 1
        }));
    }

    // Utility function for custom rounding logic
    function customRoundYears(totalMonths) {
        const totalYears = totalMonths / 12;
        const decimalPart = totalYears - Math.floor(totalYears);
        return decimalPart < 0.5 ? Math.floor(totalYears) : Math.ceil(totalYears);
    }

    function convertWorkExperiences(workExperiences) {
        if (!Array.isArray(workExperiences) || workExperiences.length === 0) {
            return []; // Return empty array if input is invalid
        }

        // Pre-calculate constants
        const MILLIS_TO_MONTHS = 1000 * 60 * 60 * 24 * 30.44; // Average days per month
        const MILLIS_TO_SECONDS = 1000;
        const currentTime = Date.now();
        
        let totalMonths = 0;

        const convertedExperiences = workExperiences.map(exp => {
            // Calculate experience duration for this job
            if (exp.startYearMillis) {
                const endTime = (exp.endDate === "till date" || !exp.endYearMillis) ? currentTime : exp.endYearMillis;
                totalMonths += Math.round((endTime - exp.startYearMillis) / MILLIS_TO_MONTHS);
            }

            // Pre-calculate common values
            const isTillDate = exp.endDate === "till date";
            const startTimestamp = exp.startYearMillis ? Math.floor(exp.startYearMillis / MILLIS_TO_SECONDS) : null;
            const endTimestamp = exp.endYearMillis ? Math.floor(exp.endYearMillis / MILLIS_TO_SECONDS) : null;

            return {
                title: exp.designation || "",
                work_company_name: exp.organization || "",
                employment_type: exp.expType === "F" ? 2 : 1,
                industry_id: 0,
                work_location: "",
                salary: "",
                is_currently_working: isTillDate ? "1" : "0",
                work_start_date: startTimestamp,
                work_end_date: endTimestamp,
                work_description: exp.profile || "",
                is_manually_added: 1
            };
        });

        // Use utility function for rounding
        experianceInYear = customRoundYears(totalMonths);

        return convertedExperiences;
    }

    function convertXingWorkExperiences(workExperiences) {
        if (!Array.isArray(workExperiences) || workExperiences.length === 0) {
            return []; // Return empty array if input is invalid
        }

        // Pre-calculate constants
        const MILLIS_TO_SECONDS = 1000;
        const MONTHS_PER_YEAR = 12;
        
        let totalMonths = 0;

        const convertedExperiences = workExperiences.map(exp => {
            // Calculate total experience during the loop
            if (exp.duration) {
                totalMonths += (exp.duration.years || 0) * MONTHS_PER_YEAR + (exp.duration.months || 0);
            }

            // Optimize date conversions - avoid repeated string concatenation
            const workStartDate = exp.beginDate ? Math.floor(new Date(exp.beginDate + '-01').getTime() / MILLIS_TO_SECONDS) : null;
            const workEndDate = exp.endDate ? Math.floor(new Date(exp.endDate + '-01').getTime() / MILLIS_TO_SECONDS) : null;
            
            // Pre-calculate boolean values
            const isCurrentCompany = exp?.currentCompany;

            return {
                title: exp.jobTitle || "",
                work_company_name: exp?.companyName || "",
                employment_type: isCurrentCompany ? 3 : 2,
                industry_id: exp?.company?.industry?.id || 0,
                work_location: exp?.company?.address?.city || "",
                salary: "",
                is_currently_working: isCurrentCompany ? "1" : "0",
                work_start_date: workStartDate,
                work_end_date: workEndDate,
                work_description: exp?.companyNotes || "",
                is_manually_added: 1
            };
        });

        // Use utility function for rounding
        experianceInYear = customRoundYears(totalMonths);

        return convertedExperiences;
    }

    function convertXingEducation(accomplishments) {
        if (!Array.isArray(accomplishments) || accomplishments.length === 0) {
            return []; // Return empty array if input is invalid
        }

        // Filter only qualification type accomplishments
        const qualifications = accomplishments.filter(acc => acc.subtype === "QUALIFICATION");

        return qualifications.map((acc, index) => ({
            institute_name: "", // Not available in XING accomplishments
            educational_qualification: acc?.value || "",
            educational_specialization: "", // Not available in XING accomplishments
            grade: "",
            education_location: "",
            education_start_date: "",
            education_end_date: acc?.year ? new Date(acc.year, 11, 31).getTime() / 1000 : "", // End of year as timestamp
            education_description: "",
            is_manually_added: 1
        }));
    }

    //-----------------------------------------------NaukriResdexParsingSectionEnd--------------------------------------------//


    //-----------------------------------------------ParsingSectionEnd----------------------------------------------------//

    //-----------------------------------------------EventListnersSectionStart----------------------------------------------//
    window.addEventListener('message', function (message) {
        switch (message.data.message) {
            case "getUserFinished":
                document.getElementById('workHistory').style.display = 'none';
                document.getElementById('educationHistory').style.display = 'none';
                candidateAddress = null;
                experianceInYear = null;
                specialization = null;
                userCallFinished = true;
                response = JSON.parse(message.data.response);
                extSettings = {}
                // Setting app base URL for entity detail redirection
                if (message.data?.appBaseURL) {
                    BASE_APP_URL = message.data.appBaseURL;
                }
                if (response.status == "success") {
                    user = response.user;
                    extSettings = getFromLocalStorage();
 
                    flagForShowOnExtension = response.data?.flagForShowOnExtension;
                    flagForWorkAndEducation = response.data?.flagForWorkEducation;
                    flagForCalendarInvite = response.data?.calendar_invite_toggle_for_meetings;
                    flagForGoogleMeet = response.data?.google_meet_integration;
                    flagForTeamMeet = response.data?.microsoft_teams_meet_integration;
                    flagForZoomMeet = response.data?.zoom_meet_integration;
                    flagForCandidateWorkingAtACompany = response.data?.flagForCandidateWorkingAtACompany;
                    flagForOffLimits = response.data?.flagForOffLimits;

                    flagForSearchableDropdown = response.data?.flagForSearchableDropdown;

                    noteTypeList = response.data?.noteTypes;
                    taskTypeList = response.data?.task_types;
                    meetingTypeList = response.data?.meeting_types;

                    flagForCompanyCustomSectionFields = response.data?.flagForCompanyCustomSectionFields ?? false;
                    flagForContactCustomSectionFields = response.data?.flagForContactCustomSectionFields ?? false;
                    enforceRequiredFieldsOnExtension = response.data?.enforceRequiredFieldsOnExtension;
                    flagForEnforceRequiredFieldsOnExtension = response.data?.flagForEnforceRequiredFieldsOnExtension;
                    flagForExtensionEnhancement = response.data?.flagForExtensionEnhancement;
                    flagForCompanyContacts = response.data?.flagForCompanyContacts;
                    flagForNestedCustomFields = response.data?.flagForNestedCustomFields;
                    flagForAddressFields = response.data?.flagForAddressFields;

                    if(flagForCompanyContacts){
                        selectedCompanyContacts = [];
                        createSelectedContacts();
                    }

                    entityTypeFieldColumnValues = {};
                    entitiesArray.forEach((entity) => {
                        entityTypeFieldsForEntities[entity] = {
                            'candidateType' : [],
                            'contactType' : [],
                            'companyType' : [],
                            'dealsType' : [],
                            'jobType' : [],
                            'userType' : [],
                            'teamType' : []
                        }
                    });                  


                    if(!flagForExtensionEnhancement){
                        document.getElementById('save_candidate_company_parent').style.display = 'none';
                    }

                    flagForNoteTypeOnExtension = response.data?.flagForNoteTypeOnExtension;

                    //auto populating default notetype
                    if(flagForNoteTypeOnExtension){
                        populateDefaultNoteType();
                    } else {
                        const candidateNoteElement = document.getElementById('candidate_note_notetype_followup');
                        if (candidateNoteElement) {
                            candidateNoteElement.style.display = 'none';
                        }

                        const contactNoteElement = document.getElementById('contact_note_notetype_followup');
                        if (contactNoteElement) {
                            contactNoteElement.style.display = 'none';
                        }

                        const companyNoteElement = document.getElementById('company_note_notetype_followup');
                        if (companyNoteElement) {
                            companyNoteElement.style.display = 'none';
                        }
                    }

                    populateDefaultTaskType();
                    populateDefaultMeetingType();
                    if (enforceRequiredFieldsOnExtension != null && enforceRequiredFieldsOnExtension != '' && enforceRequiredFieldsOnExtension != undefined){
                        // parse the JSON string
                        enforceRequiredFieldsOnExtension = JSON.parse(enforceRequiredFieldsOnExtension);
                    }  


                    if (isLinkedInProfilePage()){
                        isLinkedInPage = true;    
                    }
                    
                    if (!flagForWorkAndEducation){
                        document.getElementById('workHistory').style.display = 'none';
                        document.getElementById('educationHistory').style.display = 'none';
                    }
                    else if (isLinkedInPage && flagForWorkAndEducation){
                        document.getElementById('workHistory').style.display = 'block';
                        document.getElementById('educationHistory').style.display = 'block';
                    }
                    genderData = response.data?.gender;
                    currencyTypes = response.data?.currencies;

                    if (!flagForCalendarInvite && document.getElementById('NoCalInvites')){
                        document.getElementById('NoCalInvites').style.display = 'none';
                    }
                    conferenceData = response.data?.conferenceData;
                    initializeGmeet(flagForGoogleMeet, conferenceData, flagForTeamMeet, flagForZoomMeet);

                    if (flagForShowOnExtension == true){
                        // parse the candidate_form_section_fields data 
                        candidateSectionFieldsData = JSON.parse(response.data.candidate_form_section_fields);
                        
                        // change the display property of reorderSectionsHeader
                        document.getElementById('reorderSectionsHeader').style.display = 'block';

                        for (const section in candidateSectionFieldsData){
                            const sectionDataFields = candidateSectionFieldsData[section]['fields'];
                            for (const dataProperty of sectionDataFields){
                                if (dataProperty["show_on_extension"] == true && !defaultExtensionFields.includes(dataProperty["colname"])){
                                    fieldsVisibleOnExtension[dataProperty["colname"]] = '';
                                }
                            }
                        }

                        // Reorder Section 
                        let userSpecificOrdering = response.data.chrome_extension_order;
                        if (userSpecificOrdering != null && userSpecificOrdering != ''){
                            let parsedUserSpecificOrdering = JSON.parse(JSON.parse(userSpecificOrdering));
                            userSpecificOrdering = parsedUserSpecificOrdering;
                            defaultOrdering = [];

                            // Iterate over the parsed data
                            for (let i = 0; i < parsedUserSpecificOrdering.length; i++) {
                                // Extract the id and name properties
                                const id = parsedUserSpecificOrdering[i]["id"];
                                const name = parsedUserSpecificOrdering[i]["name"];

                                // Create a new object with the desired format
                                const formattedObject = { id: id, name: name };

                                // Push the formatted object into the formattedData array
                                defaultOrdering.push(formattedObject);
                            }
                        }

                        // Reorder Section On UI 
                        let reorderdSectionContainer = document.getElementById('reorderdSectionContainer');

                        if (userSpecificOrdering != '' && userSpecificOrdering != null){
                            for (let i = 0; i < userSpecificOrdering.length; i++){
                                // Extract the id and name properties
                                const id = userSpecificOrdering[i]["id"];
                                let sectionToBeAppended = null;
                                if (id == 1){
                                    sectionToBeAppended = document.getElementById('profileInformationSection');
                                }
                                else if (id == 2){
                                    sectionToBeAppended = document.getElementById('additionalDetailsSection');
                                }
                                else if (id == 3){
                                    sectionToBeAppended = document.getElementById('workHistory');
                                }
                                else if (id == 4){
                                    sectionToBeAppended = document.getElementById('educationHistory');
                                }
                                reorderdSectionContainer.appendChild(sectionToBeAppended);
                            }
                        }
                        

                        // code to render the admin settings reorder section
                        var myList = document.getElementById("reorderList");
                        myList.innerHTML = '';
                        for (var i = 0; i < defaultOrdering.length; i++) {
                            var li = document.createElement("li");

                            li.setAttribute("id", "item-" + defaultOrdering[i].id);
                            li.setAttribute("draggable", true);
                            li.setAttribute("style", 'border:1px solid black; height:40px; background-color: white; border-radius: 6px; ');
                            li.addEventListener("dragstart", dragStart);
                            li.addEventListener("dragover", dragOver);
                            li.addEventListener("dragend", dragEnd);

                            const hr1 = document.createElement('hr');
                            const hrContainer = document.createElement('div');
                            hr1.style.width = '20px';
                            hr1.style.height = '1px';
                            hr1.style.border = 'none';
                            hr1.style.borderTop = '3px solid #777';
                            // hr1.setAttribute('class', 'left');
                            hr1.style.margin = '2px';

                            const hr2 = hr1.cloneNode(true);
                            const hr3 = hr1.cloneNode(true);

                            hrContainer.appendChild(hr1);
                            hrContainer.appendChild(hr2);
                            hrContainer.appendChild(hr3);
                            hrContainer.setAttribute('class', 'leftLess');

                            const labelContainer = document.createElement('p');
                            labelContainer.innerHTML = defaultOrdering[i].name;
                            labelContainer.setAttribute('class', 'rightMore');
                            labelContainer.setAttribute('style', 'margin: -3px; ');
                            // li.innerHTML = defaultOrdering[i].name;
                            li.appendChild(hrContainer);
                            li.appendChild(labelContainer);
                            myList.appendChild(li);
                        }

                        // Define variables for drag and drop functionality
                        var dragItem = null;
                        var dragItemIndex = -1;

                        // Handle the start of the drag
                        function dragStart(event) {
                            dragItem = event.target;
                            dragItemIndex = Array.from(myList.children).indexOf(dragItem);
                        }

                        // Handle the element being dragged over another element
                        function dragOver(event) {
                            event.preventDefault();
                            var dropItem = event.target;
                            var dropItemIndex = Array.from(myList.children).indexOf(dropItem);
                            if (dragItemIndex < dropItemIndex) {
                                myList.insertBefore(dragItem, dropItem.nextSibling);
                            } else {
                                myList.insertBefore(dragItem, dropItem);
                            }
                        }

                        // Handle the end of the drag
                        function dragEnd(event) {
                        // Update the JSON object with the new order of defaultOrdering
                            var newDefaultOrdering = [];
                            var newOrder = Array.from(myList.children).map(function (li) {
                                var id = parseInt(li.id.replace("item-", ""));
                                var item = defaultOrdering.find(function (item) {
                                return item.id === id;
                                });
                                newDefaultOrdering.push(item);
                                return item;
                            });
                            defaultOrdering = newDefaultOrdering;
                            dragItem = null;
                            dragItemIndex = -1;

                            updateOrderingData(defaultOrdering);
                        }

                        // get the candidate columns 
                        candidateColumns = response.data.candidate_columns;

                        // get the contact columns 
                        contactColumns = response.data.contact_columns;
                        // get the contact columns 
                        companyColumns = response.data.company_columns;
                        // get the languages data
                        languageList = response.data.languages.map(obj => obj.langname);

                        if(flagForNestedCustomFields){
                            extractRootNodesAndChildrenForEntities();
                        }

                        //get flag for custom date feature
                        flagForStandardDateField = response.data.flagForStandardDateField;
                        flagForDefaultContactStage = response.data.flagForDefaultContactStage;                        flagForFileCustomField = response.data.flagForFileCustomField;

                        // code to dynamically Handle the fields on extension . Iterate through candidateColumns and add 
                        // HTML code dynamically based on the type. 
                        // let additionalDetailsParentTag = document.getElementById("additionalDetailsHeader");
                        let additionalDetailsParentTagEmpty = document.getElementById("additionalDetailsHeaderEmpty");
                        additionalDetailsParentTagEmpty.style.display = 'none';
                        document.getElementById('additionalDetailsHeader').style.display = 'block';

                        document.getElementById("additionalDetailsHeaderForContactEmpty").style.display = 'none';
                        document.getElementById('additionalDetailsHeaderForContact').style.display = 'block';
                        document.getElementById('additionalDetailsHeaderForCompany').style.display = 'block';
                        document.getElementById('additionalDetailsHeaderForCompanyEmpty').style.display = 'none';
                        document.getElementById('additionalDetailsHeaderForCompanyContact').style.display = 'block';

                        // making the inner HTML to none before populating the additional fields 
                        document.getElementById('languagebuttonContainer').innerHTML = '';

                        // Get the parent element
                        const parentElementOfLanguage = document.getElementById('dropdownContainer');
                        const parentElementOfLanguageNew = document.getElementById('dropdownContainerNew');

                        // Loop through all child elements
                        const elementsWithChild = document.querySelectorAll('#dropdownContainer:has(*)');

                        let parentElement;
                        // there is only one element in elementsWithChild
                        if (elementsWithChild && elementsWithChild.length >= 1){
                            parentElement = elementsWithChild[0];
                        }

                        // remove all the child elements 
                        if (parentElement && parentElement.firstChild){
                            while (parentElement.firstChild) {
                                parentElement.removeChild(parentElement.firstChild);
                            }
                        }

                        
                        document.getElementById('multiselectDataSection').innerHTML = '';
                        document.getElementById('dropDownDataSection').innerHTML = '';
                        document.getElementById('checkboxSection').innerHTML = '';
                        document.getElementById('dateSection').innerHTML = '';
                        document.getElementById('fileContainer').innerHTML = '';
                        document.getElementById('textFieldsContainer').innerHTML = '';
                        document.getElementById('longTextFieldsContainer').innerHTML = '';
                        document.getElementById('summaryFieldsContainer').innerHTML = '';
                        document.getElementById('dateTimeSection').innerHTML = '';

                        for (let candidateFieldKey in candidateColumns){
                            let candidateFieldObject = candidateColumns[candidateFieldKey];
                            let element = '';
                            let subTag = document.createElement("div");
                            let textFieldsContainer = document.getElementById('textFieldsContainer');
                            let canRenderField = canRenderCustomField(candidateEntityTypeId, candidateFieldObject['custom_field_id'], candidateFieldKey);

                            if (candidateFieldObject["show_on_extension"] && candidateFieldObject["show_on_extension"] == true && !defaultExtensionFields.includes(candidateFieldKey) && (!flagForNestedCustomFields || (flagForNestedCustomFields && canRenderField))){

                                // check the type of field. 
                                // language and proficiency 
                                if(candidateFieldKey == 'languageskills' && flagForSearchableDropdown){
                                    let languageAndProf = document.getElementById('languageAndProfSearchable');
                                    languageAndProf.style.display = 'block';

                                    let labelAndAddButton = document.createElement('div');
                                    labelAndAddButton.style.display = 'flex';

                                    // Heading
                                    let labelForLanguages = document.createElement('label');
                                    labelForLanguages.setAttribute('class', 'rcrm-headings-label left');
                                    labelForLanguages.innerHTML = 'Languages';

                                    // block for required fields validation
                                    labelForLanguages.id = candidateFieldKey + 'LabelId';
                                    let errorMessageForLanguages = document.createElement('p');
                                    errorMessageForLanguages.style.color = 'red';
                                    errorMessageForLanguages.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessageForLanguages.style.display = 'none';
                                    errorMessageForLanguages.innerHTML = '' + candidateFieldObject['label'] + ' field is required';
                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label 
                                        labelForLanguages.innerHTML = 'Languages <span style="color: red;">*</span>';
                                    }

                                    // Add Button
                                    let buttonToAddLanguage = '<a type="button" class="right" id="languageAddButton">Add</a>';
                                    let spanForButton = document.createElement('span');
                                    spanForButton.style.marginLeft = '165px';
                                    spanForButton.innerHTML = buttonToAddLanguage;

                                    // Change the cursor type on hover
                                    spanForButton.addEventListener("mouseover", () => {
                                        spanForButton.style.cursor = "pointer";
                                    });
                                    
                                    // Reset the cursor type when the mouse leaves the element
                                    spanForButton.addEventListener("mouseout", () => {
                                        spanForButton.style.cursor = "auto";
                                    });

                                    labelAndAddButton.appendChild(labelForLanguages);
                                    labelAndAddButton.appendChild(spanForButton);

                                    let languagebuttonContainer = document.getElementById('languagebuttonContainerNew');
                                    languagebuttonContainer.appendChild(labelAndAddButton);

                                    const parentLanguagebuttonContainerNew = document.getElementById('parentLanguagebuttonContainerNew');
                                    parentLanguagebuttonContainerNew.appendChild(errorMessageForLanguages);

                                    // add dropdown group when add button is clicked 
                                    document.getElementById('languageAddButton').onclick = addDropdownGroup;


                                    let dropdown1List = languageList;
                                    let dropdown2List = proficiencyList;

                                    
                                    function populateDropdowns(dropdownGroup) {


                                        const langAndProfAndButtonConatiner = document.createElement('div');
                                        langAndProfAndButtonConatiner.style.marginBottom = '10px';

                                        // LANGUAGE DROPDOWN 
                                        // block to show the button to view options 
                                        let containerToShowDropdownOption = document.createElement('div');
                                        containerToShowDropdownOption.id = candidateFieldKey + 'OuterContainerForOptions' + countOfLanguageProfieciency;
                                        containerToShowDropdownOption.style.width = 95 + '%';
                                        let buttonToShowDropdownOption = document.createElement('div');
                                        buttonToShowDropdownOption.id = candidateFieldKey + 'button' + countOfLanguageProfieciency;
                                        buttonToShowDropdownOption.innerHTML = dropdown1List[37];
                                        buttonToShowDropdownOption.style.color = 'black';
                                        containerToShowDropdownOption.appendChild(buttonToShowDropdownOption);


                                        // input component for search
                                        let searchInput = document.createElement('input');
                                        searchInput.setAttribute('type', 'text');
                                        searchInput.setAttribute('id', candidateFieldKey + 'search');
                                        searchInput.setAttribute('placeholder', 'Please Search & Select');
                                        searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                        searchInput.setAttribute('class', 'rcrm-ctrl');


                                        // block to show the option container
                                        let containerDropdownOption = document.createElement('div');
                                        containerDropdownOption.id = candidateFieldKey + 'OptionsOuterContainer' + countOfLanguageProfieciency;
                                        let dropdownOption = document.createElement('ul');
                                        dropdownOption.id = candidateFieldKey + 'options' + countOfLanguageProfieciency;
                                        dropdownOption.setAttribute('style', 'list-style: none;');
                                        containerDropdownOption.appendChild(searchInput);
                                        containerDropdownOption.appendChild(dropdownOption);


                                        // add Event Listener in the input element 
                                        searchInput.addEventListener('input', function(e){
                                            let searchValue = e.target.value.trim();
                                            let optionsList = dropdownOption;
                                            let matchesCount = 0;

                                            optionsList.innerHTML = '';
                                            for (let option of dropdown1List){
                                                if (option.toLowerCase().includes(searchValue.toLowerCase())){
                                                    const li = document.createElement('li');
                                                    li.textContent = option;
                                                    li.id = candidateFieldKey + dropdown1List.indexOf(option);
                                                    li.addEventListener('click', handleOptionClick);
                                                    li.style.cursor = 'pointer';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    // li.style.backgroundColor = '#E8E8E8';
                                                    li.style.border = '1px solid #F8FAFB';
                                                    optionsList.appendChild(li);
                                                    matchesCount++;


                                                    li.addEventListener('mouseover', function () {
                                                        li.style.backgroundColor = '#f5f5f5';
                                                    });


                                                    li.addEventListener('mouseout', function () {
                                                        li.style.backgroundColor = 'white';
                                                    });
                                                }
                                            }

                                            if (matchesCount == 0){
                                                const li = document.createElement('li');
                                                li.textContent = 'No Results Found';
                                                li.style.marginBottom = '5px';
                                                li.style.padding = '5px';
                                                li.style.color = 'black';
                                                li.style.backgroundColor = '#E8E8E8';
                                                li.style.border = '1px solid #F8FAFB';
                                                optionsList.appendChild(li);
                                            }

                                            if ( matchesCount < 5 ) {
                                                optionsList.style.height = 'auto';
                                                optionsList.style.overflowY = 'hidden';
                                            }

                                            else {
                                                optionsList.style.height = '200px';
                                                optionsList.style.overflowY = 'scroll';
                                            }

                                            matchesCount = 0;
                                        });


                                        // Add event listener for keydown event to prevent Enter key press
                                        searchInput.addEventListener('keydown', function(e) {
                                            if (e.key === 'Enter') {
                                                e.preventDefault();
                                            }
                                        });

                                        langAndProfAndButtonConatiner.appendChild(containerToShowDropdownOption);
                                        langAndProfAndButtonConatiner.appendChild(containerDropdownOption);

                                        // Get options list and selected list elements
                                        const optionsList = dropdownOption;
                                        const toggleButton = buttonToShowDropdownOption;


                                        // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                        if (dropdown1List.length > 5){
                                            optionsList.style.height = '200px';
                                            optionsList.style.overflowY = 'scroll';
                                        }


                                        // Set CSS properties dynamically on the Dropdown button
                                        toggleButton.style.cursor = 'pointer';
                                        toggleButton.style.padding = '3px';
                                        toggleButton.style.border = '1px solid #E8E8E8';
                                        toggleButton.style.height = '30px';
                                        toggleButton.style.marginBottom = '5px';
                                        toggleButton.style.borderRadius = '5px';
                                        toggleButton.style.paddingLeft = '5px';

                                        // Set CSS properties dynamically on the Dropdown Options Container
                                        containerDropdownOption.style.display = 'none';
                                        containerDropdownOption.style.border = '1px solid #E8E8E8';
                                        containerDropdownOption.style.padding = '10px';
                                        containerDropdownOption.style.marginBottom = '5px';
                                        containerDropdownOption.style.borderRadius = '5px';


                                        // Set toggle button click event
                                        toggleButton.addEventListener('click', function() {
                                            toggleOptionsContainer(this);
                                        });

                                        // toggleButton.addEventListener('click', toggleOptionsContainer);

                                        // Toggle options container visibility
                                        function toggleOptionsContainer(e) {
                                            let idOfButton = e.id.charAt(e.id.length - 1);
                                            document.getElementById(candidateFieldKey + 'OptionsOuterContainer' + idOfButton).style.display = document.getElementById(candidateFieldKey + 'OptionsOuterContainer' + idOfButton).style.display === 'none' ? 'block' : 'none';
                                        }

                                        // dropdown data
                                        const data = dropdown1List;

                                        // Generate options dynamically
                                        data.forEach((option, index) => {
                                            const li = document.createElement('li');
                                            li.textContent = option;
                                            li.id = candidateFieldKey + index;
                                            li.addEventListener('click', handleOptionClick);

                                            // Attach CSS properties dynamically
                                            li.style.cursor = 'pointer';
                                            li.style.marginBottom = '5px';
                                            li.style.padding = '5px';
                                            li.style.color = 'black';
                                            // li.style.backgroundColor = '#E8E8E8';

                                            li.addEventListener('mouseover', function () {
                                                li.style.backgroundColor = '#f5f5f5';
                                            });

                                            li.addEventListener('mouseout', function () {
                                                li.style.backgroundColor = 'white';
                                            });

                                            optionsList.appendChild(li);
                                        });





                                        // PROFICIENCY DROPDOWN
                                        // block to show the button to view options 
                                        let containerToShowDropdownOption2 = document.createElement('div');
                                        containerToShowDropdownOption2.id = candidateFieldKey + 'OuterContainerForOptionsProficiency' + countOfLanguageProfieciency;
                                        containerToShowDropdownOption2.style.width = 95 + '%';
                                        let buttonToShowDropdownOption2 = document.createElement('div');
                                        buttonToShowDropdownOption2.id = candidateFieldKey + 'buttonProficiency' + countOfLanguageProfieciency;
                                        buttonToShowDropdownOption2.innerHTML = dropdown2List[5];
                                        buttonToShowDropdownOption2.style.color = 'black';
                                        containerToShowDropdownOption2.appendChild(buttonToShowDropdownOption2);


                                        // input component for search
                                        searchInput = document.createElement('input');
                                        searchInput.setAttribute('type', 'text');
                                        searchInput.setAttribute('id', candidateFieldKey + 'search');
                                        searchInput.setAttribute('placeholder', 'Please Search & Select');
                                        searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                        searchInput.setAttribute('class', 'rcrm-ctrl');


                                        // block to show the option container
                                        let containerDropdownOption2 = document.createElement('div');
                                        containerDropdownOption2.id = candidateFieldKey + 'OptionsOuterContainerProficiency' + countOfLanguageProfieciency;
                                        let dropdownOption2 = document.createElement('ul');
                                        dropdownOption2.id = candidateFieldKey + 'options' + countOfLanguageProfieciency;
                                        dropdownOption2.setAttribute('style', 'list-style: none;');
                                        containerDropdownOption2.appendChild(searchInput);
                                        containerDropdownOption2.appendChild(dropdownOption2);


                                        // add Event Listener in the input element 
                                        searchInput.addEventListener('input', function(e){
                                            let searchValue = e.target.value.trim();
                                            let optionsList = dropdownOption2;
                                            let matchesCount = 0;

                                            optionsList.innerHTML = '';
                                            for (let option of dropdown2List){
                                                if (option.toLowerCase().includes(searchValue.toLowerCase())){
                                                    const li = document.createElement('li');
                                                    li.textContent = option;
                                                    li.id = candidateFieldKey + dropdown2List.indexOf(option);
                                                    li.addEventListener('click', handleOptionClick);
                                                    li.style.cursor = 'pointer';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    // li.style.backgroundColor = '#E8E8E8';
                                                    li.style.border = '1px solid #F8FAFB';
                                                    optionsList.appendChild(li);
                                                    matchesCount += 1;


                                                    li.addEventListener('mouseover', function () {
                                                        li.style.backgroundColor = '#f5f5f5';
                                                    });


                                                    li.addEventListener('mouseout', function () {
                                                        li.style.backgroundColor = 'white';
                                                    });
                                                }
                                            }

                                            if (matchesCount == 0){
                                                const li = document.createElement('li');
                                                li.textContent = 'No Results Found';
                                                li.style.marginBottom = '5px';
                                                li.style.padding = '5px';
                                                li.style.color = 'black';
                                                li.style.backgroundColor = '#E8E8E8';
                                                li.style.border = '1px solid #F8FAFB';
                                                optionsList.appendChild(li);
                                            }

                                            if ( matchesCount < 5 ) {
                                                optionsList.style.height = 'auto';
                                                optionsList.style.overflowY = 'hidden';
                                            }

                                            else {
                                                optionsList.style.height = '200px';
                                                optionsList.style.overflowY = 'scroll';
                                            }

                                            matchesCount = 0;
                                        });


                                        // Add event listener for keydown event to prevent Enter key press
                                        searchInput.addEventListener('keydown', function(e) {
                                            if (e.key === 'Enter') {
                                                e.preventDefault();
                                            }
                                        });

                                        langAndProfAndButtonConatiner.appendChild(containerToShowDropdownOption2);
                                        langAndProfAndButtonConatiner.appendChild(containerDropdownOption2);

                                        // Get options list and selected list elements
                                        const optionsList2 = dropdownOption2;
                                        const toggleButton2 = buttonToShowDropdownOption2;


                                        // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                        if (dropdown2List.length > 5){
                                            optionsList2.style.height = '200px';
                                            optionsList2.style.overflowY = 'scroll';
                                        }


                                        // Set CSS properties dynamically on the Dropdown button
                                        toggleButton2.style.cursor = 'pointer';
                                        toggleButton2.style.padding = '3px';
                                        toggleButton2.style.border = '1px solid #E8E8E8';
                                        toggleButton2.style.height = '30px';
                                        toggleButton2.style.marginBottom = '5px';
                                        toggleButton2.style.borderRadius = '5px';
                                        toggleButton2.style.paddingLeft = '5px';

                                        // Set CSS properties dynamically on the Dropdown Options Container
                                        containerDropdownOption2.style.display = 'none';
                                        containerDropdownOption2.style.border = '1px solid #E8E8E8';
                                        containerDropdownOption2.style.padding = '10px';
                                        containerDropdownOption2.style.marginBottom = '5px';
                                        containerDropdownOption2.style.borderRadius = '5px';


                                        // Set toggle button click event
                                        toggleButton2.addEventListener('click', function(){
                                            toggleOptionsContainer2(this);
                                        });

                                        // Toggle options container visibility
                                        function toggleOptionsContainer2(e) {
                                            let idOfElement = e.id.charAt(e.id.length - 1);
                                            document.getElementById(candidateFieldKey + 'OptionsOuterContainerProficiency' + idOfElement ).style.display = document.getElementById(candidateFieldKey + 'OptionsOuterContainerProficiency' + idOfElement).style.display === 'none' ? 'block' : 'none';
                                        }

                                        // dropdown data
                                        const data2 = dropdown2List;

                                        // Generate options dynamically
                                        data2.forEach((option, index) => {
                                            const li = document.createElement('li');
                                            li.textContent = option;
                                            li.id = candidateFieldKey + index;
                                            li.addEventListener('click', handleOptionClick);

                                            // Attach CSS properties dynamically
                                            li.style.cursor = 'pointer';
                                            li.style.marginBottom = '5px';
                                            li.style.padding = '5px';
                                            li.style.color = 'black';
                                            // li.style.backgroundColor = '#E8E8E8';

                                            li.addEventListener('mouseover', function () {
                                                li.style.backgroundColor = '#f5f5f5';
                                            });

                                            li.addEventListener('mouseout', function () {
                                                li.style.backgroundColor = 'white';
                                            });

                                            optionsList2.appendChild(li);
                                        });


                                        function handleOptionClick(e) {
                                            const selectedOption = e.target.textContent;
                                            const selectedId = e.target.parentElement.id.charAt(e.target.parentElement.id.length - 1);

                                            if(dropdown2List.includes(selectedOption)){
                                                document.getElementById(candidateFieldKey + 'buttonProficiency' + selectedId).textContent = selectedOption;
                                                document.getElementById(candidateFieldKey + 'OptionsOuterContainerProficiency' + selectedId).style.display = 'none';
                                                selectedValues['Group ' + selectedId]['value2'] = selectedOption;
                                            }
                                            else {
                                                document.getElementById(candidateFieldKey + 'button' + selectedId).textContent = selectedOption;
                                                document.getElementById(candidateFieldKey + 'OptionsOuterContainer' + selectedId).style.display = 'none';
                                                selectedValues['Group ' + selectedId]['value1'] = selectedOption;
                                            }
                                        }


                                        const firstRemoveButton = document.createElement('button'); // Add remove button
                                        firstRemoveButton.textContent = 'Remove';
                                        firstRemoveButton.id = candidateFieldKey + 'removeButton' + countOfLanguageProfieciency;
                                        firstRemoveButton.style.width = '95%';
                                        firstRemoveButton.style.border = '1px solid #E8E8E8';
                                        firstRemoveButton.style.height = '20px';

                                        // Remove button event listener
                                        firstRemoveButton.onclick = function() {
                                            removeDropdownGroup(this);
                                        };


                                        langAndProfAndButtonConatiner.appendChild(firstRemoveButton);

                                        dropdownGroup.appendChild(langAndProfAndButtonConatiner);

                                        // update the selected values
                                        selectedValues['Group ' + countOfLanguageProfieciency] = {
                                            value1: dropdown1List[37],
                                            value2: dropdown2List[5]
                                        }

                                        // increment the count of language proficiency
                                        countOfLanguageProfieciency += 1;
                                    }


                                    function addDropdownGroup() {
                                        // set the error message display to none
                                        document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';
                                        populateDropdowns(parentElementOfLanguageNew);
                                    }


                                    function removeDropdownGroup(button) {
                                        const dropdownGroup = button.parentElement;
                                        const idOfButton = button.id.charAt(button.id.length - 1);
                                        const dropdownContainer = dropdownGroup.parentElement;
                                        dropdownContainer.removeChild(dropdownGroup);
                                        delete selectedValues['Group ' + idOfButton];
                                    }


                                    populateDropdowns(parentElementOfLanguageNew);
                                }

                                else if (candidateFieldKey == 'languageskills'){
                                    let languageAndProf = document.getElementById('languageAndProf');
                                    languageAndProf.style.display = 'block';

                                    // <label class="rcrm-headings-label left">Languages</label>
                                    let labelForLanguages = document.createElement('label');
                                    labelForLanguages.setAttribute('class', 'rcrm-headings-label left');
                                    // labelForLanguages.setAttribute('class', 'left');
                                    labelForLanguages.innerHTML = 'Languages';
                                    
                                    // block for required fields validation
                                    labelForLanguages.id = candidateFieldKey + 'LabelId';
                                    let errorMessageForLanguages = document.createElement('p');
                                    errorMessageForLanguages.style.color = 'red';
                                    errorMessageForLanguages.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessageForLanguages.style.display = 'none';
                                    errorMessageForLanguages.innerHTML = '' + candidateFieldObject['label'] + ' field is required';
                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label 
                                        labelForLanguages.innerHTML = 'Languages <span style="color: red;">*</span>';
                                    }
                                    
                                    subTag.setAttribute("id", "dropdownContainer");
                                    let languagebuttonContainer = document.getElementById('languagebuttonContainer');
                                    let buttonToAddLanguage = '<a type="button" class="right" id="languageAddButton">Add</a>';

                                    let spanForButton = document.createElement('span');
                                    spanForButton.innerHTML = buttonToAddLanguage;

                                    // Change the cursor type on hover
                                    spanForButton.addEventListener("mouseover", () => {
                                        spanForButton.style.cursor = "pointer";
                                    });
                                    
                                    // Reset the cursor type when the mouse leaves the element
                                    spanForButton.addEventListener("mouseout", () => {
                                        spanForButton.style.cursor = "auto";
                                    });

                                    languagebuttonContainer.appendChild(labelForLanguages);
                                    languagebuttonContainer.appendChild(spanForButton);
                                    const parentLanguagebuttonContainer = document.getElementById('parentLanguagebuttonContainer');
                                    parentLanguagebuttonContainer.appendChild(errorMessageForLanguages);
                                    document.getElementById('languageAddButton').onclick = addDropdownGroup;

                                    const firstRemoveButton = document.createElement('button'); // Add remove button
                                    firstRemoveButton.textContent = 'Remove';
                                    firstRemoveButton.id = 'firstRemoveButton';
                                    firstRemoveButton.style.width = '95%';
                                    firstRemoveButton.style.border = '1px solid #E8E8E8';
                                    firstRemoveButton.style.height = '20px';

                                    firstRemoveButton.onclick = function() {
                                        removeDropdownGroup(this);
                                    };

                                    document.getElementsByClassName('dropdownGroup')[0]?.appendChild(firstRemoveButton);

                                    let dropdown1List = languageList;
                                    let dropdown2List = proficiencyList;

                                    // Define lists for dropdown values

                                    function captureValue(dropdownIndex) {
                                        const dropdownGroup = document.getElementsByClassName('dropdownGroup')[dropdownIndex];
                                        const dropdown1 = dropdownGroup.getElementsByClassName('myDropdown1')[0];
                                        const dropdown2 = dropdownGroup.getElementsByClassName('myDropdown2')[0];
                                        const selectedValue1 = dropdown1.value;
                                        const selectedValue2 = dropdown2.value;
                                        const dropdownGroupName = 'Group ' + (dropdownIndex + 1);
                                        selectedValues[dropdownGroupName] = {
                                            value1: selectedValue1,
                                            value2: selectedValue2
                                        };
                                    }
                                    
                                    function populateDropdowns(dropdownGroup) {
                                        let dropdown1, dropdown2;

                                        // if we have the the select element then we can directly use it to populate data
                                        if (dropdownGroup.getElementsByClassName('myDropdown1')[0] && dropdownGroup.getElementsByClassName('myDropdown2')[0]){
                                            dropdown1 = dropdownGroup.getElementsByClassName('myDropdown1')[0];
                                            dropdown2 = dropdownGroup.getElementsByClassName('myDropdown2')[0];
                                            // Clear existing options
                                            dropdown1.innerHTML = '';
                                            dropdown2.innerHTML = '';
                                        }
                                        // we need to create the element first before populating the data
                                        else {
                                            dropdown1 = document.createElement('select');
                                            dropdown2 = document.createElement('select');

                                            dropdown1.setAttribute('class', 'myDropdown1 rcrm-native-select');
                                            dropdown1.setAttribute('style', 'margin-top: 5px;margin-bottom: 5px; width: 95%; border: 1px solid #E8E8E8; border-radius: 5px;');
                                            dropdown2.setAttribute('class', 'myDropdown2 rcrm-native-select');
                                            dropdown2.setAttribute('style', 'width:95%; border: 1px solid #E8E8E8; border-radius: 5px;');

                                            dropdownGroup.appendChild(dropdown1);
                                            dropdownGroup.appendChild(dropdown2);
                                            dropdownGroup.appendChild(firstRemoveButton);
                                        }

                                        // Populate options with values from respective lists
                                        dropdown1List.forEach(value => {
                                            const option = document.createElement('option');
                                            option.value = value;
                                            option.textContent = value;
                                            dropdown1.appendChild(option);
                                        });
                                        dropdown2List.forEach(value => {
                                            const option = document.createElement('option');
                                            option.value = value;
                                            option.textContent = value;
                                            dropdown2.appendChild(option);
                                        });
                                        // Add change event listeners to capture selected values
                                        dropdown1.addEventListener('change', function() {
                                            captureValue(Array.from(dropdownGroup.parentElement.children).indexOf(dropdownGroup));
                                        });
                                        dropdown2.addEventListener('change', function() {
                                            captureValue(Array.from(dropdownGroup.parentElement.children).indexOf(dropdownGroup));
                                        });
                                        // Capture initial values
                                        captureValue(Array.from(dropdownGroup.parentElement.children).indexOf(dropdownGroup));
                                    }
                                    
                                    function addDropdownGroup() {
                                        // set the error message display to none
                                        document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';

                                        const dropdownContainer = document.getElementById('dropdownContainer');
                                        const newDropdownGroup = document.createElement('div');
                                        newDropdownGroup.className = 'dropdownGroup';
                                    
                                        const dropdown1 = document.createElement('select');
                                        dropdown1.className = 'myDropdown1';
                                        // dropdown1.setAttribute('class', 'rcrm-native-select');
                                        dropdown1.setAttribute('style', 'margin-top: 5px;margin-bottom: 5px; width: 95%;height: 31px !important; border:1px solid #E8E8E8; ');
                                        newDropdownGroup.appendChild(dropdown1);
                                    
                                        const dropdown2 = document.createElement('select');
                                        dropdown2.className = 'myDropdown2';
                                        // dropdown2.setAttribute('class', 'rcrm-native-select');
                                        dropdown2.setAttribute('style', 'width: 95%;height: 31px !important; border:1px solid #E8E8E8;');
                                        newDropdownGroup.appendChild(dropdown2);
                                    
                                        const removeButton = document.createElement('button'); // Add remove button
                                        removeButton.textContent = 'Remove';
                                        removeButton.style.width = '95%';
                                        removeButton.style.height = '20px';
                                        removeButton.style.border = '1px solid #E8E8E8';
                                        removeButton.id = 'firstRemoveButton';

                                        removeButton.onclick = function() {
                                            removeDropdownGroup(this);
                                        };
                                        newDropdownGroup.appendChild(removeButton); // Append remove button to dropdown group

                                        dropdownContainer.appendChild(newDropdownGroup);
                                        populateDropdowns(newDropdownGroup);
                                    }
                                    
                                    function removeDropdownGroup(button) {
                                        const dropdownGroup = button.parentElement;
                                        const dropdownContainer = dropdownGroup.parentElement;
                                        let index = Array.from(dropdownContainer.children).indexOf(dropdownGroup);
                                        index = index + 1;
                                        dropdownContainer.removeChild(dropdownGroup);
                                        

                                        // Remove captured values for the removed dropdown group
                                        const dropdownGroupName = 'Group ' + index;
                                        delete selectedValues[dropdownGroupName]; // Update to use "data" object instead of "selectedValues"

                                        const remainingDropdownGroups = Array.from(dropdownContainer.children); 
                                        for (var i = index+1; i <= remainingDropdownGroups.length + 1; i++){
                                            if (selectedValues.hasOwnProperty('Group '+i)){
                                                selectedValues['Group '+ (i-1)] = selectedValues['Group '+i];
                                                delete selectedValues['Group '+i];
                                            }
                                        }
                                    }

                                    // Call populateDropdowns function to initially populate the dropdowns on page load
                                    if (document.getElementsByClassName('dropdownGroup')[0]){
                                        populateDropdowns(document.getElementsByClassName('dropdownGroup')[0]);
                                    }
                                    else {
                                        // case when we have removed all languages dropdown and moved to another profile                                        
                                        let dynamicDropdownGroup = document.createElement('div');
                                        dynamicDropdownGroup.setAttribute('class', 'dropdownGroup');
                                        dynamicDropdownGroup.style.paddingBottom = '5px';

                                        parentElementOfLanguage.appendChild(dynamicDropdownGroup);
                                        populateDropdowns(dynamicDropdownGroup);
                                    }
                                    
                                    languageAndProf.appendChild(subTag);

                                }

                                // candidate summary
                                else if (candidateFieldKey == 'summary'){

                                    textFieldsContainer = document.getElementById('summaryFieldsContainer');

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.style.display = 'inline-block';
                                    labelContainer.innerHTML = candidateFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = candidateFieldKey + 'LabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    // Create an icon element
                                    let icon = document.createElement('i');
                                    icon.className = 'mdi mdi-information-outline';
                                    icon.style.marginLeft = '5px';
                                    icon.style.display = 'inline-block'; // Set the icon to inline-block
                                    icon.style.verticalAlign = 'middle'; // Align the icon vertically with the label

                                    // Create a tooltip span element
                                    let tooltip = document.createElement('span');
                                    tooltip.className = 'tooltip';
                                    tooltip.innerHTML = 'Summary cannot be fetched from the existing candidate profile as the extension does not support rich-text fields.'; // Replace with your tooltip text
                                    tooltip.style.display = 'none'; // Initially hide the tooltip
                                    tooltip.style.border = '1px #DDDDDD solid';
                                    tooltip.style.padding = '5px';
                                    tooltip.style.width = '95%';
                                    tooltip.style.borderRadius = '5px';

                                    // Add an event listener to show the tooltip on label hover
                                    icon.addEventListener('mouseover', function() {
                                        tooltip.style.display = 'block';
                                    });

                                    // Hide the tooltip when the mouse leaves the label
                                    icon.addEventListener('mouseout', function() {
                                        tooltip.style.display = 'none';
                                    });

                                    let inputContainer = document.createElement('textarea');
                                    inputContainer.id = candidateFieldKey;
                                    inputContainer.type = 'text';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');
                                    inputContainer.setAttribute('style', 'height: 30px;width: 95%; border: 1px #E8E8E8 solid;margin-top: 5px; padding: 5px; border-radius: 5px;');

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    labelContainer.appendChild(icon);
                                    outerDivContiner.appendChild(tooltip); // Append the tooltip after the label
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainer.appendChild(outerDivContiner);
                                }

                                else if ((candidateFieldObject['type'] == 'phonenumber' || candidateFieldObject['type'] == 'text' || candidateFieldObject['type'] == 'social_profile') && candidateFieldKey != 'currencyid'){
                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = candidateFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = candidateFieldKey + 'LabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'text';
                                    inputContainer.id = candidateFieldKey;
                                    inputContainer.style.width = '95%';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainer.appendChild(outerDivContiner);
                                }

                                else if (candidateFieldObject['type'] == 'email'){

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = candidateFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = candidateFieldKey + 'LabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'email';
                                    inputContainer.id = candidateFieldKey;
                                    inputContainer.style.width = '95%';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');
                                    inputContainer.setAttribute('maxlength', "40");

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainer.appendChild(outerDivContiner);
                                }

                                else if (candidateFieldObject['type'] == 'longtext'){

                                    textFieldsContainer = document.getElementById('longTextFieldsContainer');

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = candidateFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = candidateFieldKey + 'LabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }


                                    let inputContainer = document.createElement('textarea');
                                    inputContainer.type = 'text';
                                    inputContainer.id = candidateFieldKey;
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');
                                    inputContainer.setAttribute('style', 'height: 30px;width: 95%; border: 1px #E8E8E8 solid;margin-top: 5px; padding: 5px; font-size: 13px; border-radius: 5px;');

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainer.appendChild(outerDivContiner);
                                }

                                else if (candidateFieldObject['type'] == 'dropdown' || candidateFieldKey == 'currencyid' || candidateFieldKey == 'genderid' || candidateFieldKey == 'workexpyr' || candidateFieldKey == 'relevantexperience'){
                                    let options = [];

                                    if (candidateFieldKey == 'currencyid'){
                                        options = currencyTypes.map(currency => currency.country);
                                    }
                                    else if (candidateFieldKey == 'genderid' || candidateFieldKey == 'workexpyr' || candidateFieldKey == 'relevantexperience' || candidateFieldKey == 'salarytype'){
                                        if (candidateFieldKey == 'genderid'){
                                            options = genderData.map(gender => gender.label);
                                        }

                                        else if (candidateFieldKey == 'workexpyr' || candidateFieldKey == 'relevantexperience'){
                                            options = candidateFieldObject['data'].map(object => object.label);
                                            options.unshift('0 Year');
                                        }
                                        else {
                                            options = candidateFieldObject['data'].map(object => object.label);
                                        }
                                    }
                                    else{
                                        options = candidateFieldObject['data'].map(object => object.label);
                                        if (!flagForSearchableDropdown){
                                            options.unshift('Select an option');
                                        }
                                    }
                                
                                    const container = document.getElementById("dropDownDataSection");

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.id = candidateFieldKey + 'nestedDivId';
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('id', candidateFieldKey + 'Label');
                                    headingOfField.setAttribute('style', 'margin-bottom:5px; display: inline-block;');
                                    headingOfField.innerHTML = candidateFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = candidateFieldKey + 'LabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    outerDivContiner.appendChild(headingOfField);
                                    outerDivContiner.appendChild(errorMessage);
                                

                                    if (flagForSearchableDropdown) {
                                        // block to show the button to view options 
                                        let containerToShowDropdownOption = document.createElement('div');
                                        containerToShowDropdownOption.id = candidateFieldKey + 'OuterContainerForOptions';
                                        containerToShowDropdownOption.style.width = 95 + '%';
                                        containerToShowDropdownOption.style.overflow ='hidden';
                                        let buttonToShowDropdownOption = document.createElement('div');
                                        buttonToShowDropdownOption.id = candidateFieldKey + 'button';
                                        buttonToShowDropdownOption.innerHTML = "Select from List";
                                        containerToShowDropdownOption.appendChild(buttonToShowDropdownOption);


                                        // input component for search
                                        let searchInput = document.createElement('input');
                                        searchInput.setAttribute('type', 'text');
                                        searchInput.setAttribute('id', candidateFieldKey + 'search');
                                        searchInput.setAttribute('placeholder', 'Please Search & Select');
                                        searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                        searchInput.setAttribute('class', 'rcrm-ctrl');


                                        // block to show the option container
                                        let containerDropdownOption = document.createElement('div');
                                        containerDropdownOption.id = candidateFieldKey + 'OptionsOuterContainer';
                                        let dropdownOption = document.createElement('ul');
                                        dropdownOption.id = candidateFieldKey + 'options';
                                        dropdownOption.setAttribute('style', 'list-style: none;');
                                        containerDropdownOption.appendChild(searchInput);
                                        containerDropdownOption.appendChild(dropdownOption);


                                        // add Event Listener in the input element 
                                        searchInput.addEventListener('input', function(e){
                                            let matchesCount = 0;
                                            let searchValue = e.target.value.trim();
                                            let optionsList = dropdownOption;

                                            optionsList.innerHTML = '';
                                            for (let option of options){
                                                if (option.toLowerCase().includes(searchValue.toLowerCase())){
                                                    const li = document.createElement('li');
                                                    li.textContent = option;
                                                    li.id = candidateFieldKey + options.indexOf(option);
                                                    li.addEventListener('click', handleOptionClick);
                                                    li.style.cursor = 'pointer';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    // li.style.backgroundColor = '#E8E8E8';
                                                    // li.style.border = '1px solid #F8FAFB';
                                                    optionsList.appendChild(li);
                                                    matchesCount += 1;


                                                    li.addEventListener('mouseover', function () {
                                                        li.style.backgroundColor = '#f5f5f5';
                                                    });

                                                    li.addEventListener('mouseout', function () {
                                                        li.style.backgroundColor = 'white';
                                                    });
                                                }
                                            }

                                            if (matchesCount == 0){
                                                const li = document.createElement('li');
                                                li.textContent = 'No Results Found';
                                                li.style.marginBottom = '5px';
                                                li.style.padding = '5px';
                                                li.style.color = 'black';
                                                li.style.backgroundColor = '#E8E8E8';
                                                li.style.border = '1px solid #F8FAFB';
                                                optionsList.appendChild(li);
                                            }

                                            if ( matchesCount < 5 ) {
                                                optionsList.style.height = 'auto';
                                                optionsList.style.overflowY = 'hidden';
                                            }

                                            else {
                                                optionsList.style.height = '200px';
                                                optionsList.style.overflowY = 'scroll';
                                            }

                                            matchesCount = 0;
                                        });


                                        // Add event listener for keydown event to prevent Enter key press
                                        searchInput.addEventListener('keydown', function(e) {
                                            if (e.key === 'Enter') {
                                                e.preventDefault();
                                            }
                                        });


                                        // block to show the selected options container
                                        let containerMultiselectSelectedOption = document.createElement('div');
                                        containerMultiselectSelectedOption.id = candidateFieldKey + 'SelectedOptionContainer';
                                        let selectedMultiselectOption = document.createElement('ul');
                                        selectedMultiselectOption.setAttribute('style', 'list-style: none;');
                                        selectedMultiselectOption.id = candidateFieldKey + 'SelectedOptions';
                                        containerMultiselectSelectedOption.appendChild(selectedMultiselectOption);

                                        outerDivContiner.appendChild(containerToShowDropdownOption);
                                        outerDivContiner.appendChild(containerDropdownOption);

                                        container.appendChild(outerDivContiner);

                                        // Get options list and selected list elements
                                        const optionsList = dropdownOption;
                                        const toggleButton = buttonToShowDropdownOption;


                                        // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                        if (options.length > 5){
                                            optionsList.style.height = '200px';
                                            optionsList.style.overflowY = 'scroll';
                                        }


                                        // Set CSS properties dynamically on the Dropdown button
                                        toggleButton.style.cursor = 'pointer';
                                        toggleButton.style.padding = '3px';
                                        toggleButton.style.border = '1px solid #E8E8E8';
                                        toggleButton.style.height = '30px';
                                        toggleButton.style.marginBottom = '5px';
                                        toggleButton.style.borderRadius = '5px';
                                        toggleButton.style.paddingLeft = '5px';


                                        // Set CSS properties dynamically on the Dropdown Options Container
                                        containerDropdownOption.style.display = 'none';
                                        containerDropdownOption.style.border = '1px solid #E8E8E8';
                                        containerDropdownOption.style.padding = '10px';
                                        containerDropdownOption.style.marginBottom = '5px';
                                        containerDropdownOption.style.borderRadius = '5px';


                                        // Set toggle button click event
                                        toggleButton.addEventListener('click', toggleOptionsContainer);

                                        // Toggle options container visibility
                                        function toggleOptionsContainer() {
                                            document.getElementById(candidateFieldKey + 'OptionsOuterContainer').style.display = document.getElementById(candidateFieldKey + 'OptionsOuterContainer').style.display === 'none' ? 'block' : 'none';
                                        }


                                        // dropdown data
                                        const data = options;

                                        // Generate options dynamically
                                        data.forEach((option, index) => {
                                            const li = document.createElement('li');
                                            li.textContent = option;
                                            li.id = candidateFieldKey + index;
                                            li.addEventListener('click', handleOptionClick);

                                            // Attach CSS properties dynamically
                                            li.style.cursor = 'pointer';
                                            li.style.marginBottom = '5px';
                                            li.style.padding = '5px';
                                            li.style.color = 'black';
                                            // li.style.backgroundColor = '#E8E8E8';

                                            li.addEventListener('mouseover', function () {
                                                li.style.backgroundColor = '#f5f5f5';
                                            });

                                            li.addEventListener('mouseout', function () {
                                                li.style.backgroundColor = 'white';
                                            });

                                            optionsList.appendChild(li);
                                        });



                                        function handleOptionClick(e) {
                                            // set the error message display to none
                                            document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';
                                            const selectedOption = e.target.textContent;
                                            let idOfTheLabel = '';

                                            if (candidateFieldKey == 'currencyid'){
                                                // loop thorugh the list and map the id 
                                                for (let currency of currencyTypes){
                                                    if (currency.country == selectedOption){
                                                        idOfTheLabel = currency.id;
                                                        break;
                                                    }
                                                }
                                            }

                                            else if (candidateFieldKey == 'genderid'){
                                                // loop thorugh the list and map the id
                                                for (let gender of genderData){
                                                    if (gender.label == selectedOption){
                                                        idOfTheLabel = gender.id;
                                                    }
                                                }
                                            }

                                            else if (candidateFieldKey == 'workexpyr' || candidateFieldKey == 'relevantexperience'){
                                                if (selectedOption == '0 Year'){
                                                    idOfTheLabel = 0;
                                                }
                                                else {
                                                    for(let object of candidateFieldObject['data']){
                                                        if (object.label == selectedOption){
                                                            idOfTheLabel = object.id;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }

                                            else if (candidateFieldKey == 'salarytype'){
                                                for(let object of candidateFieldObject['data']){
                                                    if (object.label == selectedOption){
                                                        idOfTheLabel = object.id;
                                                        break;
                                                    }
                                                }
                                            }

                                            else {
                                                idOfTheLabel = selectedOption;

                                                if(flagForNestedCustomFields){
                                                    parentOptionSelected(candidateFieldObject, candidateFieldKey, idOfTheLabel, candidateEntityTypeId);
                                                }
                                            }


                                            fieldsVisibleOnExtension[candidateFieldKey] = idOfTheLabel;

                                            const labelComponenet = document.getElementById(candidateFieldKey + 'button');
                                            labelComponenet.textContent = selectedOption;
                                            labelComponenet.style.color = 'black';

                                            toggleOptionsContainer();
                                        }


                                        if (candidateFieldKey == 'genderid') {
                                            const labelComponenet = document.getElementById(candidateFieldKey + 'button');
                                            labelComponenet.textContent = 'Not Available';
                                            fieldsVisibleOnExtension[candidateFieldKey] = 0;
                                        }

                                        if( candidateFieldKey == 'currencyid' || candidateFieldKey == 'salarytype'){
                                            const labelComponenet = document.getElementById(candidateFieldKey + 'button');
                                            if(candidateFieldKey == 'currencyid'){
                                                labelComponenet.textContent = currencyTypes[0].country;
                                                fieldsVisibleOnExtension[candidateFieldKey] = 0;
                                            }
                                            else {
                                                labelComponenet.textContent = 'Annual Salary';
                                                fieldsVisibleOnExtension[candidateFieldKey] = 2;
                                            }
                                        }

                                        if (candidateFieldKey == 'workexpyr' || candidateFieldKey == 'relevantexperience' ){
                                            const labelComponenet = document.getElementById(candidateFieldKey + 'button');
                                            labelComponenet.textContent = '0 Year';
                                            fieldsVisibleOnExtension[candidateFieldKey] = 0;
                                        }
                                    }
                                    else {
                                        // Create the dropdown dropdown
                                        const select = document.createElement("select");
                                        select.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border-color: #E8E8E8; font-size: 13px; font-weight: 400; border-radius: 5px; color: #777; padding-left: 1px; ');
                                        let index = 0;
                                        select.setAttribute('id', candidateFieldKey);
                                    
                                        // Create the options with checkboxes
                                        for (let option of options) {
                                            const checkbox = document.createElement("input");
                                            checkbox.type = "checkbox";
                                            checkbox.value = option;
                                            checkbox.id = index;
                                        
                                            const label = document.createElement("label");
                                            label.textContent = option;
                                            label.htmlFor = option;
                                            label.id = index;
                                        
                                            const optionContainer = document.createElement("option");
                                            optionContainer.id = index;
                                            if (candidateFieldKey == 'genderid' && option == "Not Available"){
                                                optionContainer.setAttribute('selected', 'selected');
                                            }
                                            if (candidateFieldKey == 'currencyid'){
                                                checkbox.id = currencyTypes[index].id;
                                                label.id = currencyTypes[index].id;
                                                optionContainer.id = currencyTypes[index].id;
                                            }
                                            if (candidateFieldKey == 'salarytype'){
                                                checkbox.id = candidateFieldObject['data'][index].id;
                                                label.id = candidateFieldObject['data'][index].id;
                                                optionContainer.id = candidateFieldObject['data'][index].id;
                                            }
                                            optionContainer.appendChild(label);
                                            select.appendChild(optionContainer);
                                            select.appendChild(checkbox);
                                            index += 1 ;
                                        }
                                    
                                        outerDivContiner.appendChild(select);
                                    
                                        // Event listener to capture selected values
                                        select.addEventListener("change", (event) => {
                                            const selectedOptions = [...event.target.selectedOptions].map((option) => option.value);
                                            if (selectedOptions[0] == 'Select an option'){
                                                fieldsVisibleOnExtension[candidateFieldKey] = '';
                                                select.style.color = '#777';
                                            }
                                            else {
                                                // set the error message visibility to none
                                                document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';
                                                fieldsVisibleOnExtension[candidateFieldKey] = selectedOptions;
                                                select.style.color = 'black';
                                            }
                                        });
                                    }


                                    if(flagForNestedCustomFields){
                                        parentOptionSelected(candidateFieldObject, candidateFieldKey, '', candidateEntityTypeId);
                                    }

                                    if (candidateFieldKey == 'currencyid' || candidateFieldKey == 'genderid' || candidateFieldKey == 'workexpyr' || candidateFieldKey == 'relevantexperience' || candidateFieldKey == 'salarytype'){
                                        fieldsVisibleOnExtension[candidateFieldKey] = [options[0]];
                                        if (candidateFieldKey == 'genderid'){
                                            fieldsVisibleOnExtension[candidateFieldKey] = 0;
                                        }
                                    }

                                    if (candidateFieldKey != 'currencyid' && candidateFieldKey != 'genderid' && candidateFieldKey != 'workexpyr' && candidateFieldKey != 'relevantexperience' && candidateFieldKey != 'salarytype'){
                                        dropdownCustomFields.push(candidateFieldKey);
                                    }

                                }

                                else if (candidateFieldObject['type'] == 'multiselect'){
                                    const options = candidateFieldObject['data'].map(object => object.label);

                                    // create dynamically the outer container 
                                    const parentContainerMultiselect = document.getElementById('multiselectDataSection'); 

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.id = candidateFieldKey + 'nestedDivId';
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = candidateFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = candidateFieldKey + 'LabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    outerDivContiner.appendChild(headingOfField);
                                    outerDivContiner.appendChild(errorMessage);

                                    // it will store the id and value of the selected options
                                    const selectedOptions = {};
                                    defaultSelectedOptions[candidateFieldKey] = {};
                                    multiselectCustomFields.push(candidateFieldKey);

                                    // block to show the button to view options 
                                    var containerToShowMultiselectOption = document.createElement('div');
                                    containerToShowMultiselectOption.id = candidateFieldKey + 'OuterContainerForOptions';
                                    var buttonToShowMultiselectOption = document.createElement('div');
                                    buttonToShowMultiselectOption.id = candidateFieldKey + 'button';
                                    buttonToShowMultiselectOption.innerHTML = "Select from List";
                                    containerToShowMultiselectOption.appendChild(buttonToShowMultiselectOption);

                                    // block to show the option container

                                    let searchInput = null;
                                    if (flagForSearchableDropdown){
                                        // input component for search
                                        searchInput = document.createElement('input');
                                        searchInput.setAttribute('type', 'text');
                                        searchInput.setAttribute('id', candidateFieldKey + 'search');
                                        searchInput.setAttribute('placeholder', 'Please Search & Select');
                                        searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                        searchInput.setAttribute('class', 'rcrm-ctrl');
                                    }


                                    var containerMultiselectOption = document.createElement('div');
                                    containerMultiselectOption.id = candidateFieldKey + 'OptionsOuterContainer';
                                    var multiselectOption = document.createElement('ul');
                                    multiselectOption.id = candidateFieldKey + 'options';
                                    multiselectOption.setAttribute('style', 'list-style: none;');
                                    if (flagForSearchableDropdown){
                                        containerMultiselectOption.appendChild(searchInput);
                                    }
                                    containerMultiselectOption.appendChild(multiselectOption);

                                    if (flagForSearchableDropdown){
                                        // when a search is performed we need to manipulate the options list
                                        searchInput.addEventListener('input', function(e){
                                            let searchValue = e.target.value.trim();
                                            let optionsList = document.getElementById(candidateFieldKey + 'options');
                                            let options = candidateFieldObject['data'].map(object => object.label);
                                            let matchesCount = 0;
                                            let counter = 0;
                                            // optionsList.innerHTML = '';

                                            for (let option of options){
                                                if (option.toLowerCase().includes(searchValue.toLowerCase())){
                                                    // const li = document.createElement('li');
                                                    // li.textContent = option;
                                                    // li.id = candidateFieldKey + options.indexOf(option);
                                                    // li.addEventListener('click', handleOptionClick);
                                                    // li.style.cursor = 'pointer';
                                                    // li.style.marginBottom = '5px';
                                                    // li.style.padding = '5px';
                                                    // li.style.color = 'black';
                                                    // li.style.backgroundColor = '#E8E8E8';
                                                    // li.style.border = '1px solid #F8FAFB';
                                                    // optionsList.appendChild(li);
                                                    matchesCount += 1;
                                                    document.getElementById(candidateFieldKey + counter).style.display = 'block';
                                                }
                                                else {
                                                    document.getElementById(candidateFieldKey + counter).style.display = 'none';
                                                }
                                                counter += 1;
                                            }

                                            if (matchesCount == 0){
                                                if (!document.getElementById(candidateFieldKey + 'noResults')){
                                                    const li = document.createElement('li');
                                                    li.textContent = 'No Results Found';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    li.style.backgroundColor = '#E8E8E8';
                                                    li.id = candidateFieldKey + 'noResults';
                                                    li.style.border = '1px solid #F8FAFB';
                                                    optionsList.appendChild(li);
                                                }
                                            }
                                            else if (matchesCount > 0) {
                                                if (document.getElementById(candidateFieldKey + 'noResults')){
                                                    optionsList.removeChild(document.getElementById(candidateFieldKey + 'noResults'));
                                                }
                                            }

                                            if ( matchesCount < 5 ) {
                                                optionsList.style.height = 'auto';
                                                optionsList.style.overflowY = 'hidden';
                                            }

                                            else {
                                                optionsList.style.height = '200px';
                                                optionsList.style.overflowY = 'scroll';
                                            }

                                            matchesCount = 0;
                                            optionsList = null;
                                        });

                                        // Add event listener for keydown event to prevent Enter key press
                                        searchInput.addEventListener('keydown', function(e) {
                                            if (e.key === 'Enter') {
                                                e.preventDefault();
                                            }
                                        });
                                    }

                                    // block to show the selected options container
                                    var containerMultiselectSelectedOption = document.createElement('div');
                                    containerMultiselectSelectedOption.id = candidateFieldKey + 'SelectedOptionContainer';
                                    var selectedMultiselectOption = document.createElement('ul');
                                    selectedMultiselectOption.setAttribute('style', 'list-style: none;');
                                    selectedMultiselectOption.id = candidateFieldKey + 'SelectedOptions';
                                    containerMultiselectSelectedOption.appendChild(selectedMultiselectOption);

                                    outerDivContiner.appendChild(containerToShowMultiselectOption);
                                    outerDivContiner.appendChild(containerMultiselectOption);
                                    outerDivContiner.appendChild(containerMultiselectSelectedOption);
                                    parentContainerMultiselect.appendChild(outerDivContiner);

                                    if(flagForNestedCustomFields){
                                        parentOptionSelected(candidateFieldObject, candidateFieldKey,  [], candidateEntityTypeId);
                                    }

                                    // Keep track of selected values
                                    let selectedValues = [];

                                    // Get options list and selected list elements
                                    const optionsList = multiselectOption;
                                    const selectedList = selectedMultiselectOption;
                                    const toggleButton = buttonToShowMultiselectOption;

                                    // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                    if (options.length > 5){
                                        optionsList.style.height = '200px';
                                        optionsList.style.overflowY = 'scroll';
                                    }

                                    selectedList.style.height = '50px';
                                    selectedList.style.overflowY = 'scroll';


                                    // Set CSS properties dynamically on the Multiselect button
                                    toggleButton.style.cursor = 'pointer';
                                    toggleButton.style.padding = '3px';
                                    toggleButton.style.border = '1px solid #E8E8E8';
                                    toggleButton.style.height = '30px';
                                    toggleButton.style.marginBottom = '5px';
                                    toggleButton.style.borderRadius = '5px';
                                    toggleButton.style.paddingLeft = '5px';

                                    // Set CSS properties dynamically on the Multiselect Options Container
                                    containerMultiselectOption.style.display = 'none';
                                    containerMultiselectOption.style.border = '1px solid #E8E8E8';
                                    containerMultiselectOption.style.padding = '10px';
                                    containerMultiselectOption.style.marginBottom = '5px';
                                    containerMultiselectOption.style.borderRadius = '5px';

                                    // Set CSS properties dynamically on the Multiselect Selected container
                                    containerMultiselectSelectedOption.style.display = 'none';
                                    containerMultiselectSelectedOption.style.border = '1px solid #E8E8E8';
                                    containerMultiselectSelectedOption.style.padding = '10px';
                                    containerMultiselectSelectedOption.style.width = '100%';
                                    containerMultiselectSelectedOption.style.borderRadius = '5px';
                                    containerMultiselectSelectedOption.style.marginBottom = '5px';

                                    // Set toggle button click event
                                    toggleButton.addEventListener('click', toggleOptionsContainer);

                                    // Toggle options container visibility
                                    function toggleOptionsContainer() {
                                        document.getElementById(candidateFieldKey + 'OptionsOuterContainer').style.display = document.getElementById(candidateFieldKey + 'OptionsOuterContainer').style.display === 'none' ? 'block' : 'none';
                                    }

                                    // Sample data
                                    const data = options;

                                    multiselectCheckboxValueContainer[candidateFieldKey] = {};

                                    // Generate options dynamically
                                    data.forEach((option, index) => {
                                        const li = document.createElement('li');
                                        li.textContent = option;
                                        li.id = candidateFieldKey + index;
                                        li.addEventListener('click', handleOptionClick);

                                        // Attach CSS properties dynamically
                                        li.style.cursor = 'pointer';
                                        li.style.marginBottom = '5px';
                                        li.style.padding = '5px';
                                        li.style.color = 'black';
                                        li.style.overflow = 'hidden';
                                        // li.style.backgroundColor = '#E8E8E8';

                                        // create a checkboc type field and add it to the list
                                        const checkbox = document.createElement("input");
                                        checkbox.type = "checkbox";
                                        checkbox.id = candidateFieldKey + 'checkbox' + index;
                                        multiselectCheckboxValueContainer[candidateFieldKey][candidateFieldKey + 'checkbox' + index] = option;
                                        checkbox.style.marginRight = '10px';
                                        checkbox.style.cursor = 'pointer';
                                        checkbox.style.verticalAlign = 'middle';
                                        checkbox.addEventListener('click', handleMultiselectCheckboxClick);

                                        li.insertBefore(checkbox, li.firstChild);


                                        li.addEventListener('mouseover', function () {
                                            li.style.backgroundColor = '#f5f5f5';
                                        });

                                        li.addEventListener('mouseout', function () {
                                            li.style.backgroundColor = 'white';
                                        });

                                        optionsList.appendChild(li);

                                        document.getElementById(candidateFieldKey + 'checkbox' + index).value = option;
                                    });


                                    function handleMultiselectCheckboxClick(e) {

                                        // stop the event propagation
                                        e.stopPropagation();

                                        // get the id of the checkbox
                                        let checkboxId = e.target.id;
                                        let selectedOption = multiselectCheckboxValueContainer[candidateFieldKey][checkboxId];
                                        let selectedOptionId = checkboxId.replace('checkbox', '');

                                        let markAsChecked = e.target.checked;

                                        // if the checkbox is checked then add the option to the selected list
                                        if (markAsChecked && !(selectedOptionId in defaultSelectedOptions[candidateFieldKey])){

                                            // set the error message display as none 
                                            document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';

                                            defaultSelectedOptions[candidateFieldKey][selectedOptionId] = selectedOption;

                                            fieldsVisibleOnExtension[candidateFieldKey] = [];
                                            for (let key in defaultSelectedOptions[candidateFieldKey]){
                                                fieldsVisibleOnExtension[candidateFieldKey].push(defaultSelectedOptions[candidateFieldKey][key]);
                                            }

                                            if(flagForNestedCustomFields){
                                                parentOptionSelected(candidateFieldObject, candidateFieldKey,  fieldsVisibleOnExtension[candidateFieldKey], candidateEntityTypeId);
                                            }
                                        
                                            selectedValues.push(selectedOption);


                                            // Create a new list item in the selected list
                                            const selectedListItem = document.createElement('li');
                                            selectedListItem.textContent = selectedOption;

                                            // Attach CSS properties dynamically
                                            selectedListItem.style.cursor = 'pointer';
                                            selectedListItem.style.marginBottom = '2px';
                                            selectedListItem.style.border = '1px solid #F8FAFB';
                                            // selectedListItem.style.backgroundColor = '#E8E8E8';
                                            selectedListItem.style.color = 'black';
                                            selectedListItem.style.paddingLeft = '5px';
                                            selectedListItem.setAttribute('id', selectedOptionId + 'Selected');

                                            // Add hover styling
                                            selectedListItem.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#D3E2E2';
                                                selectedListItem.style.transform = 'scale(0.97)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                            });
                                            
                                            selectedListItem.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = 'white';
                                                selectedListItem.style.transform = 'scale(1)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                            });

                                            document.getElementById(candidateFieldKey + 'SelectedOptionContainer').style.display = 'inline-block';
                                            if (selectedValues.length == 1){
                                                selectedList.style.height = '40px';
                                            }
                                            else{
                                                selectedList.style.height = '60px';
                                            }
                                            selectedList.appendChild(selectedListItem);

                                            // Create remove option cross mark
                                            const removeOption = document.createElement('span');
                                            removeOption.textContent = 'X';
                                            removeOption.style.float = 'right';
                                            removeOption.style.marginRight = '5px';
                                            removeOption.style.color = 'black';
                                            removeOption.style.marginTop = '3px';
                                            removeOption.style.fontSize = '10px';
                                            removeOption.id = selectedOptionId + 'removeOption';

                                            removeOption.classList.add('remove-option');

                                            removeOption.addEventListener('click', function () {
                                                removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                                            });

                                            // Create remove option circle
                                            const removeOptionCircle = document.createElement('span');
                                            removeOptionCircle.classList.add('remove-option-circle');

                                            // Append the removeOptionCircle to the removeOption
                                            removeOption.appendChild(removeOptionCircle);

                                            // Add hover styling to the removeOption element
                                            removeOption.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#f3dbdb';
                                                removeOptionCircle.style.display = 'inline-block';
                                            });
                                            
                                            removeOption.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = '#E8E8E8';
                                                removeOptionCircle.style.display = 'none';
                                            });

                                            selectedListItem.appendChild(removeOption);
                                        }


                                        else if (!markAsChecked){
                                            // dynamically click the li element to remove the selected option
                                            const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption');
                                            if (removeOptionButton){
                                                removeOptionButton.click();
                                            }
                                        }
                                    }

                                    // Click event handler for options
                                    function handleOptionClick(e) {
                                        const selectedOption = e.target.textContent;
                                        const selectedOptionId = e.target.id;

                                        // check if selectedOptionId contains checkbox in the id 

                                        // Add the selected value to the tracking array
                                        if (!(selectedOptionId in defaultSelectedOptions[candidateFieldKey])){
                                            // set the error message display as none 
                                            document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';

                                            // mark the corresponding checkbox as checked
                                            document.getElementById(candidateFieldKey + 'checkbox' + selectedOptionId.replace(candidateFieldKey, '')).checked = true;


                                            defaultSelectedOptions[candidateFieldKey][selectedOptionId] = selectedOption;

                                            fieldsVisibleOnExtension[candidateFieldKey] = [];
                                            for (let key in defaultSelectedOptions[candidateFieldKey]){
                                                fieldsVisibleOnExtension[candidateFieldKey].push(defaultSelectedOptions[candidateFieldKey][key]);
                                            }

                                            if(flagForNestedCustomFields){
                                                parentOptionSelected(candidateFieldObject, candidateFieldKey,  fieldsVisibleOnExtension[candidateFieldKey], candidateEntityTypeId);
                                            }
                                        
                                            selectedValues.push(selectedOption);

                                            // Create a new list item in the selected list
                                            const selectedListItem = document.createElement('li');
                                            selectedListItem.textContent = selectedOption;

                                            // Attach CSS properties dynamically
                                            selectedListItem.style.cursor = 'pointer';
                                            selectedListItem.style.marginBottom = '2px';
                                            selectedListItem.style.border = '1px solid #F8FAFB';
                                            // selectedListItem.style.backgroundColor = '#E8E8E8';
                                            selectedListItem.style.color = 'black';
                                            selectedListItem.style.paddingLeft = '5px';
                                            selectedListItem.setAttribute('id', selectedOptionId + 'Selected');

                                            // Add hover styling
                                            selectedListItem.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#D3E2E2';
                                                selectedListItem.style.transform = 'scale(0.97)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                            });
                                            
                                            selectedListItem.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = 'white';
                                                selectedListItem.style.transform = 'scale(1)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                            });

                                            document.getElementById(candidateFieldKey + 'SelectedOptionContainer').style.display = 'inline-block';
                                            if (selectedValues.length == 1){
                                                selectedList.style.height = '40px';
                                            }
                                            else{
                                                selectedList.style.height = '60px';
                                            }
                                            selectedList.appendChild(selectedListItem);

                                            // Create remove option cross mark
                                            const removeOption = document.createElement('span');
                                            removeOption.textContent = 'X';
                                            removeOption.style.float = 'right';
                                            removeOption.style.marginRight = '5px';
                                            removeOption.style.color = 'black';
                                            removeOption.style.marginTop = '3px';
                                            removeOption.style.fontSize = '10px';

                                            removeOption.id = selectedOptionId + 'removeOption';

                                            removeOption.classList.add('remove-option');

                                            removeOption.addEventListener('click', function () {
                                                removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                                            });

                                            // Create remove option circle
                                            const removeOptionCircle = document.createElement('span');
                                            removeOptionCircle.classList.add('remove-option-circle');

                                            // Append the removeOptionCircle to the removeOption
                                            removeOption.appendChild(removeOptionCircle);

                                            // Add hover styling to the removeOption element
                                            removeOption.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#f3dbdb';
                                                removeOptionCircle.style.display = 'inline-block';
                                            });
                                            
                                            removeOption.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = '#E8E8E8';
                                                removeOptionCircle.style.display = 'none';
                                            });

                                            selectedListItem.appendChild(removeOption);
                                        }

                                        else {
                                            // set the corresponding checkbox as false 
                                            document.getElementById(candidateFieldKey + 'checkbox' + selectedOptionId.replace(candidateFieldKey, '')).checked = false;

                                            // dynamically click the li element to remove the selected option
                                            const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption');
                                            if (removeOptionButton){
                                                removeOptionButton.click();
                                            }
                                        }
                                    }


                                    // Remove selected option
                                    function removeSelectedOption(option, listItem, selectedOptionId) {
                                        // Remove from the tracking array
                                        delete defaultSelectedOptions[candidateFieldKey][selectedOptionId];

                                        fieldsVisibleOnExtension[candidateFieldKey] = [];
                                        for (let key in defaultSelectedOptions[candidateFieldKey]){
                                            fieldsVisibleOnExtension[candidateFieldKey].push(defaultSelectedOptions[candidateFieldKey][key]);
                                        }

                                        if(flagForNestedCustomFields){
                                            parentOptionSelected(candidateFieldObject, candidateFieldKey,  fieldsVisibleOnExtension[candidateFieldKey], candidateEntityTypeId);
                                        }
                                    
                                        // Remove the list item from the selected list
                                        listItem.remove();

                                        if (fieldsVisibleOnExtension[candidateFieldKey].length == 0){
                                            document.getElementById(candidateFieldKey + 'SelectedOptionContainer').style.display = 'none';
                                            fieldsVisibleOnExtension[candidateFieldKey] = null;
                                        }


                                        // mark the checkbox as unchecked 
                                        const correspondingCheckbox = document.getElementById(selectedOptionId.replace(candidateFieldKey, candidateFieldKey+'checkbox'));
                                        if (correspondingCheckbox){
                                            correspondingCheckbox.checked = false;
                                        }
                                    
                                    }

                                    
                                }

                                else if (candidateFieldObject["type"] == 'checkbox' || candidateFieldKey == 'willingtorelocate'){
                                    // Get the container element where the checkbox will be added
                                    const checkboxContainer = document.getElementById('checkboxSection');

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.id = candidateFieldKey + 'nestedDivId';
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label rightCheckbox");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = candidateFieldObject['label'];
                                    
                                    // block for required fields validation
                                    headingOfField.id = candidateFieldKey + 'LabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    outerDivContiner.appendChild(headingOfField);

                                    // Create the checkbox element
                                    const checkboxElement = document.createElement('input');
                                    checkboxElement.type = 'checkbox';
                                    checkboxElement.id = candidateFieldKey;
                                    checkboxElement.setAttribute('style', 'margin-bottom:15px;');

                                    // Add a change event listener to the checkbox element
                                    checkboxElement.addEventListener('change', (event) => {
                                        // Get the checked state of the checkbox element
                                        const isChecked = event.target.checked;
                                        
                                        // Save the checked state in the JavaScript object
                                        let checkBoxValue = '';
                                        if (isChecked){
                                            // set the error message visibility to none
                                            document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';
                                            fieldsVisibleOnExtension[candidateFieldKey] = '1';
                                            checkBoxValue = 'Yes';
                                        }
                                        else{
                                            fieldsVisibleOnExtension[candidateFieldKey] = '0';
                                            checkBoxValue = 'No';
                                        }

                                        if(flagForNestedCustomFields){
                                            parentOptionSelected(candidateFieldObject, candidateFieldKey,  checkBoxValue, candidateEntityTypeId);
                                        }
                                        
                                    });

                                    fieldsVisibleOnExtension[candidateFieldKey] = '0';

                                    // Add the checkbox element to the container element
                                    outerDivContiner.appendChild(checkboxElement);
                                    outerDivContiner.appendChild(errorMessage);
                                    checkboxContainer.appendChild(outerDivContiner);
                                    if(flagForNestedCustomFields){
                                        parentOptionSelected(candidateFieldObject, candidateFieldKey,  'No', candidateEntityTypeId);
                                    }
                                }

                                else if (candidateFieldObject['type'] == 'date'){
                                    // Get the container element where the date input will be added
                                    const dateContainer = document.getElementById('dateSection');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = candidateFieldObject['label'];
                                    
                                    // block for required fields validation
                                    headingOfField.id = candidateFieldKey + 'LabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }
                                    
                                    dateContainer.appendChild(headingOfField);
                                    dateContainer.appendChild(errorMessage);

                                    // Create the date input element
                                    const dateElement = document.createElement('input');
                                    dateElement.type = 'date';
                                    dateElement.id = candidateFieldKey;
                                    dateElement.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border: 1px #E8E8E8 solid; border-radius: 5px; color: #777; padding-left: 5px; text-transform: uppercase; ');

                                    // Add a change event listener to the date input element
                                    dateElement.addEventListener('change', (event) => {
                                        // set the error message visibility to none
                                        document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';

                                        // Get the selected date from the date input element
                                        const selectedDate = new Date(event.target.value);
                                        
                                        // Get the UNIX timestamp of the selected date
                                        const timestamp = selectedDate.getTime() / 1000;

                                        // change the color to black
                                        dateElement.style.color = 'black';
                                        
                                        // Save the UNIX timestamp in the JavaScript object
                                        fieldsVisibleOnExtension[candidateFieldKey] = timestamp;

                                        if (selectedDate == 'Invalid Date'){
                                            dateElement.style.color = '#777';
                                            fieldsVisibleOnExtension[candidateFieldKey] = null;
                                        }
                                        
                                    });

                                    // Add the date input element to the container element
                                    dateContainer.appendChild(dateElement);
                                    fieldsVisibleOnExtension[candidateFieldKey] = null;
                                }

                                else if (candidateFieldObject['type'] == 'date_time'){
                                    // Get the container element where the date time input will be added
                                    const dateContainer = document.getElementById('dateTimeSection');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = candidateFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = candidateFieldKey + 'LabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (candidateFieldObject['required_on_form'] == true) {
                                        headingOfField.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    dateContainer.appendChild(headingOfField);
                                    dateContainer.appendChild(errorMessage);

                                    // Create the date input element
                                    const dateElement = document.createElement('input');
                                    dateElement.type = 'datetime-local';
                                    dateElement.id = candidateFieldKey;
                                    dateElement.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border: 1px #E8E8E8 solid; border-radius: 5px; color: #777; padding-left: 5px; text-transform: uppercase; ');

                                    // Add a change event listener to the date input element
                                    dateElement.addEventListener('change', (event) => {
                                        const selectedDate = new Date(event.target.value);

                                        document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';

                                        const timestamp = selectedDate.getTime() / 1000;

                                        dateElement.style.color = 'black';

                                        fieldsVisibleOnExtension[candidateFieldKey] = timestamp;


                                        if (selectedDate == 'Invalid Date'){
                                            dateElement.style.color = '#777';
                                            fieldsVisibleOnExtension[candidateFieldKey] = null;
                                        }

                                    });

                                    // Add the date input element to the container element
                                    dateContainer.appendChild(dateElement);
                                    fieldsVisibleOnExtension[candidateFieldKey] = null;
                                }

                                else if (candidateFieldObject['type'] == 'file'){
                                    // Get the container element where the file input will be added
                                    const fileContainer = document.getElementById('fileContainer');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = candidateFieldObject['label'];

                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }


                                    // block for required fields validation
                                    headingOfField.id = candidateFieldKey + 'LabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';
                                    fileContainer.appendChild(headingOfField);
                                    fileContainer.appendChild(errorMessage);

                                    // Create the file input element
                                    const fileElement = document.createElement('input');
                                    fileElement.type = 'file';
                                    fileElement.id = candidateFieldKey;
                                    fileElement.setAttribute('style', 'margin-bottom:10px; border: 1px #E8E8E8 solid; font-size: 13px; display: none;');

                                    // Create the label element
                                    var label = document.createElement('label');
                                    label.setAttribute('for', candidateFieldKey);
                                    label.setAttribute('id', candidateFieldKey + 'label');
                                    label.setAttribute('style', 'display: inline-block; border: 1px solid #E8E8E8; background-color: white; cursor: pointer; width: 95%; height: 25px; margin-bottom: 10px; border-radius: 5px;');

                                    // Create the span element for the text
                                    var span = document.createElement('span');
                                    span.setAttribute('id', candidateFieldKey + 'span');
                                    span.setAttribute('style', 'padding-right: 5px; padding-left: 5px; ');
                                    span.textContent = 'Upload File';

                                    // Create the icon element
                                    var icon = document.createElement('i');
                                    icon.setAttribute('class', 'mdi mdi-upload mdi-13px'); // Add your desired icon class here

                                    // Append the span and icon elements to the label
                                    label.appendChild(span);
                                    label.appendChild(icon);

                                    fileElement.addEventListener('change', (event) => {
                                        const uploadedFile = event.target.files[0];
                                        if (uploadedFile) {
                                            // set the error message visibility to none
                                            document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';

                                            let nameOfFile = uploadedFile.name;
                                            if (nameOfFile.length < 28){
                                                // span.textContent = nameOfFile;
                                                document.getElementById(candidateFieldKey + 'span').textContent = nameOfFile;
                                                document.getElementById(candidateFieldKey + 'span').style.color = 'black';
                                            }
                                            else {
                                                nameOfFile = nameOfFile.split('.');
                                                let firstHalfName = nameOfFile[0]?.slice(0, 25);
                                                let completeName = firstHalfName + '.. .' + nameOfFile[nameOfFile.length - 1];
                                                // span.textContent = completeName;
                                                document.getElementById(candidateFieldKey + 'span').textContent = completeName;
                                                document.getElementById(candidateFieldKey + 'span').style.color = 'black';
                                            }
                                            
                                        } else {
                                            span.textContent = 'Upload File';
                                            document.getElementById(candidateFieldKey + 'span').style.color = '';
                                        }
                                        fieldsVisibleOnExtension[candidateFieldKey] = uploadedFile ? uploadedFile : '';

                                    });

                                    // Add the file input element to the container element
                                    fileContainer.appendChild(fileElement);
                                    fileContainer.appendChild(label);
                                    fileTypeCustomFields.push(candidateFieldKey);

                                }

                                else if (candidateFieldKey == 'salaryexpectation' || candidateFieldKey == 'currentsalary'){
                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = candidateFieldObject['label'];

                                    labelContainer.id = candidateFieldKey + 'LabelId';

                                    // block for required fields validation
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';


                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'number';
                                    inputContainer.id = candidateFieldKey;
                                    inputContainer.setAttribute('style', 'width:95%; ');
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');
                                    inputContainer.setAttribute('min', 0);

                                    inputContainer.addEventListener("keydown", function(event) {
                                        if (event.key === 'e' || event.key === 'E' || event.key === '+' || event.key === '-') {
                                            event.preventDefault();
                                        }
                                    });

                                    inputContainer.step = "0.01";
                                    inputContainer.addEventListener("input", () => {
                                        const value = inputContainer.value;
                                        // set the error message visibility to none
                                        document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';

                                        const parts = value.split('.');
                                        if (parts.length == 2 && parts[1].length > 2){
                                            parts[1] = parts[1].slice(0, 2);
                                            inputContainer.value = parts.join('.');
                                        }
                                    });

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainer.appendChild(outerDivContiner);
                                    fieldsVisibleOnExtension[candidateFieldKey] = 0;
                                }

                                else if (candidateFieldKey == 'noticeperiod'){
                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = candidateFieldObject['label'];

                                    labelContainer.id = candidateFieldKey + 'LabelId';

                                    // block for required fields validation
                                    labelContainer.id = candidateFieldKey + 'LabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'number';
                                    inputContainer.id = candidateFieldKey;
                                    inputContainer.setAttribute('style', 'width:95%; ');
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');
                                    inputContainer.setAttribute('min', 0);

                                    inputContainer.addEventListener("keydown", function(event) {
                                        if (event.key === '.' || event.key === 'e' || event.key === 'E' || event.key === '+' || event.key === '-') {
                                            event.preventDefault();
                                        }
                                    });

                                    inputContainer.addEventListener("input", () => {
                                        inputContainer.value = inputContainer.value.slice(0, 3);
                                        // set the error message visibility to none
                                        document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';

                                    });

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainer.appendChild(outerDivContiner);
                                    fieldsVisibleOnExtension[candidateFieldKey] = 0;
                                }

                                else if (candidateFieldObject['type'] == "number" || candidateFieldObject['type'] == "decimal"){
                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = candidateFieldObject['label'];

                                    labelContainer.id = candidateFieldKey + 'LabelId';

                                    // block for required fields validation
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = candidateFieldKey + 'ErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

                                    if (candidateFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'number';
                                    inputContainer.id = candidateFieldKey;
                                    inputContainer.setAttribute('style', 'width:95%; ');
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');

                                    inputContainer.addEventListener("keydown", function(event) {
                                        if (event.key === 'e' || event.key === 'E' || event.key === '+') {
                                            event.preventDefault();
                                        }
                                    });

                                    inputContainer.step = "0.01";
                                    inputContainer.addEventListener("input", () => {
                                        let value = inputContainer.value;

                                        // set the error message visibility to none
                                        document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';

                                        const parts = value.split('.');
                                        if (parts.length == 2 && parts[1].length > 2){
                                            parts[1] = parts[1].slice(0, 2);
                                            inputContainer.value = parts.join('.');
                                        }
                                    });

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainer.appendChild(outerDivContiner);
                                    fieldsVisibleOnExtension[candidateFieldKey] = 0;
                                }

                            }
                        }
                        // parse the contact_form_fields data
                        if (response.data.contact_form_field != "") {
                            contactFormData = JSON.parse(response.data.contact_form_field);
                            if (flagForContactCustomSectionFields == false) {
                                for (const dataProperty in contactFormData){
                                    if (contactFormData[dataProperty]["show_on_extension"] == true && !defaultExtensionFieldsForContact.includes(dataProperty)){
                                        fieldsVisibleOnExtensionForContact[dataProperty] = '';
                                        fieldsVisibleOnExtensionForCompanyContact[dataProperty] = '';
                                        if(isEntityTypeField(contactColumns[dataProperty]['type'])){
                                            let entityFieldType = contactColumns[dataProperty]['type'] + 'Type';
                                            setEntityTypeFieldsForEntites(contactEntityTypeId, entityFieldType, dataProperty);
                                        }
                                    }
                                }
                            } else {
                                for (const section in contactFormData){
                                    for (const field in contactFormData[section]['fields']) {
                                        let dataProperty = contactFormData[section]['fields'][field]['colname'];
                                        if (contactFormData[section]['fields'][field]["show_on_extension"] == true && !defaultExtensionFieldsForContact.includes(dataProperty)){
                                            fieldsVisibleOnExtensionForContact[dataProperty] = '';
                                            fieldsVisibleOnExtensionForCompanyContact[dataProperty] = '';
                                            if(isEntityTypeField(contactColumns[dataProperty]['type'])){
                                                let entityFieldType = contactColumns[dataProperty]['type'] + 'Type';
                                                setEntityTypeFieldsForEntites(contactEntityTypeId, entityFieldType, dataProperty);
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        document.getElementById('multiselectDataSectionForContact').innerHTML = '';
                        document.getElementById('dropDownDataSectionForContact').innerHTML = '';
                        document.getElementById('checkboxSectionForContact').innerHTML = '';
                        document.getElementById('dateSectionForContact').innerHTML = '';
                        document.getElementById('textFieldsContainerForContact').innerHTML = '';
                        document.getElementById('longTextFieldsContainerForContact').innerHTML = '';
                        document.getElementById('fileContainerForContact').innerHTML = '';
                        document.getElementById('contactStages').innerHTML = '';
                        document.getElementById('dateTimeSectionForContact').innerHTML = '';
                        
                        for (let contactFieldKey in contactColumns){
                            let contactFieldObject = contactColumns[contactFieldKey];
                            let element = '';
                            let subTag = document.createElement("div");
                            let textFieldsContainerForContact = document.getElementById('textFieldsContainerForContact');
                            let canRenderField = canRenderCustomField(contactEntityTypeId, contactFieldObject['custom_field_id'], contactFieldKey);

                            if (contactFieldObject["show_on_extension"] && contactFieldObject["show_on_extension"] == true && !defaultExtensionFieldsForContact.includes(contactFieldKey) && (!flagForNestedCustomFields || (flagForNestedCustomFields && canRenderField))){
                                // check the type of field. 
                                // language and proficiency 
                                
                                if (contactFieldObject['type'] == 'text' || contactFieldObject['type'] == 'phonenumber' || contactFieldObject['type'] == 'social_profile'){

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = contactFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = contactFieldKey + 'ContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = contactFieldKey + 'ContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + contactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (contactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = contactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'text';
                                    inputContainer.id = contactFieldKey+'ForContact';
                                    inputContainer.style.width = '95%';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForContact.appendChild(outerDivContiner);
                                }

                                else if (contactFieldObject['type'] == 'email'){

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = contactFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = contactFieldKey + 'ContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = contactFieldKey + 'ContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + contactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (contactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = contactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }


                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'email';
                                    inputContainer.id = contactFieldKey+'ForContact';
                                    inputContainer.style.width = '95%';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');
                                    inputContainer.setAttribute('maxlength', "40");

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForContact.appendChild(outerDivContiner);
                                }

                                else if (contactFieldObject['type'] == 'longtext'){

                                    textFieldsContainerForContact = document.getElementById('longTextFieldsContainerForContact');

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = contactFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = contactFieldKey + 'ContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = contactFieldKey + 'ContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + contactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (contactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = contactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }


                                    let inputContainer = document.createElement('textarea');
                                    inputContainer.type = 'text';
                                    inputContainer.id = contactFieldKey+'ForContact';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');
                                    inputContainer.setAttribute('style', 'height: 30px;width: 95%; border: 1px #E8E8E8 solid;margin-top: 5px; padding: 5px; font-size: 13px; border-radius: 5px;');

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForContact.appendChild(outerDivContiner);
                                }

                                else if (contactFieldObject['type'] == 'dropdown' && contactFieldObject['field']!='companyid' && contactFieldObject['field']!='stageid'){
                                    let options = [];
                                    options = contactFieldObject['data'].map(object => object.label);
                                    if(!flagForSearchableDropdown){
                                        options.unshift('Select an option');
                                    }
                                                                    
                                    const container = document.getElementById("dropDownDataSectionForContact");

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.id = contactFieldKey + 'ContactnestedDivId';
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('id',contactFieldKey+'Label');
                                    headingOfField.setAttribute('style', 'margin-bottom:5px; display: inline-block;');
                                    headingOfField.innerHTML = contactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = contactFieldKey + 'ContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = contactFieldKey + 'ContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + contactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (contactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = contactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    outerDivContiner.appendChild(headingOfField);
                                    outerDivContiner.appendChild(errorMessage);
                                
                                    if(flagForSearchableDropdown){
                                        //block to show the button to view components
                                        let containerToShowDropdownOption = document.createElement('div');
                                        containerToShowDropdownOption.id = contactFieldKey + 'OuterContainerForOptionsForContactDropDown';
                                        containerToShowDropdownOption.style.width = 95 + '%';
                                        containerToShowDropdownOption.style.overflow = 'hidden';
                                        let buttonToShowDropdownOption = document.createElement('div');
                                        buttonToShowDropdownOption.id = contactFieldKey + 'buttonForContactDropDown';
                                        buttonToShowDropdownOption.innerHTML = "Select from List";
                                        containerToShowDropdownOption.appendChild(buttonToShowDropdownOption);

                                        // input component for search
                                        let searchInput = document.createElement('input');
                                        searchInput.setAttribute('type', 'text');
                                        searchInput.setAttribute('id', contactFieldKey + 'searchForContactDropDown');
                                        searchInput.setAttribute('placeholder', 'Please Search & Select');
                                        searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                        searchInput.setAttribute('class', 'rcrm-ctrl');

                                        // block to show the option container
                                        let containerDropdownOption = document.createElement('div');
                                        containerDropdownOption.id = contactFieldKey + 'OptionsOuterContainerForContactDropDown';
                                        let dropdownOption = document.createElement('ul');
                                        dropdownOption.id = contactFieldKey + 'optionsForContactDropDown';
                                        dropdownOption.setAttribute('style', 'list-style: none;');
                                        containerDropdownOption.appendChild(searchInput);
                                        containerDropdownOption.appendChild(dropdownOption);

                                        searchInput.addEventListener('input', function(e){
                                            let matchesCount = 0;
                                            let searchValue = e.target.value.trim();
                                            let optionsList = dropdownOption;

                                            optionsList.innerHTML = '';
                                            for (let option of options){
                                                if (option.toLowerCase().includes(searchValue.toLowerCase())){
                                                    const li = document.createElement('li');
                                                    li.textContent = option;
                                                    li.id = contactFieldKey + options.indexOf(option);
                                                    li.addEventListener('click', handleOptionClickForContactDropDown);
                                                    li.style.cursor = 'pointer';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    optionsList.appendChild(li);
                                                    matchesCount += 1;

                                                    li.addEventListener('mouseover', function () {
                                                        li.style.backgroundColor = '#f5f5f5';
                                                    });

                                                    li.addEventListener('mouseout', function () {
                                                        li.style.backgroundColor = 'white';
                                                    });
                                                }
                                            }

                                            if (matchesCount == 0){
                                                const li = document.createElement('li');
                                                li.textContent = 'No Results Found';
                                                li.style.marginBottom = '5px';
                                                li.style.padding = '5px';
                                                li.style.color = 'black';
                                                li.style.backgroundColor = '#E8E8E8';
                                                li.style.border = '1px solid #F8FAFB';
                                                optionsList.appendChild(li);
                                            }

                                            if ( matchesCount < 5 ) {
                                                optionsList.style.height = 'auto';
                                                optionsList.style.overflowY = 'hidden';
                                            }

                                            else {
                                                optionsList.style.height = '200px';
                                                optionsList.style.overflowY = 'scroll';
                                            }

                                            matchesCount = 0;
                                        });
                                        
                                        // Add event listener for keydown event to prevent Enter key press
                                        searchInput.addEventListener('keydown', function(e) {
                                            if (e.key === 'Enter') {
                                                e.preventDefault();
                                            }
                                        });

                                        outerDivContiner.appendChild(containerToShowDropdownOption);
                                        outerDivContiner.appendChild(containerDropdownOption);
                                        
                                        const optionsList = dropdownOption;
                                        const toggleButton = buttonToShowDropdownOption;

                                        // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                        if (options.length > 5){
                                            optionsList.style.height = '200px';
                                            optionsList.style.overflowY = 'scroll';
                                        }

                                        toggleButton.style.cursor = 'pointer';
                                        toggleButton.style.padding = '3px';
                                        toggleButton.style.border = '1px solid #E8E8E8';
                                        toggleButton.style.height = '30px';
                                        toggleButton.style.marginBottom = '5px';
                                        toggleButton.style.borderRadius = '5px';
                                        toggleButton.style.paddingLeft = '5px';


                                        // Set CSS properties dynamically on the Dropdown Options Container
                                        containerDropdownOption.style.display = 'none';
                                        containerDropdownOption.style.border = '1px solid #E8E8E8';
                                        containerDropdownOption.style.padding = '10px';
                                        containerDropdownOption.style.marginBottom = '5px';
                                        containerDropdownOption.style.borderRadius = '5px';

                                        // Set toggle button click event
                                        toggleButton.addEventListener('click', toggleOptionsContainerForContactDropDown);

                                        // Toggle options container visibility
                                        function toggleOptionsContainerForContactDropDown() {
                                            document.getElementById(contactFieldKey + 'OptionsOuterContainerForContactDropDown').style.display = document.getElementById(contactFieldKey + 'OptionsOuterContainerForContactDropDown').style.display === 'none' ? 'block' : 'none';
                                        }

                                        // dropdown data
                                        const data = options;

                                        // Generate options dynamically
                                        data.forEach((option, index) => {
                                            const li = document.createElement('li');
                                            li.textContent = option;
                                            li.id = contactFieldKey + index;
                                            li.addEventListener('click', handleOptionClickForContactDropDown);

                                            // Attach CSS properties dynamically
                                            li.style.cursor = 'pointer';
                                            li.style.marginBottom = '5px';
                                            li.style.padding = '5px';
                                            li.style.color = 'black';

                                            li.addEventListener('mouseover', function () {
                                                li.style.backgroundColor = '#f5f5f5';
                                            });

                                            li.addEventListener('mouseout', function () {
                                                li.style.backgroundColor = 'white';
                                            });

                                            optionsList.appendChild(li);
                                        });

                                        // //adding span tag to clear selected option
                                        // const removeOption = document.createElement('span');
                                        //     removeOption.textContent = 'X';
                                        //     removeOption.style.float = 'right';
                                        //     removeOption.style.marginRight = '5px';
                                        //     removeOption.style.color = 'black';
                                        //     removeOption.style.marginTop = '3px';
                                        //     removeOption.style.fontSize = '10px';

                                        //     removeOption.classList.add('remove-option');

                                        //     removeOption.addEventListener('click', function () {
                                        //         fieldsVisibleOnExtensionForContact[contactFieldKey] = '';
                                        //         const labelComponenet = document.getElementById(contactFieldKey + 'buttonForContactDropDown');

                                        //         labelComponenet.textContent = 'Select from List';
                                        //         buttonToShowDropdownOption.style.color = '#777';
                                        //         toggleOptionsContainerForContactDropDown();
                                        //     });

                                        function handleOptionClickForContactDropDown(e) {
                                            const selectedOption = e.target.textContent;
                                            let idOfTheLabel = selectedOption;

                                            
                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = idOfTheLabel;

                                            if(flagForNestedCustomFields){
                                                parentOptionSelected(contactFieldObject, contactFieldKey, idOfTheLabel, contactEntityTypeId);
                                            }

                                            const labelComponenet = document.getElementById(contactFieldKey + 'buttonForContactDropDown');
                                            labelComponenet.textContent = selectedOption;
                                            labelComponenet.style.color = 'black';
                                            // buttonToShowDropdownOption.appendChild(removeOption);
                                            toggleOptionsContainerForContactDropDown();
                                        }
                                    }
                                    else {
                                        // Create the dropdown dropdown
                                        const select = document.createElement("select");
                                        select.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border-color: #E8E8E8; font-size: 13px; font-weight: 400; border-radius: 5px; color: #777; padding-left: 1px; ');
                                        let index = 0;
                                        select.setAttribute('id', contactFieldKey+'ForContact');

                                        // Create the options with checkboxes
                                        for (let option of options) {
                                            const checkbox = document.createElement("input");
                                            checkbox.type = "checkbox";
                                            checkbox.value = option;
                                            checkbox.id = contactFieldKey+index;

                                            const label = document.createElement("label");
                                            label.textContent = option;
                                            label.htmlFor = option;
                                            label.id = contactFieldKey+index;

                                            const optionContainer = document.createElement("option");
                                            optionContainer.id = index;
                                            optionContainer.appendChild(label);
                                            select.appendChild(optionContainer);
                                            select.appendChild(checkbox);
                                            index += 1 ;
                                        }

                                        outerDivContiner.appendChild(select);

                                        // Event listener to capture selected values
                                        select.addEventListener("change", (event) => {
                                            const selectedOptions = [...event.target.selectedOptions].map((option) => option.value);
                                        // set the error message visibility to none
                                        document.getElementById(contactFieldKey + 'ContactErrorMessage').style.display = 'none';
                                            if (selectedOptions[0] == 'Select an option'){
                                                fieldsVisibleOnExtensionForContact[contactFieldKey] = '';
                                                select.style.color = '#777';
                                            }
                                            else {
                                                fieldsVisibleOnExtensionForContact[contactFieldKey] = selectedOptions;
                                                select.style.color = 'black';
                                            }
                                        });
                                    }
                                    container.appendChild(outerDivContiner);
                                    dropdownCustomFieldsForContact.push(contactFieldKey);
                                    if(flagForNestedCustomFields){
                                        parentOptionSelected(contactFieldObject, contactFieldKey, '', contactEntityTypeId);
                                    }
                                }

                                else if (contactFieldObject['type'] == 'multiselect'){
                                    const options = contactFieldObject['data'].map(object => object.label);
                                    // create dynamically the outer container 
                                    const parentContainerMultiselect = document.getElementById('multiselectDataSectionForContact'); 

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.id = contactFieldKey + 'ContactnestedDivId';
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = contactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = contactFieldKey + 'ContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = contactFieldKey + 'ContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + contactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (contactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = contactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }


                                    outerDivContiner.appendChild(headingOfField);
                                    outerDivContiner.appendChild(errorMessage);

                                    // it will store the id and value of the selected options
                                    const selectedOptions = {};
                                    defaultSelectedOptions[contactFieldKey+'ForContact'] = {};
                                    multiselectCustomFieldsForContact.push(contactFieldKey);

                                    // block to show the button to view options 
                                    var containerToShowMultiselectOption = document.createElement('div');
                                    containerToShowMultiselectOption.id = contactFieldKey + 'OuterContainerForOptionsForContactMultiselect';
                                    var buttonToShowMultiselectOption = document.createElement('div');
                                    buttonToShowMultiselectOption.id = contactFieldKey + 'buttonForContactMultiselect';
                                    buttonToShowMultiselectOption.innerHTML = "Select from List";
                                    containerToShowMultiselectOption.appendChild(buttonToShowMultiselectOption);

                                    // block to show the option container

                                    let searchInput = null;
                                    if (flagForSearchableDropdown){
                                        // input component for search
                                        searchInput = document.createElement('input');
                                        searchInput.setAttribute('type', 'text');
                                        searchInput.setAttribute('id', contactFieldKey + 'searchForContactMultiselect');
                                        searchInput.setAttribute('placeholder', 'Please Search & Select');
                                        searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                        searchInput.setAttribute('class', 'rcrm-ctrl');
                                    }

                                    var containerMultiselectOption = document.createElement('div');
                                    containerMultiselectOption.id = contactFieldKey + 'OptionsOuterContainerForContactMultiselect';
                                    var multiselectOption = document.createElement('ul');
                                    multiselectOption.id = contactFieldKey + 'optionsForContactMultiselect';
                                    multiselectOption.setAttribute('style', 'list-style: none;');
                                    if (flagForSearchableDropdown){
                                        containerMultiselectOption.appendChild(searchInput);
                                    }
                                    containerMultiselectOption.appendChild(multiselectOption);

                                    if (flagForSearchableDropdown){
                                        // when a search is performed we need to manipulate the options list
                                        searchInput.addEventListener('input', function(e){
                                            let searchValue = e.target.value.trim();
                                            let optionsList = document.getElementById(contactFieldKey + 'optionsForContactMultiselect');
                                            let options = contactFieldObject['data'].map(object => object.label);
                                            let matchesCount = 0;
                                            let counter = 0;
                                            // optionsList.innerHTML = '';

                                            for (let option of options){
                                                if (option.toLowerCase().includes(searchValue.toLowerCase())){
                                                    matchesCount += 1;
                                                    document.getElementById('ForContactMultiselect'+contactFieldKey + counter).style.display = 'block';
                                                }
                                                else {
                                                    document.getElementById('ForContactMultiselect'+contactFieldKey + counter).style.display = 'none';
                                                }
                                                counter += 1;
                                            }

                                            if (matchesCount == 0){
                                                if (!document.getElementById(contactFieldKey + 'noResultsForContactMultiselect')){
                                                    const li = document.createElement('li');
                                                    li.textContent = 'No Results Found';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    li.style.backgroundColor = '#E8E8E8';
                                                    li.id = contactFieldKey + 'noResultsForContactMultiselect';
                                                    li.style.border = '1px solid #F8FAFB';
                                                    optionsList.appendChild(li);
                                                }
                                            }
                                            else if (matchesCount > 0) {
                                                if (document.getElementById(contactFieldKey + 'noResultsForContactMultiselect')){
                                                    optionsList.removeChild(document.getElementById(contactFieldKey + 'noResultsForContactMultiselect'));
                                                }
                                            }

                                            if ( matchesCount < 5 ) {
                                                optionsList.style.height = 'auto';
                                                optionsList.style.overflowY = 'hidden';
                                            }

                                            else {
                                                optionsList.style.height = '200px';
                                                optionsList.style.overflowY = 'scroll';
                                            }

                                            matchesCount = 0;
                                            optionsList = null;
                                        });

                                        // Add event listener for keydown event to prevent Enter key press
                                        searchInput.addEventListener('keydown', function(e) {
                                            if (e.key === 'Enter') {
                                                e.preventDefault();
                                            }
                                        });
                                    }

                                    // block to show the selected options container
                                    var containerMultiselectSelectedOption = document.createElement('div');
                                    containerMultiselectSelectedOption.id = contactFieldKey + 'SelectedOptionContainerForContactMultiselect';
                                    listofmultiselectcolumnForContact[contactFieldKey] = contactFieldKey+'SelectedOptionContainerForContactMultiselect';
                                    var selectedMultiselectOption = document.createElement('ul');
                                    selectedMultiselectOption.setAttribute('style', 'list-style: none;');
                                    selectedMultiselectOption.id = contactFieldKey + 'SelectedOptionsForContactMultiselect';
                                    containerMultiselectSelectedOption.appendChild(selectedMultiselectOption);

                                    outerDivContiner.appendChild(containerToShowMultiselectOption);
                                    outerDivContiner.appendChild(containerMultiselectOption);
                                    outerDivContiner.appendChild(containerMultiselectSelectedOption);
                                    parentContainerMultiselect.appendChild(outerDivContiner);

                                    if(flagForNestedCustomFields){
                                        parentOptionSelected(contactFieldObject, contactFieldKey, [], contactEntityTypeId);
                                    }

                                    // Keep track of selected values
                                    let selectedValues = [];

                                    // Get options list and selected list elements
                                    const optionsList = multiselectOption;
                                    const selectedList = selectedMultiselectOption;
                                    const toggleButton = buttonToShowMultiselectOption;

                                    // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                    if (options.length > 5){
                                        optionsList.style.height = '200px';
                                        optionsList.style.overflowY = 'scroll';
                                    }

                                    selectedList.style.height = '50px';
                                    selectedList.style.overflowY = 'scroll';


                                    // Set CSS properties dynamically on the Multiselect button
                                    toggleButton.style.cursor = 'pointer';
                                    toggleButton.style.padding = '3px';
                                    toggleButton.style.border = '1px solid #E8E8E8';
                                    toggleButton.style.height = '30px';
                                    toggleButton.style.marginBottom = '5px';
                                    toggleButton.style.borderRadius = '5px';
                                    toggleButton.style.paddingLeft = '5px';

                                    // Set CSS properties dynamically on the Multiselect Options Container
                                    containerMultiselectOption.style.display = 'none';
                                    containerMultiselectOption.style.border = '1px solid #E8E8E8';
                                    containerMultiselectOption.style.padding = '10px';
                                    containerMultiselectOption.style.marginBottom = '5px';
                                    containerMultiselectOption.style.borderRadius = '5px';

                                    // Set CSS properties dynamically on the Multiselect Selected container
                                    containerMultiselectSelectedOption.style.display = 'none';
                                    containerMultiselectSelectedOption.style.border = '1px solid #E8E8E8';
                                    containerMultiselectSelectedOption.style.padding = '10px';
                                    containerMultiselectSelectedOption.style.width = '100%';
                                    containerMultiselectSelectedOption.style.borderRadius = '5px';
                                    containerMultiselectSelectedOption.style.marginBottom = '5px';

                                    // Set toggle button click event
                                    toggleButton.addEventListener('click', toggleOptionsContainer);

                                    // Toggle options container visibility
                                    function toggleOptionsContainer() {
                                        document.getElementById(contactFieldKey + 'OptionsOuterContainerForContactMultiselect').style.display = document.getElementById(contactFieldKey + 'OptionsOuterContainerForContactMultiselect').style.display === 'none' ? 'block' : 'none';
                                    }

                                    // Sample data
                                    const data = options;
                                    
                                    multiselectCheckboxValueContainer['ForContactMultiselect'+contactFieldKey]={};
                                    // Generate options dynamically
                                    data.forEach((option, index) => {
                                        const li = document.createElement('li');
                                        li.textContent = option;
                                        li.id = 'ForContactMultiselect'+contactFieldKey + index;
                                        li.addEventListener('click', handleOptionClick);

                                        // Attach CSS properties dynamically
                                        li.style.cursor = 'pointer';
                                        li.style.marginBottom = '5px';
                                        li.style.padding = '5px';
                                        li.style.color = 'black';
                                        li.style.overflow = 'hidden';
                                        // li.style.backgroundColor = '#E8E8E8';

                                        const checkbox=document.createElement('input');
                                        checkbox.type="checkbox";
                    
                                        checkbox.id= 'ForContactMultiselect'+contactFieldKey+'checkbox'+index;
                                        
                                        multiselectCheckboxValueContainer['ForContactMultiselect'+contactFieldKey]['ForContactMultiselect'+contactFieldKey + 'checkbox' + index] = option;
                                        checkbox.style.marginRight='10px';
                                        checkbox.style.cursor='pointer';
                                        checkbox.style.verticalAlign='middle';
                                        checkbox.addEventListener('click',handleMultiselectCheckboxClick);
                                        
                                        li.insertBefore(checkbox,li.firstChild);

                                        li.addEventListener('mouseover', function () {
                                            li.style.backgroundColor = '#f5f5f5';
                                        });

                                        li.addEventListener('mouseout', function () {
                                            li.style.backgroundColor = 'white';
                                        });

                                        optionsList.appendChild(li);
                                        document.getElementById('ForContactMultiselect'+contactFieldKey + 'checkbox' + index).value = option;
                                    });

                                    function handleMultiselectCheckboxClick(e) {
                    
                                        // stop the event propagation
                                        e.stopPropagation();

                                        // get the id of the checkbox
                                        let checkboxId = e.target.id;
                                    
                                       
                                       let selectedOption = multiselectCheckboxValueContainer['ForContactMultiselect'+contactFieldKey][checkboxId];
                                       let selectedOptionId = checkboxId.replace('checkbox', '');
                                        
                                        let markAsChecked = e.target.checked;

                                        // if the checkbox is checked then add the option to the selected list
                                        if (markAsChecked && !(selectedOptionId in defaultSelectedOptions[contactFieldKey+'ForContact'])){

                                            defaultSelectedOptions[contactFieldKey+'ForContact'][selectedOptionId] = selectedOption;

                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = [];
                                            for (let key in defaultSelectedOptions[contactFieldKey+'ForContact']){
                                                fieldsVisibleOnExtensionForContact[contactFieldKey].push(defaultSelectedOptions[contactFieldKey+'ForContact'][key]);
                                            }

                                            if( flagForNestedCustomFields ){
                                                parentOptionSelected(contactFieldObject, contactFieldKey, fieldsVisibleOnExtensionForContact[contactFieldKey], contactEntityTypeId);
                                            }
                                        
                                            selectedValues.push(selectedOption);


                                            // Create a new list item in the selected list
                                            const selectedListItem = document.createElement('li');
                                            selectedListItem.textContent = selectedOption;

                                            // Attach CSS properties dynamically
                                            selectedListItem.style.cursor = 'pointer';
                                            selectedListItem.style.marginBottom = '2px';
                                            selectedListItem.style.border = '1px solid #F8FAFB';
                                            // selectedListItem.style.backgroundColor = '#E8E8E8';
                                            selectedListItem.style.color = 'black';
                                            selectedListItem.style.paddingLeft = '5px';
                                            selectedListItem.setAttribute('id', selectedOptionId + 'Selected');

                                            // Add hover styling
                                            selectedListItem.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#D3E2E2';
                                                selectedListItem.style.transform = 'scale(0.97)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                            });
                                            
                                            selectedListItem.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = 'white';
                                                selectedListItem.style.transform = 'scale(1)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                            });

                                            document.getElementById(contactFieldKey + 'SelectedOptionContainerForContactMultiselect').style.display = 'inline-block';
                                            if (selectedValues.length == 1){
                                                selectedList.style.height = '40px';
                                            }
                                            else{
                                                selectedList.style.height = '60px';
                                            }
                                            selectedList.appendChild(selectedListItem);

                                            // Create remove option cross mark
                                            const removeOption = document.createElement('span');
                                            removeOption.textContent = 'X';
                                            removeOption.style.float = 'right';
                                            removeOption.style.marginRight = '5px';
                                            removeOption.style.color = 'black';
                                            removeOption.style.marginTop = '3px';
                                            removeOption.style.fontSize = '10px';
                                            removeOption.id = selectedOptionId + 'removeOption'+'ForContactMultiselect';

                                            removeOption.classList.add('remove-option');

                                            removeOption.addEventListener('click', function () {
                                                removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                                            });

                                            // Create remove option circle
                                            const removeOptionCircle = document.createElement('span');
                                            removeOptionCircle.classList.add('remove-option-circle');

                                            // Append the removeOptionCircle to the removeOption
                                            removeOption.appendChild(removeOptionCircle);

                                            // Add hover styling to the removeOption element
                                            removeOption.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#f3dbdb';
                                                removeOptionCircle.style.display = 'inline-block';
                                            });
                                            
                                            removeOption.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = '#E8E8E8';
                                                removeOptionCircle.style.display = 'none';
                                            });

                                            selectedListItem.appendChild(removeOption);
                                        }


                                        else if (!markAsChecked){
                                            // dynamically click the li element to remove the selected option
                                            const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption'+'ForContactMultiselect');
                                            if (removeOptionButton){
                                                removeOptionButton.click();
                                            }
                                        }
                                    }

                                    // Click event handler for options
                                    function handleOptionClick(e) {
                                        const selectedOption = e.target.textContent;
                                        const selectedOptionId = e.target.id;
                                        // Add the selected value to the tracking array
                                        if (!(selectedOptionId in defaultSelectedOptions[contactFieldKey+'ForContact'])){

                                            // set the error message visibility to none
                                            document.getElementById(contactFieldKey + 'ContactErrorMessage').style.display = 'none';

                                            document.getElementById('ForContactMultiselect'+contactFieldKey + 'checkbox' + selectedOptionId.replace('ForContactMultiselect'+contactFieldKey, '')).checked = true;

                                            defaultSelectedOptions[contactFieldKey+'ForContact'][selectedOptionId] = selectedOption;

                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = [];
                                            for (let key in defaultSelectedOptions[contactFieldKey+'ForContact']){
                                                fieldsVisibleOnExtensionForContact[contactFieldKey].push(defaultSelectedOptions[contactFieldKey+'ForContact'][key]);
                                            }

                                            if( flagForNestedCustomFields ){
                                                parentOptionSelected(contactFieldObject, contactFieldKey, fieldsVisibleOnExtensionForContact[contactFieldKey], contactEntityTypeId);
                                            }
                                        
                                            selectedValues.push(selectedOption);

                                            // Create a new list item in the selected list
                                            const selectedListItem = document.createElement('li');
                                            selectedListItem.textContent = selectedOption;

                                            // Attach CSS properties dynamically
                                            selectedListItem.style.cursor = 'pointer';
                                            selectedListItem.style.marginBottom = '2px';
                                            selectedListItem.style.border = '1px solid #F8FAFB';
                                            // selectedListItem.style.backgroundColor = '#E8E8E8';
                                            selectedListItem.style.color = 'black';
                                            selectedListItem.style.paddingLeft = '5px';
                                            selectedListItem.setAttribute('id',selectedOptionId+'Selected');

                                            // Add hover styling
                                            selectedListItem.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#D3E2E2';
                                                selectedListItem.style.transform = 'scale(0.97)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                            });
                                            
                                            selectedListItem.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = 'white';
                                                selectedListItem.style.transform = 'scale(1)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                            });

                                            document.getElementById(contactFieldKey + 'SelectedOptionContainerForContactMultiselect').style.display = 'inline-block';
                                            if (selectedValues.length == 1){
                                                selectedList.style.height = '40px';
                                            }
                                            else{
                                                selectedList.style.height = '60px';
                                            }
                                            selectedList.appendChild(selectedListItem);

                                            // Create remove option cross mark
                                            const removeOption = document.createElement('span');
                                            removeOption.textContent = 'X';
                                            removeOption.style.float = 'right';
                                            removeOption.style.marginRight = '5px';
                                            removeOption.style.color = 'black';
                                            removeOption.style.marginTop = '3px';
                                            removeOption.style.fontSize = '10px';
                                            removeOption.id=selectedOptionId+'removeOption'+'ForContactMultiselect'
                                            removeOption.classList.add('remove-option');

                                            removeOption.addEventListener('click', function () {
                                                removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                                            });

                                            // Create remove option circle
                                            const removeOptionCircle = document.createElement('span');
                                            removeOptionCircle.classList.add('remove-option-circle');

                                            // Append the removeOptionCircle to the removeOption
                                            removeOption.appendChild(removeOptionCircle);

                                            // Add hover styling to the removeOption element
                                            removeOption.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#f3dbdb';
                                                removeOptionCircle.style.display = 'inline-block';
                                            });
                                            
                                            removeOption.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = '#E8E8E8';
                                                removeOptionCircle.style.display = 'none';
                                            });

                                            selectedListItem.appendChild(removeOption);
                                        }
                                        else{
                                            document.getElementById('ForContactMultiselect'+contactFieldKey + 'checkbox' + selectedOptionId.replace('ForContactMultiselect'+contactFieldKey, '')).checked = false;
                                            const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption'+'ForContactMultiselect');
                                            if (removeOptionButton){
                                                removeOptionButton.click();
                                            }
                                        }
                                    }

                                    

                                    // Remove selected option
                                    function removeSelectedOption(option, listItem, selectedOptionId) {
                                        // Remove from the tracking array
                                        delete defaultSelectedOptions[contactFieldKey+'ForContact'][selectedOptionId];
                                        // console.log(fieldsVisibleOnExtensionForContact[contactFieldKey]);
                                        fieldsVisibleOnExtensionForContact[contactFieldKey] = [];
                                        for (let key in defaultSelectedOptions[contactFieldKey+'ForContact']){
                                            fieldsVisibleOnExtensionForContact[contactFieldKey].push(defaultSelectedOptions[contactFieldKey+'ForContact'][key]);
                                        }

                                        if( flagForNestedCustomFields ){
                                            parentOptionSelected(contactFieldObject, contactFieldKey, fieldsVisibleOnExtensionForContact[contactFieldKey], contactEntityTypeId);
                                        }
                                        
                                        // Remove the list item from the selected list
                                        listItem.remove();

                                        if (fieldsVisibleOnExtensionForContact[contactFieldKey].length == 0){
                                            document.getElementById(contactFieldKey + 'SelectedOptionContainerForContactMultiselect').style.display = 'none';
                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = null;
                                        }
                                        
                                        const correspondingCheckbox = document.getElementById(selectedOptionId.replace(contactFieldKey, contactFieldKey+'checkbox'));
                                        if (correspondingCheckbox){
                                            correspondingCheckbox.checked = false;
                                        }
                                    }

                                    
                                }

                                else if (contactFieldObject["type"] == 'checkbox'){
                                    // Get the container element where the checkbox will be added
                                    const checkboxContainer = document.getElementById('checkboxSectionForContact');

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.id = contactFieldKey + 'ContactnestedDivId';
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label rightCheckbox");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = contactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = contactFieldKey + 'ContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = contactFieldKey + 'ContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + contactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (contactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = contactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    outerDivContiner.appendChild(headingOfField);

                                    // Create the checkbox element
                                    const checkboxElement = document.createElement('input');
                                    checkboxElement.type = 'checkbox';
                                    checkboxElement.id = contactFieldKey+'ForContact';
                                    checkboxElement.setAttribute('style', 'margin-bottom:15px;');

                                    // Add a change event listener to the checkbox element
                                    checkboxElement.addEventListener('change', (event) => {
                                        // Get the checked state of the checkbox element
                                        const isChecked = event.target.checked;
                                        
                                        let checkBoxvalue = '';
                                        // Save the checked state in the JavaScript object
                                        if (isChecked){
                                            // set the error message visibility to none
                                            document.getElementById(contactFieldKey + 'ContactErrorMessage').style.display = 'none';

                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = '1';
                                            checkBoxvalue = 'Yes';
                                        }
                                        else{
                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = '0';
                                            checkBoxvalue = 'No';
                                        }

                                        if(flagForNestedCustomFields){
                                            parentOptionSelected(contactFieldObject, contactFieldKey, checkBoxvalue, contactEntityTypeId);
                                        }
                                    });

                                    fieldsVisibleOnExtensionForContact[contactFieldKey] = '0';

                                    // Add the checkbox element to the container element
                                    outerDivContiner.appendChild(checkboxElement);
                                    outerDivContiner.appendChild(errorMessage);
                                    checkboxContainer.appendChild(outerDivContiner);
                                    if(flagForNestedCustomFields){
                                        parentOptionSelected(contactFieldObject, contactFieldKey, 'No', contactEntityTypeId);
                                    }
                                }

                                else if (contactFieldObject['type'] == 'date'){
                                    // Get the container element where the date input will be added
                                    const dateContainer = document.getElementById('dateSectionForContact');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = contactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = contactFieldKey + 'ContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = contactFieldKey + 'ContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + contactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (contactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = contactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    dateContainer.appendChild(headingOfField);
                                    dateContainer.appendChild(errorMessage);

                                    // Create the date input element
                                    const dateElement = document.createElement('input');
                                    dateElement.type = 'date';
                                    dateElement.id = contactFieldKey+'ForContact';
                                    dateElement.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border: 1px #E8E8E8 solid; border-radius: 5px; color: #777; padding-left: 5px; text-transform: uppercase; ');

                                    // Add a change event listener to the date input element
                                    dateElement.addEventListener('change', (event) => {
                                        // Get the selected date from the date input element
                                        const selectedDate = new Date(event.target.value);

                                        // set the error message visibility to none
                                        document.getElementById(contactFieldKey + 'ContactErrorMessage').style.display = 'none';
                                        
                                        // Get the UNIX timestamp of the selected date
                                        const timestamp = selectedDate.getTime() / 1000;

                                        // change the color to black
                                        dateElement.style.color = 'black';
                                        if(flagForStandardDateField){
                                            var date = new Date(timestamp*1000);
                                            // var dat = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear();
                                            var month  = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1)));
                                            var dat = ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) ;
                                            var year = date.getFullYear();

                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = ''+year+'-'+month+'-'+dat;
                                        }else{
                                            // Save the UNIX timestamp in the JavaScript object
                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = timestamp;
                                        }
                                        

                                        if (selectedDate == 'Invalid Date'){
                                            dateElement.style.color = '#777';
                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = null;
                                        }
                                        
                                    });

                                    // Add the date input element to the container element
                                    dateContainer.appendChild(dateElement);
                                    fieldsVisibleOnExtensionForContact[contactFieldKey] = null;
                                }

                                else if (contactFieldObject['type'] == 'date_time'){
                                    // Get the container element where the date time input will be added
                                    const dateContainer = document.getElementById('dateTimeSectionForContact');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = contactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = contactFieldKey + 'ContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = contactFieldKey + 'ContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + contactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (contactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = contactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    dateContainer.appendChild(headingOfField);
                                    dateContainer.appendChild(errorMessage);

                                    // Create the date input element
                                    const dateElement = document.createElement('input');
                                    dateElement.type = 'datetime-local';
                                    dateElement.id = contactFieldKey+'ForContact';
                                    dateElement.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border: 1px #E8E8E8 solid; border-radius: 5px; color: #777; padding-left: 5px; text-transform: uppercase; ');

                                    // Add a change event listener to the date input element
                                    dateElement.addEventListener('change', (event) => {
                                        // Get the selected date from the date input element
                                        const selectedDate = new Date(event.target.value);

                                        // set the error message visibility to none
                                        document.getElementById(contactFieldKey + 'ContactErrorMessage').style.display = 'none';
                                        
                                        // Get the UNIX timestamp of the selected date
                                        const timestamp = selectedDate.getTime() / 1000;

                                        // change the color to black
                                        dateElement.style.color = 'black';
                                        
                                        // Save the UNIX timestamp in the JavaScript object
                                        fieldsVisibleOnExtensionForContact[contactFieldKey] = timestamp;
                                    

                                        if (selectedDate == 'Invalid Date'){
                                            dateElement.style.color = '#777';
                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = null;
                                        }
                                        
                                    });

                                    // Add the date input element to the container element
                                    dateContainer.appendChild(dateElement);
                                    fieldsVisibleOnExtensionForContact[contactFieldKey] = null;
                                }


                                else if (contactFieldObject['type'] == "number" || contactFieldObject['type'] == "decimal"){
                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = contactFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = contactFieldKey + 'ContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = contactFieldKey + 'ContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + contactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (contactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = contactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'number';
                                    inputContainer.id = contactFieldKey+'ForContact';
                                    inputContainer.setAttribute('style', 'width:95%; ');
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');

                                    inputContainer.addEventListener("keydown", function(event) {
                                        if (event.key === 'e' || event.key === 'E' || event.key === '+') {
                                            event.preventDefault();
                                        }
                                    });

                                    inputContainer.step = "0.01";
                                    inputContainer.addEventListener("input", () => {
                                        let value = inputContainer.value;

                                        // set the error message visibility to none
                                        document.getElementById(contactFieldKey + 'ContactErrorMessage').style.display = 'none';

                                        const parts = value.split('.');
                                        if (parts.length == 2 && parts[1].length > 2){
                                            parts[1] = parts[1].slice(0, 2);
                                            inputContainer.value = parts.join('.');
                                        }
                                    });

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForContact.appendChild(outerDivContiner);
                    
                                }else if (flagForFileCustomField && contactFieldObject['type'] == 'file'){
                                    
                                    // Get the container element where the file input will be added
                                    const fileContainer = document.getElementById('fileContainerForContact');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = contactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = contactFieldKey + 'ContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = contactFieldKey + 'ContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + contactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (contactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = contactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    fileContainer.appendChild(headingOfField);
                                    fileContainer.appendChild(errorMessage);

                                    // Create the file input element
                                    const fileElement = document.createElement('input');
                                    fileElement.type = 'file';
                                    fileElement.id = contactFieldKey+'ForContact';
                                    fileElement.setAttribute('style', 'margin-bottom:10px; border: 1px #E8E8E8 solid; font-size: 13px; display: none;');

                                    // Create the label element
                                    var label = document.createElement('label');
                                    label.setAttribute('for', contactFieldKey+'ForContact');
                                    label.setAttribute('id', contactFieldKey+'ForContact' + 'label');
                                    label.setAttribute('style', 'display: inline-block; border: 1px solid #E8E8E8; background-color: white; cursor: pointer; width: 95%; height: 25px; margin-bottom: 10px; border-radius: 5px;');

                                    // Create the span element for the text
                                    var span = document.createElement('span');
                                    span.setAttribute('id', contactFieldKey+'ForContact' + 'span');
                                    span.setAttribute('style', 'padding-right: 5px; padding-left: 5px; ');
                                    span.textContent = 'Upload File';

                                    // Create the icon element
                                    var icon = document.createElement('i');
                                    icon.setAttribute('class', 'mdi mdi-upload mdi-13px'); // Add your desired icon class here

                                    // Append the span and icon elements to the label
                                    label.appendChild(span);
                                    label.appendChild(icon);

                                    fileElement.addEventListener('change', (event) => {
                                        const uploadedFile = event.target.files[0];
            
                                        if (uploadedFile) {
                                            let nameOfFile = uploadedFile.name;

                                            // set the error message visibility to none
                                            document.getElementById(contactFieldKey + 'ContactErrorMessage').style.display = 'none';

                                            if (nameOfFile.length < 28){
                                                // span.textContent = nameOfFile;
                                                document.getElementById(contactFieldKey+'ForContact' + 'span').textContent = nameOfFile;
                                                document.getElementById(contactFieldKey+'ForContact' + 'span').style.color = 'black';
                                            }
                                            else {
                                                nameOfFile = nameOfFile.split('.');
                                                let firstHalfName = nameOfFile[0]?.slice(0, 25);
                                                let completeName = firstHalfName + '.. .' + nameOfFile[nameOfFile.length - 1];
                                                // span.textContent = completeName;
                                                document.getElementById(contactFieldKey+'ForContact' + 'span').textContent = completeName;
                                                document.getElementById(contactFieldKey+'ForContact' + 'span').style.color = 'black';
                                            }
                                            
                                        } else {
                                            span.textContent = 'Upload File';
                                            document.getElementById(contactFieldKey+'ForContact' + 'span').style.color = '';
                                        }
                                        fieldsVisibleOnExtensionForContact[contactFieldKey] = uploadedFile ? uploadedFile : '';

                                    });

                                    // Add the file input element to the container element
                                    fileContainer.appendChild(fileElement);
                                    fileContainer.appendChild(label);
                                    fileTypeCustomFieldsForContact.push(contactFieldKey);
                                } 
                                
                                else if (isEntityTypeField(contactFieldObject['type'])){
                                    const parentContainerMultiselect = document.getElementById('multiselectDataSectionForContact');
                                    renderEntityTypeField(contactFieldObject, contactFieldKey, contactEntityTypeId, parentContainerMultiselect)
                                }

                                if(contactFieldObject['field'] == 'stageid'){
                                    const stages = response.data.contact_stages;
                                    let default_stage_id = -1;
                                    let lead_stage_id = -1;
                                    let options = [];
                                    let stageOptions = [...[
                                        {
                                            id : 0,
                                            accountid : 0,
                                            default : 0,
                                            label : 'Select an option',
                                            sequenceno : 0
                                        }
                                    ], ...stages];
                                    
                                    stages.forEach(function(o){
                                        options[o.id] = o.label
                                        total_elem=+1;
                                        if(o.default){
                                            default_stage_id = o.id;
                                        }
                                        if(o.label == 'Lead'){
                                            lead_stage_id = o.id;
                                        }
                                    })
                                    // if(!flagForSearchableDropdown){
                                        options[0] = 'Select an option';
                                    // }
                                    const container = document.getElementById("contactStages");

                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px; display: inline-block;');
                                    headingOfField.innerHTML = contactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = contactFieldKey + 'ContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = contactFieldKey + 'ContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + contactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (contactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = contactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }


                                    container.appendChild(headingOfField);
                                    container.appendChild(errorMessage);
                                    if(flagForSearchableDropdown){
                                        //block to show the button to view components
                                        let containerToShowDropdownOption = document.createElement('div');
                                        containerToShowDropdownOption.id = contactFieldKey + 'OuterContainerForOptionsForContact';
                                        containerToShowDropdownOption.style.width = 95 + '%';
                                        let buttonToShowDropdownOption = document.createElement('div');
                                        buttonToShowDropdownOption.id = contactFieldKey + 'buttonForContact';
                                        buttonToShowDropdownOption.innerHTML = "Select from List";
                                        containerToShowDropdownOption.appendChild(buttonToShowDropdownOption);

                                        // input component for search
                                        let searchInput = document.createElement('input');
                                        searchInput.setAttribute('type', 'text');
                                        searchInput.setAttribute('id', contactFieldKey + 'searchForContact');
                                        searchInput.setAttribute('placeholder', 'Please Search & Select');
                                        searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                        searchInput.setAttribute('class', 'rcrm-ctrl');

                                        // block to show the option container
                                        let containerDropdownOption = document.createElement('div');
                                        containerDropdownOption.id = contactFieldKey + 'OptionsOuterContainerForContact';
                                        let dropdownOption = document.createElement('ul');
                                        dropdownOption.id = contactFieldKey + 'optionsForContact';
                                        dropdownOption.setAttribute('style', 'list-style: none;');
                                        containerDropdownOption.appendChild(searchInput);
                                        containerDropdownOption.appendChild(dropdownOption);

                                        searchInput.addEventListener('input', function(e){
                                            let matchesCount = 0;
                                            let searchValue = e.target.value.trim();
                                            let optionsList = dropdownOption;

                                            optionsList.innerHTML = '';
                                            for (let option in stageOptions){
                                                if (stageOptions[option].label.toLowerCase().includes(searchValue.toLowerCase())){
                                                    const li = document.createElement('li');
                                                    li.textContent = stageOptions[option].label;
                                                    li.id = contactFieldKey + stageOptions[option].id;
                                                    li.addEventListener('click', handleOptionClickForContactStages);
                                                    li.style.cursor = 'pointer';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    optionsList.appendChild(li);
                                                    matchesCount += 1;

                                                    li.addEventListener('mouseover', function () {
                                                        li.style.backgroundColor = '#f5f5f5';
                                                    });

                                                    li.addEventListener('mouseout', function () {
                                                        li.style.backgroundColor = 'white';
                                                    });
                                                }
                                            }

                                            if (matchesCount == 0){
                                                const li = document.createElement('li');
                                                li.textContent = 'No Results Found';
                                                li.style.marginBottom = '5px';
                                                li.style.padding = '5px';
                                                li.style.color = 'black';
                                                li.style.backgroundColor = '#E8E8E8';
                                                li.style.border = '1px solid #F8FAFB';
                                                optionsList.appendChild(li);
                                            }

                                            if ( matchesCount < 5 ) {
                                                optionsList.style.height = 'auto';
                                                optionsList.style.overflowY = 'hidden';
                                            }

                                            else {
                                                optionsList.style.height = '200px';
                                                optionsList.style.overflowY = 'scroll';
                                            }

                                            matchesCount = 0;
                                        });
                                        
                                        // Add event listener for keydown event to prevent Enter key press
                                        searchInput.addEventListener('keydown', function(e) {
                                            if (e.key === 'Enter') {
                                                e.preventDefault();
                                            }
                                        });

                                        container.appendChild(containerToShowDropdownOption);
                                        container.appendChild(containerDropdownOption);
                                        
                                        const optionsList = dropdownOption;
                                        const toggleButton = buttonToShowDropdownOption;

                                        // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                        
                                        if (stages.length > 5){
                                            optionsList.style.height = '200px';
                                            optionsList.style.overflowY = 'scroll';
                                        }

                                        toggleButton.style.cursor = 'pointer';
                                        toggleButton.style.padding = '3px';
                                        toggleButton.style.border = '1px solid #E8E8E8';
                                        toggleButton.style.height = '30px';
                                        toggleButton.style.marginBottom = '5px';
                                        toggleButton.style.borderRadius = '5px';
                                        toggleButton.style.paddingLeft = '5px';


                                        // Set CSS properties dynamically on the Dropdown Options Container
                                        containerDropdownOption.style.display = 'none';
                                        containerDropdownOption.style.border = '1px solid #E8E8E8';
                                        containerDropdownOption.style.padding = '10px';
                                        containerDropdownOption.style.marginBottom = '5px';
                                        containerDropdownOption.style.borderRadius = '5px';

                                        // Set toggle button click event
                                        toggleButton.addEventListener('click', toggleOptionsContainerForContactStages);

                                        // Toggle options container visibility
                                        function toggleOptionsContainerForContactStages() {
                                            document.getElementById(contactFieldKey + 'OptionsOuterContainerForContact').style.display = document.getElementById(contactFieldKey + 'OptionsOuterContainerForContact').style.display === 'none' ? 'block' : 'none';
                                        }

                                        // dropdown data
                                        const data = stageOptions;

                                        // Generate options dynamically
                                        data.forEach((option, index) => {
                                            const li = document.createElement('li');
                                            li.textContent = option.label;
                                            li.id = contactFieldKey + option.id;
                                            li.addEventListener('click', handleOptionClickForContactStages);

                                            // Attach CSS properties dynamically
                                            li.style.cursor = 'pointer';
                                            li.style.marginBottom = '5px';
                                            li.style.padding = '5px';
                                            li.style.color = 'black';

                                            li.addEventListener('mouseover', function () {
                                                li.style.backgroundColor = '#f5f5f5';
                                            });

                                            li.addEventListener('mouseout', function () {
                                                li.style.backgroundColor = 'white';
                                            });

                                            optionsList.appendChild(li);
                                        });


                                        function handleOptionClickForContactStages(e) {
                                            const selectedOption = e.target.textContent;
                                            let idOfTheLabel = e.target.id;
                                            const idIntegerPart=idOfTheLabel.substring(7);
                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = idIntegerPart;
                                            const labelComponenet = document.getElementById(contactFieldKey + 'buttonForContact');
                                            labelComponenet.textContent = selectedOption;
                                            labelComponenet.style.color = 'black';
                                            toggleOptionsContainerForContactStages();
                                        }
                                        // var allOptionsUl = document.getElementById('stageidoptionsForContact');
                                        // var allOptionsLi=allOptionsUl.querySelectorAll('li');
                                        // let is_default_stage_set = false;
                                        const defaultStage = document.getElementById('stageidoptionsForContact').querySelector(`li[id="${'stageid'+default_stage_id}"]`);
                                        const leadStage = document.getElementById('stageidoptionsForContact').querySelector(`li[id="${'stageid'+lead_stage_id}"]`);
                                        
                                        if(leadStage){
                                            document.getElementById(contactFieldKey + 'buttonForContact').textContent=leadStage.textContent;
                                            const labelComponenet=document.getElementById(contactFieldKey + 'buttonForContact');
                                            labelComponenet.textContent=leadStage.textContent;
                                            labelComponenet.style.color = 'black';
                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = lead_stage_id;
                                            fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] = lead_stage_id;
                                        }
                                        if(flagForDefaultContactStage){       
                                            if(defaultStage){
                                                const labelComponenet=document.getElementById(contactFieldKey + 'buttonForContact');
                                                labelComponenet.textContent=defaultStage.textContent;
                                                labelComponenet.style.color = 'black';
                                                fieldsVisibleOnExtensionForContact[contactFieldKey] = default_stage_id;
                                                fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] = default_stage_id;
                                            }
                                        }
                                        if(!leadStage && !(flagForDefaultContactStage&&defaultStage)){
                                            const labelComponenet=document.getElementById(contactFieldKey + 'buttonForContact');
                                                labelComponenet.textContent="Select an Option"
                                                labelComponenet.style.color = 'black';
                                                fieldsVisibleOnExtensionForContact[contactFieldKey] =0;
                                                fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] =0;
                                        }
                                    }
                                    else{
                                         // Create the dropdown dropdown
                                        const select = document.createElement("select");
                                        select.id = contactFieldKey + 'ForContact';
                                        select.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border-color: #E8E8E8; font-size: 13px; font-weight: 400; border-radius: 5px; color: black; padding-left: 1px; ');
                                    
                                
                                    // Create the options with checkboxes
                                    for (let opt in stageOptions) {
                                        const checkbox = document.createElement("input");
                                        checkbox.type = "checkbox";
                                        checkbox.value = stageOptions[opt].label;
                                        checkbox.id = stageOptions[opt].id;
                                    
                                        const label = document.createElement("label");
                                        label.textContent = stageOptions[opt].label;
                                        label.htmlFor = stageOptions[opt].label;
                                        label.id = stageOptions[opt].id;
                                        const optionContainer = document.createElement("option");
                                        optionContainer.id = stageOptions[opt].id;
                                        optionContainer.appendChild(label);
                                        select.appendChild(optionContainer);
                                        select.appendChild(checkbox);
                                    
                                    }
                                
                                    container.appendChild(select);

                                    //set default contact stage if any otherwise set Lead as deafult else dont set
                                    
                                    var allOptions = document.getElementById('stageidForContact').options;
                                    let is_default_stage_set = false;

                                    const defaultStage = document.getElementById('stageidForContact').querySelector(`option[id="${default_stage_id}"]`);
                                    const leadStage = document.getElementById('stageidForContact').querySelector(`option[id="${lead_stage_id}"]`);

                                    if(leadStage){
                                        leadStage.selected = true;
                                        fieldsVisibleOnExtensionForContact[contactFieldKey] = lead_stage_id;
                                        fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] = lead_stage_id;
                                    }

                                    if(flagForDefaultContactStage){       
                                        if(defaultStage){
                                            defaultStage.selected = true;
                                            fieldsVisibleOnExtensionForContact[contactFieldKey] = default_stage_id;
                                            fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] = default_stage_id;
                                        }
                                    }
                                    
                                    // Event listener to capture selected values
                                    select.addEventListener("change", (event) => {

                                        // set the error message visibility to none
                                        document.getElementById(contactFieldKey + 'ContactErrorMessage').style.display = 'none';
                                        
                                        const selectedOptions = [...event.target.selectedOptions].map((option) => option.getElementsByTagName('label')[0].id);
                                        fieldsVisibleOnExtensionForContact[contactFieldKey] = selectedOptions[0];
                                        select.style.color = 'black';
            
                                    });
                                    }
                                   
                                    

                                    
                                    
                                }

                            }
                        }

                        //company's contact fields starts here
                        document.getElementById('multiselectDataSectionForCompanyContact').innerHTML = '';
                        document.getElementById('dropDownDataSectionForCompanyContact').innerHTML = '';
                        document.getElementById('checkboxSectionForCompanyContact').innerHTML = '';
                        document.getElementById('dateSectionForCompanyContact').innerHTML = '';
                        document.getElementById('textFieldsContainerForCompanyContact').innerHTML = '';
                        document.getElementById('longTextFieldsContainerForCompanyContact').innerHTML = '';
                        document.getElementById('fileContainerForCompanyContact').innerHTML = '';
                        document.getElementById('companyIndustries').innerHTML = '';
                        document.getElementById('dateTimeSectionForCompanyContact').innerHTML = '';
                        companyContactColumns = contactColumns;
                        for (let companyContactFieldKey in companyContactColumns){
                            let companyContactFieldObject = companyContactColumns[companyContactFieldKey];
                            let element = '';
                            let subTag = document.createElement("div");
                            let textFieldsContainerForCompanyContact = document.getElementById('textFieldsContainerForCompanyContact');
                            let canRenderField = canRenderCustomField(companyContactEntityTypeId, companyContactFieldObject['custom_field_id'], companyContactFieldKey);

                            if (companyContactFieldObject["show_on_extension"] && companyContactFieldObject["show_on_extension"] == true && !defaultExtensionFieldsForContact.includes(companyContactFieldKey) && (!flagForNestedCustomFields || (flagForNestedCustomFields && canRenderField))){
                                // check the type of field. 
                                // language and proficiency 
                                
                                if (companyContactFieldObject['type'] == 'text' || companyContactFieldObject['type'] == 'phonenumber' || companyContactFieldObject['type'] == 'social_profile'){

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = companyContactFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = companyContactFieldKey + 'CompanyContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyContactFieldKey + 'CompanyContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyContactFieldObject['label'] + ' field is required';

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'text';
                                    inputContainer.id = companyContactFieldKey+'ForCompanyContact';
                                    inputContainer.style.width = '95%';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForCompanyContact.appendChild(outerDivContiner);
                                }

                                else if (companyContactFieldObject['type'] == 'email'){

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = companyContactFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = companyContactFieldKey + 'CompanyContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyContactFieldKey + 'CompanyContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyContactFieldObject['label'] + ' field is required';

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'email';
                                    inputContainer.id = companyContactFieldKey+'ForCompanyContact';
                                    inputContainer.style.width = '95%';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');
                                    inputContainer.setAttribute('maxlength', "40");

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForCompanyContact.appendChild(outerDivContiner);
                                }

                                else if (companyContactFieldObject['type'] == 'longtext'){

                                    textFieldsContainerForCompanyContact = document.getElementById('longTextFieldsContainerForCompanyContact');

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = companyContactFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = companyContactFieldKey + 'CompanyContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyContactFieldKey + 'CompanyContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyContactFieldObject['label'] + ' field is required';

                                    let inputContainer = document.createElement('textarea');
                                    inputContainer.type = 'text';
                                    inputContainer.id = companyContactFieldKey+'ForCompanyContact';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');
                                    inputContainer.setAttribute('style', 'height: 30px;width: 95%; border: 1px #E8E8E8 solid;margin-top: 5px; padding: 5px; font-size: 13px; border-radius: 5px;');

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForCompanyContact.appendChild(outerDivContiner);
                                }

                                else if (companyContactFieldObject['type'] == 'dropdown' && companyContactFieldObject['field']!='companyid' && companyContactFieldObject['field']!='stageid'){
                                    let options = [];
                                    options = companyContactFieldObject['data'].map(object => object.label);
                                    if(!flagForSearchableDropdown){
                                        options.unshift('Select an option');
                                    }
                                
                                    const container = document.getElementById("dropDownDataSectionForCompanyContact");

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.id = companyContactFieldKey + 'CompanyContactnestedDivId';
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px; display: inline-block;');
                                    headingOfField.innerHTML = companyContactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = companyContactFieldKey + 'CompanyContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyContactFieldKey + 'CompanyContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyContactFieldObject['label'] + ' field is required';

                                    outerDivContiner.appendChild(headingOfField);
                                    outerDivContiner.appendChild(errorMessage);
                                
                                    if(flagForSearchableDropdown){
                                        //block to show the button to view components
                                        let containerToShowDropdownOption = document.createElement('div');
                                        containerToShowDropdownOption.id = companyContactFieldKey + 'OuterContainerForOptionsForCompanyContactDropDown';
                                        containerToShowDropdownOption.style.width = 95 + '%';
                                        containerToShowDropdownOption.style.overflow = 'hidden';
                                        let buttonToShowDropdownOption = document.createElement('div');
                                        buttonToShowDropdownOption.id = companyContactFieldKey + 'buttonForCompanyContactDropDown';
                                        buttonToShowDropdownOption.innerHTML = "Select from List";
                                        containerToShowDropdownOption.appendChild(buttonToShowDropdownOption);

                                        // input component for search
                                        let searchInput = document.createElement('input');
                                        searchInput.setAttribute('type', 'text');
                                        searchInput.setAttribute('id', companyContactFieldKey + 'searchForCompanyContactDropDown');
                                        searchInput.setAttribute('placeholder', 'Please Search & Select');
                                        searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                        searchInput.setAttribute('class', 'rcrm-ctrl');

                                        // block to show the option container
                                        let containerDropdownOption = document.createElement('div');
                                        containerDropdownOption.id = companyContactFieldKey + 'OptionsOuterContainerForCompanyContactDropDown';
                                        let dropdownOption = document.createElement('ul');
                                        dropdownOption.id = companyContactFieldKey + 'options';
                                        dropdownOption.setAttribute('style', 'list-style: none;');
                                        containerDropdownOption.appendChild(searchInput);
                                        containerDropdownOption.appendChild(dropdownOption);

                                        searchInput.addEventListener('input', function(e){
                                            let matchesCount = 0;
                                            let searchValue = e.target.value.trim();
                                            let optionsList = dropdownOption;

                                            optionsList.innerHTML = '';
                                            for (let option of options){
                                                if (option.toLowerCase().includes(searchValue.toLowerCase())){
                                                    const li = document.createElement('li');
                                                    li.textContent = option;
                                                    li.id = companyContactFieldKey + options.indexOf(option);
                                                    li.addEventListener('click', handleOptionClickCompanyContact);
                                                    li.style.cursor = 'pointer';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    optionsList.appendChild(li);
                                                    matchesCount += 1;

                                                    li.addEventListener('mouseover', function () {
                                                        li.style.backgroundColor = '#f5f5f5';
                                                    });

                                                    li.addEventListener('mouseout', function () {
                                                        li.style.backgroundColor = 'white';
                                                    });
                                                }
                                            }

                                            if (matchesCount == 0){
                                                const li = document.createElement('li');
                                                li.textContent = 'No Results Found';
                                                li.style.marginBottom = '5px';
                                                li.style.padding = '5px';
                                                li.style.color = 'black';
                                                li.style.backgroundColor = '#E8E8E8';
                                                li.style.border = '1px solid #F8FAFB';
                                                optionsList.appendChild(li);
                                            }

                                            if ( matchesCount < 5 ) {
                                                optionsList.style.height = 'auto';
                                                optionsList.style.overflowY = 'hidden';
                                            }

                                            else {
                                                optionsList.style.height = '200px';
                                                optionsList.style.overflowY = 'scroll';
                                            }

                                            matchesCount = 0;
                                        });
                                        
                                        // Add event listener for keydown event to prevent Enter key press
                                        searchInput.addEventListener('keydown', function(e) {
                                            if (e.key === 'Enter') {
                                                e.preventDefault();
                                            }
                                        });

                                        outerDivContiner.appendChild(containerToShowDropdownOption);
                                        outerDivContiner.appendChild(containerDropdownOption);
                                        
                                        const optionsList = dropdownOption;
                                        const toggleButton = buttonToShowDropdownOption;

                                        // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                        if (options.length > 5){
                                            optionsList.style.height = '200px';
                                            optionsList.style.overflowY = 'scroll';
                                        }

                                        toggleButton.style.cursor = 'pointer';
                                        toggleButton.style.padding = '3px';
                                        toggleButton.style.border = '1px solid #E8E8E8';
                                        toggleButton.style.height = '30px';
                                        toggleButton.style.marginBottom = '5px';
                                        toggleButton.style.borderRadius = '5px';
                                        toggleButton.style.paddingLeft = '5px';

                                        // Set CSS properties dynamically on the Dropdown Options Container
                                        containerDropdownOption.style.display = 'none';
                                        containerDropdownOption.style.border = '1px solid #E8E8E8';
                                        containerDropdownOption.style.padding = '10px';
                                        containerDropdownOption.style.marginBottom = '5px';
                                        containerDropdownOption.style.borderRadius = '5px';

                                        // Set toggle button click event
                                        toggleButton.addEventListener('click', toggleOptionsContaineCompanyContact);

                                        // Toggle options container visibility
                                        function toggleOptionsContaineCompanyContact() {
                                            document.getElementById(companyContactFieldKey + 'OptionsOuterContainerForCompanyContactDropDown').style.display = document.getElementById(companyContactFieldKey + 'OptionsOuterContainerForCompanyContactDropDown').style.display === 'none' ? 'block' : 'none';
                                        }

                                        // dropdown data
                                        const data = options;

                                        // Generate options dynamically
                                        data.forEach((option, index) => {
                                            const li = document.createElement('li');
                                            li.textContent = option;
                                            li.id = companyContactFieldKey + index;
                                            li.addEventListener('click', handleOptionClickCompanyContact);

                                            // Attach CSS properties dynamically
                                            li.style.cursor = 'pointer';
                                            li.style.marginBottom = '5px';
                                            li.style.padding = '5px';
                                            li.style.color = 'black';

                                            li.addEventListener('mouseover', function () {
                                                li.style.backgroundColor = '#f5f5f5';
                                            });

                                            li.addEventListener('mouseout', function () {
                                                li.style.backgroundColor = 'white';
                                            });

                                            optionsList.appendChild(li);
                                        });

                                        //adding span tag to clear selected option
                                        // const removeOption = document.createElement('span');
                                        //     removeOption.textContent = 'X';
                                        //     removeOption.style.float = 'right';
                                        //     removeOption.style.marginRight = '5px';
                                        //     removeOption.style.color = 'black';
                                        //     removeOption.style.marginTop = '3px';
                                        //     removeOption.style.fontSize = '10px';

                                        //     removeOption.classList.add('remove-option');

                                        //     removeOption.addEventListener('click', function () {
                                        //         fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = '';
                                        //         const labelComponenet = document.getElementById(companyContactFieldKey + 'buttonForCompanyContactDropDown');
                                        //         labelComponenet.textContent = 'Select from List';
                                        //         buttonToShowDropdownOption.style.color = '#777';
                                        //         toggleOptionsContaineCompanyContact();
                                        //     });

                                        function handleOptionClickCompanyContact(e) {
                                            const selectedOption = e.target.textContent;
                                            let idOfTheLabel = selectedOption;

                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = idOfTheLabel;
                                            if( flagForNestedCustomFields ){
                                                parentOptionSelected(companyContactFieldObject, companyContactFieldKey, idOfTheLabel, companyContactEntityTypeId);
                                            }
                                            const labelComponenet = document.getElementById(companyContactFieldKey + 'buttonForCompanyContactDropDown');
                                            labelComponenet.textContent = selectedOption;
                                            labelComponenet.style.color = 'black';
                                            // buttonToShowDropdownOption.append(removeOption);
                                            toggleOptionsContaineCompanyContact();
                                        }
                                        
                                    }
                                    else{
                                        // Create the dropdown dropdown

                                        const select = document.createElement("select");
                                        select.id = companyContactFieldKey + 'ForCompanyContact';
                                        select.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border-color: #E8E8E8; font-size: 13px; font-weight: 400; border-radius: 5px; color: #777; padding-left: 1px; ');
                                        let index = 0;
                                        
                                    // Create the options with checkboxes
                                    for (let option of options) {
                                        const checkbox = document.createElement("input");
                                        checkbox.type = "checkbox";
                                        checkbox.value = option;
                                        checkbox.id = companyContactFieldKey + index;
                                    
                                        const label = document.createElement("label");
                                        label.textContent = option;
                                        label.htmlFor = option;
                                    
                                        const optionContainer = document.createElement("option");
                                        optionContainer.appendChild(label);
                                        select.appendChild(optionContainer);
                                        select.appendChild(checkbox);
                                        index += 1 ;
                                    }
                                
                                    outerDivContiner.appendChild(select);
                                
                                    // Event listener to capture selected values
                                    select.addEventListener("change", (event) => {
                                        const selectedOptions = [...event.target.selectedOptions].map((option) => option.value);
                                        if (selectedOptions[0] == 'Select an option'){
                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = '';
                                            select.style.color = '#777';
                                        }
                                        else {
                                            // set the error message visibility to none
                                            document.getElementById(companyContactFieldKey + 'CompanyContactErrorMessage').style.display = 'none';

                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = selectedOptions;
                                            select.style.color = 'black';
                                        }
                                    });
                                }
                                    container.appendChild(outerDivContiner);
                                    dropdownCustomFieldsForCompanyContact.push(companyContactFieldKey);
                                    if(flagForNestedCustomFields){
                                        parentOptionSelected(companyContactFieldObject, companyContactFieldKey, '', companyContactEntityTypeId);
                                    }

                                }
                                
                                else if (companyContactFieldObject['type'] == 'multiselect'){
                                    const options = companyContactFieldObject['data'].map(object => object.label);
                                    // create dynamically the outer container 
                                    const parentContainerMultiselect = document.getElementById('multiselectDataSectionForCompanyContact'); 

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.id = companyContactFieldKey + 'CompanyContactnestedDivId';
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = companyContactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = companyContactFieldKey + 'CompanyContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyContactFieldKey + 'CompanyContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyContactFieldObject['label'] + ' field is required';

                                    outerDivContiner.appendChild(headingOfField);
                                    outerDivContiner.appendChild(errorMessage);

                                    // it will store the id and value of the selected options
                                    const selectedOptions = {};
                                    defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact'] = {};
                                    multiselectCustomFieldsForCompanyContact.push(companyContactFieldKey);

                                    // block to show the button to view options
                                    
                                    var containerToShowMultiselectOption = document.createElement('div');
                                    containerToShowMultiselectOption.id = companyContactFieldKey + 'OuterContainerForOptionsForCompanyContactMultiselect';
                                    var buttonToShowMultiselectOption = document.createElement('div');
                                    buttonToShowMultiselectOption.id = companyContactFieldKey + 'buttonForCompanyContactMultiselect';
                                    buttonToShowMultiselectOption.innerHTML = "Select from List";
                                    containerToShowMultiselectOption.appendChild(buttonToShowMultiselectOption);

                                    // block to show the option container
                                    let searchInput = null;
                                    if (flagForSearchableDropdown){
                                        // input component for search
                                        searchInput = document.createElement('input');
                                        searchInput.setAttribute('type', 'text');
                                        searchInput.setAttribute('id', companyContactFieldKey + 'searchForCompanyContactMultiselect');
                                        searchInput.setAttribute('placeholder', 'Please Search & Select');
                                        searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                        searchInput.setAttribute('class', 'rcrm-ctrl');
                                    }
                                    
                                    var containerMultiselectOption = document.createElement('div');
                                    containerMultiselectOption.id = companyContactFieldKey + 'OptionsOuterContainerForCompanyContactMultiselect';
                                    var multiselectOption = document.createElement('ul');
                                    multiselectOption.id = companyContactFieldKey + 'optionsForCompanyContactMultiselect';
                                    multiselectOption.setAttribute('style', 'list-style: none;');
                                    
                                    if (flagForSearchableDropdown){
                                        containerMultiselectOption.appendChild(searchInput);
                                    }
                                    containerMultiselectOption.appendChild(multiselectOption);
                                    
                                    
                                    if (flagForSearchableDropdown){
                                        // when a search is performed we need to manipulate the options list
                                        searchInput.addEventListener('input', function(e){
                                            let searchValue = e.target.value.trim();
                                            let optionsList = document.getElementById(companyContactFieldKey + 'optionsForCompanyContactMultiselect');
                                            let optionsAll=companyContactFieldObject['data'];
                                            let options = optionsAll.map(object => object.label);
                                            let matchesCount = 0;
                                            let counter = 0;
                                            // optionsList.innerHTML = '';

                                            for (let option of options){
                                                if (option.toLowerCase().includes(searchValue.toLowerCase())){ 
                                                    matchesCount += 1;
                                                    document.getElementById('ForCompanyContactMultiselect'+companyContactFieldKey + counter).style.display = 'block';
                                                }
                                                else {
                                                    document.getElementById('ForCompanyContactMultiselect'+companyContactFieldKey + counter).style.display = 'none';
                                                }
                                                counter += 1;
                                            }
                                            
                                            if (matchesCount == 0){
                                                if (!document.getElementById(companyContactFieldKey + 'noResultsForCompanyContactMultiselect')){
                                                    var li = document.createElement('li');
                                                    li.textContent = 'No Results Found';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    li.style.backgroundColor = '#E8E8E8';
                                                    li.id = companyContactFieldKey + 'noResultsForCompanyContactMultiselect';
                                                    li.style.border = '1px solid #F8FAFB';
                                                    optionsList.appendChild(li);
                                                }
                                            }
                                            else if (matchesCount > 0) {
                                                if (document.getElementById(companyContactFieldKey + 'noResultsForCompanyContactMultiselect')){
                                                    optionsList.removeChild(document.getElementById(companyContactFieldKey + 'noResultsForCompanyContactMultiselect'));
                                                }
                                            }

                                            if ( matchesCount < 5 ) {
                                                optionsList.style.height = 'auto';
                                                optionsList.style.overflowY = 'hidden';
                                            }

                                            else {
                                                optionsList.style.height = '200px';
                                                optionsList.style.overflowY = 'scroll';
                                            }

                                            matchesCount = 0;
                                            optionsList = null;
                                        });

                                        // Add event listener for keydown event to prevent Enter key press
                                        searchInput.addEventListener('keydown', function(e) {
                                            if (e.key === 'Enter') {
                                                e.preventDefault();
                                            }
                                        });
                                    }
                                    // block to show the selected options container
                                    var containerMultiselectSelectedOption = document.createElement('div');
                                    containerMultiselectSelectedOption.id = companyContactFieldKey + 'SelectedOptionContainerForCompanyContactMultiselect';
                                    listofmultiselectcolumnForCompanyContact[companyContactFieldKey] = companyContactFieldKey+'SelectedOptionContainerForCompanyContactMultiselect';
                                    var selectedMultiselectOption = document.createElement('ul');
                                    selectedMultiselectOption.setAttribute('style', 'list-style: none;');
                                    selectedMultiselectOption.id = companyContactFieldKey + 'SelectedOptionsForCompanyContactMultiselect';
                                    containerMultiselectSelectedOption.appendChild(selectedMultiselectOption);

                                    outerDivContiner.appendChild(containerToShowMultiselectOption);
                                    outerDivContiner.appendChild(containerMultiselectOption);
                                    outerDivContiner.appendChild(containerMultiselectSelectedOption);
                                    parentContainerMultiselect.appendChild(outerDivContiner);
                                    if(flagForNestedCustomFields){
                                        parentOptionSelected(companyContactFieldObject, companyContactFieldKey, [], companyContactEntityTypeId);
                                    }

                                    // Keep track of selected values
                                    let selectedValues = [];

                                    // Get options list and selected list elements
                                    const optionsList = multiselectOption;
                                    const selectedList = selectedMultiselectOption;
                                    const toggleButton = buttonToShowMultiselectOption;

                                    // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                    if (options.length > 5){
                                        optionsList.style.height = '200px';
                                        optionsList.style.overflowY = 'scroll';
                                    }

                                    selectedList.style.height = '50px';
                                    selectedList.style.overflowY = 'scroll';


                                    // Set CSS properties dynamically on the Multiselect button
                                    toggleButton.style.cursor = 'pointer';
                                    toggleButton.style.padding = '3px';
                                    toggleButton.style.border = '1px solid #E8E8E8';
                                    toggleButton.style.height = '30px';
                                    toggleButton.style.marginBottom = '5px';
                                    toggleButton.style.borderRadius = '5px';
                                    toggleButton.style.paddingLeft = '5px';

                                    // Set CSS properties dynamically on the Multiselect Options Container
                                    containerMultiselectOption.style.display = 'none';
                                    containerMultiselectOption.style.border = '1px solid #E8E8E8';
                                    containerMultiselectOption.style.padding = '10px';
                                    containerMultiselectOption.style.marginBottom = '5px';
                                    containerMultiselectOption.style.borderRadius = '5px';

                                    // Set CSS properties dynamically on the Multiselect Selected container
                                    containerMultiselectSelectedOption.style.display = 'none';
                                    containerMultiselectSelectedOption.style.border = '1px solid #E8E8E8';
                                    containerMultiselectSelectedOption.style.padding = '10px';
                                    containerMultiselectSelectedOption.style.width = '100%';
                                    containerMultiselectSelectedOption.style.borderRadius = '5px';
                                    containerMultiselectSelectedOption.style.marginBottom = '5px';

                                    // Set toggle button click event
                                    toggleButton.addEventListener('click', toggleOptionsContainer);

                                    // Toggle options container visibility
                                    function toggleOptionsContainer() {
                                        document.getElementById(companyContactFieldKey + 'OptionsOuterContainerForCompanyContactMultiselect').style.display = document.getElementById(companyContactFieldKey + 'OptionsOuterContainerForCompanyContactMultiselect').style.display === 'none' ? 'block' : 'none';
                                    }

                                    // Sample data
                                    const data = options;
                                    multiselectCheckboxValueContainer['ForCompanyContactMultiselect'+companyContactFieldKey]={};
                                    // Generate options dynamically
                                    data.forEach((option, index) => {
                                        const li = document.createElement('li');
                                        li.textContent = option;
                                        li.id = 'ForCompanyContactMultiselect'+companyContactFieldKey + index ;
                                        li.addEventListener('click', handleOptionClick);

                                        // Attach CSS properties dynamically
                                        li.style.cursor = 'pointer';
                                        li.style.marginBottom = '5px';
                                        li.style.padding = '5px';
                                        li.style.color = 'black';
                                        li.style.overflow = 'hidden';
                                        // li.style.backgroundColor = '#E8E8E8';

                                        const checkbox=document.createElement('input');
                                        checkbox.type="checkbox";
                                        checkbox.id= 'ForCompanyContactMultiselect'+companyContactFieldKey+'checkbox'+index;
                                        multiselectCheckboxValueContainer['ForCompanyContactMultiselect'+companyContactFieldKey]['ForCompanyContactMultiselect'+companyContactFieldKey + 'checkbox' + index] = option;
                                        checkbox.style.marginRight='10px';
                                        checkbox.style.cursor='pointer';
                                        checkbox.style.verticalAlign='middle';
                                        checkbox.addEventListener('click',handleMultiselectCheckboxClick);
                                        
                                        li.insertBefore(checkbox,li.firstChild);

                                        li.addEventListener('mouseover', function () {
                                            li.style.backgroundColor = '#f5f5f5';
                                        });

                                        li.addEventListener('mouseout', function () {
                                            li.style.backgroundColor = 'white';
                                        });

                                        optionsList.appendChild(li);
                                        document.getElementById('ForCompanyContactMultiselect'+companyContactFieldKey + 'checkbox' + index).value = option;
                                    });
                                    function handleMultiselectCheckboxClick(e) {

                                        // stop the event propagation
                                        e.stopPropagation();

                                        // get the id of the checkbox
                                        let checkboxId = e.target.id;
                                       
                                        let selectedOption = multiselectCheckboxValueContainer['ForCompanyContactMultiselect'+companyContactFieldKey][checkboxId];
                                        let selectedOptionId = checkboxId.replace('checkbox', '');

                                        let markAsChecked = e.target.checked;

                                        // if the checkbox is checked then add the option to the selected list
                                        if (markAsChecked && !(selectedOptionId in defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact'])){

                                            defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact'][selectedOptionId] = selectedOption;

                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = [];
                                            for (let key in defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact']){
                                                fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey].push(defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact'][key]);
                                            }

                                            if( flagForNestedCustomFields ){
                                                parentOptionSelected(companyContactFieldObject, companyContactFieldKey, fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey], companyContactEntityTypeId);
                                            }
                                        
                                            selectedValues.push(selectedOption);


                                            // Create a new list item in the selected list
                                            const selectedListItem = document.createElement('li');
                                            selectedListItem.textContent = selectedOption;

                                            // Attach CSS properties dynamically
                                            selectedListItem.style.cursor = 'pointer';
                                            selectedListItem.style.marginBottom = '2px';
                                            selectedListItem.style.border = '1px solid #F8FAFB';
                                            // selectedListItem.style.backgroundColor = '#E8E8E8';
                                            selectedListItem.style.color = 'black';
                                            selectedListItem.style.paddingLeft = '5px';
                                            selectedListItem.setAttribute('id', selectedOptionId + 'Selected');

                                            // Add hover styling
                                            selectedListItem.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#D3E2E2';
                                                selectedListItem.style.transform = 'scale(0.97)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                            });
                                            
                                            selectedListItem.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = 'white';
                                                selectedListItem.style.transform = 'scale(1)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                            });

                                            document.getElementById(companyContactFieldKey + 'SelectedOptionContainerForCompanyContactMultiselect').style.display = 'inline-block';
                                            if (selectedValues.length == 1){
                                                selectedList.style.height = '40px';
                                            }
                                            else{
                                                selectedList.style.height = '60px';
                                            }
                                            selectedList.appendChild(selectedListItem);

                                            // Create remove option cross mark
                                            const removeOption = document.createElement('span');
                                            removeOption.textContent = 'X';
                                            removeOption.style.float = 'right';
                                            removeOption.style.marginRight = '5px';
                                            removeOption.style.color = 'black';
                                            removeOption.style.marginTop = '3px';
                                            removeOption.style.fontSize = '10px';
                                            removeOption.id = selectedOptionId + 'removeOption'+'ForCompanyContactMultiselect';

                                            removeOption.classList.add('remove-option');

                                            removeOption.addEventListener('click', function () {
                                                removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                                            });

                                            // Create remove option circle
                                            const removeOptionCircle = document.createElement('span');
                                            removeOptionCircle.classList.add('remove-option-circle');

                                            // Append the removeOptionCircle to the removeOption
                                            removeOption.appendChild(removeOptionCircle);

                                            // Add hover styling to the removeOption element
                                            removeOption.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#f3dbdb';
                                                removeOptionCircle.style.display = 'inline-block';
                                            });
                                            
                                            removeOption.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = '#E8E8E8';
                                                removeOptionCircle.style.display = 'none';
                                            });

                                            selectedListItem.appendChild(removeOption);
                                        }


                                        else if (!markAsChecked){
                                            // dynamically click the li element to remove the selected option
                                            const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption'+'ForCompanyContactMultiselect');
                                            if (removeOptionButton){
                                                removeOptionButton.click();
                                            }
                                        }
                                    }


                                    // Click event handler for options
                                    function handleOptionClick(e) {
                                        const selectedOption = e.target.textContent;
                                        const selectedOptionId = e.target.id;

                                        // Add the selected value to the tracking array
                                        if (!(selectedOptionId in defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact'])){

                                            // set the error message visibility to none
                                            document.getElementById(companyContactFieldKey + 'CompanyContactErrorMessage').style.display = 'none';


                                            document.getElementById('ForCompanyContactMultiselect'+companyContactFieldKey + 'checkbox' + selectedOptionId.replace('ForCompanyContactMultiselect'+companyContactFieldKey, '')).checked = true;

                                            defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact'][selectedOptionId] = selectedOption;


                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = [];
                                            for (let key in defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact']){
                                                fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey].push(defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact'][key]);
                                            }

                                            if( flagForNestedCustomFields ){
                                                parentOptionSelected(companyContactFieldObject, companyContactFieldKey, fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey], companyContactEntityTypeId);
                                            }
                                        
                                            selectedValues.push(selectedOption);

                                            // Create a new list item in the selected list
                                            const selectedListItem = document.createElement('li');
                                            selectedListItem.textContent = selectedOption;

                                            // Attach CSS properties dynamically
                                            selectedListItem.style.cursor = 'pointer';
                                            selectedListItem.style.marginBottom = '2px';
                                            selectedListItem.style.border = '1px solid #F8FAFB';
                                            // selectedListItem.style.backgroundColor = '#E8E8E8';
                                            selectedListItem.style.color = 'black';
                                            selectedListItem.style.paddingLeft = '5px';
                                            selectedListItem.setAttribute('id',selectedOptionId+'Selected');

                                            // Add hover styling
                                            selectedListItem.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#D3E2E2';
                                                selectedListItem.style.transform = 'scale(0.97)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                            });
                                            
                                            selectedListItem.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = 'white';
                                                selectedListItem.style.transform = 'scale(1)';
                                                // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                            });

                                            document.getElementById(companyContactFieldKey + 'SelectedOptionContainerForCompanyContactMultiselect').style.display = 'inline-block';
                                            if (selectedValues.length == 1){
                                                selectedList.style.height = '40px';
                                            }
                                            else{
                                                selectedList.style.height = '60px';
                                            }
                                            selectedList.appendChild(selectedListItem);

                                            // Create remove option cross mark
                                            const removeOption = document.createElement('span');
                                            removeOption.textContent = 'X';
                                            removeOption.style.float = 'right';
                                            removeOption.style.marginRight = '5px';
                                            removeOption.style.color = 'black';
                                            removeOption.style.marginTop = '3px';
                                            removeOption.style.fontSize = '10px';
                                            removeOption.id=selectedOptionId+'removeOption'+'ForCompanyContactMultiselect' 
                                            removeOption.classList.add('remove-option');

                                            removeOption.addEventListener('click', function () {
                                                removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                                            });

                                            // Create remove option circle
                                            const removeOptionCircle = document.createElement('span');
                                            removeOptionCircle.classList.add('remove-option-circle');

                                            // Append the removeOptionCircle to the removeOption
                                            removeOption.appendChild(removeOptionCircle);

                                            // Add hover styling to the removeOption element
                                            removeOption.addEventListener('mouseenter', function() {
                                                selectedListItem.style.backgroundColor = '#f3dbdb';
                                                removeOptionCircle.style.display = 'inline-block';
                                            });
                                            
                                            removeOption.addEventListener('mouseleave', function() {
                                                selectedListItem.style.backgroundColor = '#E8E8E8';
                                                removeOptionCircle.style.display = 'none';
                                            });

                                            selectedListItem.appendChild(removeOption);
                                        }
                                        else{
                                            document.getElementById('ForCompanyContactMultiselect'+companyContactFieldKey + 'checkbox' + selectedOptionId.replace('ForCompanyContactMultiselect'+companyContactFieldKey, '')).checked = false;
                                            const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption'+'ForCompanyContactMultiselect');
                                            if (removeOptionButton){
                                                removeOptionButton.click();
                                            }
                                        }
                                    }


                                    // Remove selected option
                                    function removeSelectedOption(option, listItem, selectedOptionId) {
                                        // Remove from the tracking array
                                        delete defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact'][selectedOptionId];
                                        fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = [];
                                        
                                        for (let key in defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact']){
                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey].push(defaultSelectedOptions[companyContactFieldKey+'ForCompanyContact'][key]);
                                        }

                                        if(flagForNestedCustomFields){
                                            parentOptionSelected(companyContactFieldObject, companyContactFieldKey, fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey], companyContactEntityTypeId);
                                        }
                                    
                                        // Remove the list item from the selected list
                                        listItem.remove();

                                        if (fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey].length == 0){
                                            document.getElementById(companyContactFieldKey + 'SelectedOptionContainerForCompanyContactMultiselect').style.display = 'none';
                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = null;
                                        }
                                        
                                        const correspondingCheckbox = document.getElementById(selectedOptionId.replace(companyContactFieldKey, companyContactFieldKey+'checkbox'));
                                        if (correspondingCheckbox){
                                            correspondingCheckbox.checked = false;
                                        }
                                    
                                    }
                                    
                                }

                                else if (companyContactFieldObject["type"] == 'checkbox'){
                                    // Get the container element where the checkbox will be added
                                    const checkboxContainer = document.getElementById('checkboxSectionForCompanyContact');

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.id = companyContactFieldKey + 'CompanyContactnestedDivId';
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label rightCheckbox");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = companyContactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = companyContactFieldKey + 'CompanyContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyContactFieldKey + 'CompanyContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyContactFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (companyContactFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = companyContactFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }


                                    outerDivContiner.appendChild(headingOfField);

                                    // Create the checkbox element
                                    const checkboxElement = document.createElement('input');
                                    checkboxElement.type = 'checkbox';
                                    checkboxElement.id = companyContactFieldKey+'ForCompanyContact';
                                    checkboxElement.setAttribute('style', 'margin-bottom:15px;');

                                    // Add a change event listener to the checkbox element
                                    checkboxElement.addEventListener('change', (event) => {
                                        // Get the checked state of the checkbox element
                                        const isChecked = event.target.checked;
                                        
                                        let checkBoxValue = '';
                                        // Save the checked state in the JavaScript object
                                        if (isChecked){
                                            // set the error message visibility to none
                                            document.getElementById(companyContactFieldKey + 'CompanyContactErrorMessage').style.display = 'none';

                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = '1';
                                            checkBoxValue = 'Yes';
                                        }
                                        else{
                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = '0';
                                            checkBoxValue = 'No';
                                        }
                                        
                                        if(flagForNestedCustomFields){
                                            parentOptionSelected(companyContactFieldObject, companyContactFieldKey, checkBoxValue, companyContactEntityTypeId);
                                        }
                                    });

                                    fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = '0';

                                    // Add the checkbox element to the container element
                                    outerDivContiner.appendChild(checkboxElement);
                                    outerDivContiner.appendChild(errorMessage);
                                    checkboxContainer.appendChild(outerDivContiner);

                                    if(flagForNestedCustomFields){
                                        parentOptionSelected(companyContactFieldObject, companyContactFieldKey, 'No', companyContactEntityTypeId);
                                    }
                                }

                                else if (companyContactFieldObject['type'] == 'date'){
                                    // Get the container element where the date input will be added
                                    const dateContainer = document.getElementById('dateSectionForCompanyContact');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = companyContactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = companyContactFieldKey + 'CompanyContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyContactFieldKey + 'CompanyContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyContactFieldObject['label'] + ' field is required';

                                    dateContainer.appendChild(headingOfField);
                                    dateContainer.appendChild(errorMessage);

                                    // Create the date input element
                                    const dateElement = document.createElement('input');
                                    dateElement.type = 'date';
                                    dateElement.id = companyContactFieldKey+'ForCompanyContact';
                                    dateElement.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border: 1px #E8E8E8 solid; border-radius: 5px; color: #777; padding-left: 5px; text-transform: uppercase; ');

                                    // Add a change event listener to the date input element
                                    dateElement.addEventListener('change', (event) => {
                                        // Get the selected date from the date input element
                                        const selectedDate = new Date(event.target.value);
                                        
                                        // Get the UNIX timestamp of the selected date
                                        const timestamp = selectedDate.getTime() / 1000;

                                        // set the error message visibility to none
                                        document.getElementById(companyContactFieldKey + 'CompanyContactErrorMessage').style.display = 'none';

                                        // change the color to black
                                        dateElement.style.color = 'black';
                                        
                                        if(flagForStandardDateField){
                                            var date = new Date(timestamp*1000);
                                            // var dat = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear();
                                            var month  = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1)));
                                            var dat = ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) ;
                                            var year = date.getFullYear();

                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = ''+year+'-'+month+'-'+dat;
                                        }else{
                                            // Save the UNIX timestamp in the JavaScript object
                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = timestamp;
                                        }


                                        if (selectedDate == 'Invalid Date'){
                                            dateElement.style.color = '#777';
                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = null;
                                        }
                                        
                                    });

                                    // Add the date input element to the container element
                                    dateContainer.appendChild(dateElement);
                                    fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = null;
                                }

                                else if (companyContactFieldObject['type'] == 'date_time'){
                                    // Get the container element where the date input will be added
                                    const dateContainer = document.getElementById('dateTimeSectionForCompanyContact');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = companyContactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = companyContactFieldKey + 'CompanyContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyContactFieldKey + 'CompanyContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyContactFieldObject['label'] + ' field is required';

                                    dateContainer.appendChild(headingOfField);
                                    dateContainer.appendChild(errorMessage);

                                    // Create the date input element
                                    const dateElement = document.createElement('input');
                                    dateElement.type = 'datetime-local';
                                    dateElement.id = companyContactFieldKey+'ForCompanyContact';
                                    dateElement.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border: 1px #E8E8E8 solid; border-radius: 5px; color: #777; padding-left: 5px; text-transform: uppercase; ');

                                    // Add a change event listener to the date input element
                                    dateElement.addEventListener('change', (event) => {
                                        // Get the selected date from the date input element
                                        const selectedDate = new Date(event.target.value);
                                        
                                        // Get the UNIX timestamp of the selected date
                                        const timestamp = selectedDate.getTime() / 1000;

                                        // set the error message visibility to none
                                        document.getElementById(companyContactFieldKey + 'CompanyContactErrorMessage').style.display = 'none';

                                        // change the color to black
                                        dateElement.style.color = 'black';
                                        
                                        fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = timestamp;

                                        if (selectedDate == 'Invalid Date'){
                                            dateElement.style.color = '#777';
                                            fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = null;
                                        }
                                        
                                    });

                                    // Add the date input element to the container element
                                    dateContainer.appendChild(dateElement);
                                    fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = null;
                                }

                                else if (companyContactFieldObject['type'] == "number" || companyContactFieldObject['type'] == "decimal"){
                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = companyContactFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = companyContactFieldKey + 'CompanyContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyContactFieldKey + 'CompanyContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyContactFieldObject['label'] + ' field is required';

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'number';
                                    inputContainer.id = companyContactFieldKey+'ForCompanyContact';
                                    inputContainer.setAttribute('style', 'width:95%; ');
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');

                                    inputContainer.addEventListener("keydown", function(event) {
                                        if (event.key === 'e' || event.key === 'E' || event.key === '+') {
                                            event.preventDefault();
                                        }
                                    });

                                    inputContainer.step = "0.01";
                                    inputContainer.addEventListener("input", () => {
                                        let value = inputContainer.value;

                                        // set the error message visibility to none
                                        document.getElementById(companyContactFieldKey + 'CompanyContactErrorMessage').style.display = 'none';

                                        const parts = value.split('.');
                                        if (parts.length == 2 && parts[1].length > 2){
                                            parts[1] = parts[1].slice(0, 2);
                                            inputContainer.value = parts.join('.');
                                        }
                                    });

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForCompanyContact.appendChild(outerDivContiner);

                                }else if (flagForFileCustomField && companyContactFieldObject['type'] == 'file'){
                                    
                                    // Get the container element where the file input will be added
                                    const fileContainer = document.getElementById('fileContainerForCompanyContact');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = companyContactFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = companyContactFieldKey + 'CompanyContactLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyContactFieldKey + 'CompanyContactErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyContactFieldObject['label'] + ' field is required';

                                    fileContainer.appendChild(headingOfField);
                                    fileContainer.appendChild(errorMessage);

                                    // Create the file input element
                                    const fileElement = document.createElement('input');
                                    fileElement.type = 'file';
                                    fileElement.id = companyContactFieldKey+'ForCompanyContact';
                                    fileElement.setAttribute('style', 'margin-bottom:10px; border: 1px #E8E8E8 solid; font-size: 13px; display: none;');

                                    // Create the label element
                                    var label = document.createElement('label');
                                    label.setAttribute('for', companyContactFieldKey+'ForCompanyContact');
                                    label.setAttribute('id', companyContactFieldKey+'ForCompanyContact' + 'label');
                                    label.setAttribute('style', 'display: inline-block; border: 1px solid #E8E8E8; background-color: white; cursor: pointer; width: 95%; height: 25px; margin-bottom: 10px; border-radius: 5px;');

                                    // Create the span element for the text
                                    var span = document.createElement('span');
                                    span.setAttribute('id', companyContactFieldKey+'ForCompanyContact' + 'span');
                                    span.setAttribute('style', 'padding-right: 5px; padding-left: 5px; ');
                                    span.textContent = 'Upload File';

                                    // Create the icon element
                                    var icon = document.createElement('i');
                                    icon.setAttribute('class', 'mdi mdi-upload mdi-13px'); // Add your desired icon class here

                                    // Append the span and icon elements to the label
                                    label.appendChild(span);
                                    label.appendChild(icon);

                                    fileElement.addEventListener('change', (event) => {
        
                                        const uploadedFile = event.target.files[0];
                                        if (uploadedFile) {
                                            // set the error message visibility to none
                                            document.getElementById(companyContactFieldKey + 'CompanyContactErrorMessage').style.display = 'none';

                                            let nameOfFile = uploadedFile.name;
                                            if (nameOfFile.length < 28){
                                                // span.textContent = nameOfFile;
                                                document.getElementById(companyContactFieldKey+'ForCompanyContact' + 'span').textContent = nameOfFile;
                                                document.getElementById(companyContactFieldKey+'ForCompanyContact' + 'span').style.color = 'black';
                                            }
                                            else {
                                                nameOfFile = nameOfFile.split('.');
                                                let firstHalfName = nameOfFile[0]?.slice(0, 25);
                                                let completeName = firstHalfName + '.. .' + nameOfFile[nameOfFile.length - 1];
                                                // span.textContent = completeName;
                                                document.getElementById(companyContactFieldKey+'ForCompanyContact' + 'span').textContent = completeName;
                                                document.getElementById(companyContactFieldKey+'ForCompanyContact' + 'span').style.color = 'black';
                                            }
                                            
                                        } else {
                                            span.textContent = 'Upload File';
                                            document.getElementById(companyContactFieldKey+'ForCompanyContact' + 'span').style.color = '';
                                        }
                                        const reader = new FileReader();
                                        reader.onload = function() {
                                            const base64String = reader.result.split(',')[1];
                                            fileDataForCompanyContact[companyContactFieldKey] = {
                                                'file': base64String,
                                                'filename': uploadedFile.name,
                                                'filetype': uploadedFile.type,
                                                'filesize': uploadedFile.size
                                            };
                                            
                                        };
                                        reader.readAsDataURL(uploadedFile);
                                        // fieldsVisibleOnExtensionForCompanyContact[companyContactFieldKey] = uploadedFile ? uploadedFile : '';

                                    });

                                    // Add the file input element to the container element
                                    fileContainer.appendChild(fileElement);
                                    fileContainer.appendChild(label);
                                    fileTypeCustomFieldsForCompanyContact.push(companyContactFieldKey);
                                }

                                else if (isEntityTypeField(companyContactFieldObject['type'])){
                                    const parentContainerMultiselect = document.getElementById('multiselectDataSectionForCompanyContact');
                                    renderEntityTypeField(companyContactFieldObject, companyContactFieldKey, companyContactEntityTypeId, parentContainerMultiselect)
                                }
                            }
                        }

                        //company fields starts
                        if (response.data.company_form_field != "") {
                            companyFormData = JSON.parse(response.data.company_form_field);
                            if (flagForCompanyCustomSectionFields == false) {
                                for (const dataProperty in companyFormData){
                                    if (companyFormData[dataProperty]["show_on_extension"] == true && !defaultExtensionFieldsForCompany.includes(dataProperty)){
                                        if(dataProperty == 'industry'){
                                            fieldsVisibleOnExtensionForCompany['industryid'] = ''
                                        } else if(dataProperty == 'contactid'){
                                            fieldsVisibleOnExtensionForCompany['existingContacts'] = '';
                                        } else{
                                            fieldsVisibleOnExtensionForCompany[dataProperty] = '';
                                            if(isEntityTypeField(companyColumns[dataProperty]['type'])){
                                                let entityFieldType = companyColumns[dataProperty]['type'] + 'Type';
                                                setEntityTypeFieldsForEntites(companyEntityTypeId, entityFieldType, dataProperty);
                                            }
                                        }
                                    } 
                                }
                            } else {
                                for (const section in companyFormData){
                                    for (const field in companyFormData[section]['fields']) {
                                        let dataProperty = companyFormData[section]['fields'][field]['colname'];
                                        if (companyFormData[section]['fields'][field]["show_on_extension"] == true && !defaultExtensionFieldsForCompany.includes(dataProperty)){
                                            if(dataProperty == 'industry'){
                                                fieldsVisibleOnExtensionForCompany['industryid'] = ''
                                            }else if(dataProperty == 'contactid'){
                                                fieldsVisibleOnExtensionForCompany['existingContacts'] = '';
                                            }
                                            else{
                                                fieldsVisibleOnExtensionForCompany[dataProperty] = '';
                                                if(isEntityTypeField(companyColumns[dataProperty]['type'])){
                                                    let entityFieldType = companyColumns[dataProperty]['type'] + 'Type';
                                                    setEntityTypeFieldsForEntites(companyEntityTypeId, entityFieldType, dataProperty);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        document.getElementById('multiselectDataSectionForCompany').innerHTML = '';
                        document.getElementById('dropDownDataSectionForCompany').innerHTML = '';
                        document.getElementById('checkboxSectionForCompany').innerHTML = '';
                        document.getElementById('dateSectionForCompany').innerHTML = '';
                        document.getElementById('fileContainerForCompany').innerHTML = '';
                        document.getElementById('textFieldsContainerForCompany').innerHTML = '';
                        document.getElementById('longTextFieldsContainerForCompany').innerHTML = '';
                        document.getElementById('dateTimeSectionForCompany').innerHTML = '';
                        for (let companyFieldKey in companyColumns){
                            let companyFieldObject = companyColumns[companyFieldKey];
                            let element = '';
                            let subTag = document.createElement("div");
                            let textFieldsContainerForCompany = document.getElementById('textFieldsContainerForCompany');
                            let canRenderField = canRenderCustomField(companyEntityTypeId, companyFieldObject['custom_field_id'], companyFieldKey);

                            if (companyFieldObject["show_on_extension"] && companyFieldObject["show_on_extension"] == true && !defaultExtensionFieldsForCompany.includes(companyFieldKey) && (!flagForNestedCustomFields || (flagForNestedCustomFields && canRenderField))){
                                // check the type of field. 
                                // language and proficiency 
                                
                                if (companyFieldObject['type'] == 'text' || companyFieldObject['type'] == 'phonenumber' || companyFieldObject['type'] == 'social_profile'){

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = companyFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = companyFieldKey + 'CompanyLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyFieldKey + 'CompanyErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (companyFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = companyFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'text';
                                    inputContainer.id = companyFieldKey+'ForCompany';
                                    inputContainer.style.width = '95%';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForCompany.appendChild(outerDivContiner);
                                }

                                else if (companyFieldObject['type'] == 'email'){

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = companyFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = companyFieldKey + 'CompanyLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyFieldKey + 'CompanyErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (companyFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = companyFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'email';
                                    inputContainer.id = companyFieldKey + 'ForCompany';
                                    inputContainer.style.width = '95%';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');
                                    inputContainer.setAttribute('maxlength', "40");

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForCompany.appendChild(outerDivContiner);
                                }

                                else if (companyFieldObject['type'] == 'longtext'){

                                    textFieldsContainerForCompany = document.getElementById('longTextFieldsContainerForCompany');

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = companyFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = companyFieldKey + 'CompanyLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyFieldKey + 'CompanyErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (companyFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = companyFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    let inputContainer = document.createElement('textarea');
                                    inputContainer.type = 'text';
                                    inputContainer.id = companyFieldKey + 'ForCompany';
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');
                                    inputContainer.setAttribute('style', 'height: 30px;width: 95%; border: 1px #E8E8E8 solid;margin-top: 5px; padding: 5px; font-size: 13px; border-radius: 5px;');

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForCompany.appendChild(outerDivContiner);
                                }

                                else if (companyFieldObject['type'] == 'dropdown' && companyFieldObject['field']!='companyid'){
                                    if(companyFieldObject['field'] == 'industry'){
                                        const industries = response.data.company_industries;
                                        let options = [];
                                        // options['0'] = 'Select an option';
                                        
                                        industries.forEach(function(o){
                                            options[o.id] = o.label
                                        })
                                        // options=industries.map(object=>object.label);
                                        
                                        const container = document.getElementById("companyIndustries");

                                        const headingOfField = document.createElement('label');
                                        headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                        headingOfField.setAttribute('style', 'margin-bottom:5px; display: inline-block;');
                                        headingOfField.innerHTML = companyFieldObject['label'];

                                        // block for required fields validation
                                        headingOfField.id = companyFieldKey + 'CompanyLabelId';
                                        let errorMessage = document.createElement('p');
                                        errorMessage.style.color = 'red';
                                        errorMessage.id = companyFieldKey + 'CompanyErrorMessage';
                                        errorMessage.style.display = 'none';
                                        errorMessage.innerHTML = '' + companyFieldObject['label'] + ' field is required';

                                        // block for required fields validation
                                        if (companyFieldObject['required_on_form'] == true) {
                                            // add a star with red colour to the inner HTML label
                                            headingOfField.innerHTML = companyFieldObject['label'] + ' <span style="color: red;">*</span>';
                                        }


                                        container.appendChild(headingOfField);
                                        container.appendChild(errorMessage);

                                        // Create the dropdown dropdown
                                        if(flagForSearchableDropdown){
                                            //block to show the button to view components
                                            let containerToShowDropdownOption = document.createElement('div');
                                            containerToShowDropdownOption.id = companyFieldKey + 'OuterContainerForOptionsForCompanyIndustries';
                                            containerToShowDropdownOption.style.width = 95 + '%';
                                            let buttonToShowDropdownOption = document.createElement('div');
                                            buttonToShowDropdownOption.id = companyFieldKey + 'buttonForCompanyIndustries';
                                            buttonToShowDropdownOption.innerHTML = "Select from List";
                                            containerToShowDropdownOption.appendChild(buttonToShowDropdownOption);
    
                                            // input component for search
                                            let searchInput = document.createElement('input');
                                            searchInput.setAttribute('type', 'text');
                                            searchInput.setAttribute('id', companyFieldKey + 'searchForCompanyIndustries');
                                            searchInput.setAttribute('placeholder', 'Please Search & Select');
                                            searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                            searchInput.setAttribute('class', 'rcrm-ctrl');
    
                                            // block to show the option container
                                            let containerDropdownOption = document.createElement('div');
                                            containerDropdownOption.id = companyFieldKey + 'OptionsOuterContainerForCompanyIndustries';
                                            let dropdownOption = document.createElement('ul');
                                            dropdownOption.id = companyFieldKey + 'options'+'ForCompanyIndustries';
                                            dropdownOption.setAttribute('style', 'list-style: none;');
                                            containerDropdownOption.appendChild(searchInput);
                                            containerDropdownOption.appendChild(dropdownOption);
    
                                            searchInput.addEventListener('input', function(e){
                                                let matchesCount = 0;
                                                let searchValue = e.target.value.trim();
                                                let optionsList = dropdownOption;
    
                                                optionsList.innerHTML = '';
                                                for (let option in options){
                                                    
                                                    if (options[option].toLowerCase().includes(searchValue.toLowerCase())){
                                                        const li = document.createElement('li');
                                                        li.textContent = options[option];
                                                        li.id = companyFieldKey + option+'ForCompanyIndustries';
                                                        li.addEventListener('click', handleOptionClickCompany);
                                                        li.style.cursor = 'pointer';
                                                        li.style.marginBottom = '5px';
                                                        li.style.padding = '5px';
                                                        li.style.color = 'black';
                                                        optionsList.appendChild(li);
                                                        matchesCount += 1;
    
                                                        li.addEventListener('mouseover', function () {
                                                            li.style.backgroundColor = '#f5f5f5';
                                                        });
    
                                                        li.addEventListener('mouseout', function () {
                                                            li.style.backgroundColor = 'white';
                                                        });
                                                    }
                                                }
    
                                                if (matchesCount == 0){
                                                    const li = document.createElement('li');
                                                    li.textContent = 'No Results Found';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    li.style.backgroundColor = '#E8E8E8';
                                                    li.style.border = '1px solid #F8FAFB';
                                                    optionsList.appendChild(li);
                                                }
    
                                                if ( matchesCount < 5 ) {
                                                    optionsList.style.height = 'auto';
                                                    optionsList.style.overflowY = 'hidden';
                                                }
    
                                                else {
                                                    optionsList.style.height = '200px';
                                                    optionsList.style.overflowY = 'scroll';
                                                }
    
                                                matchesCount = 0;
                                            });
                                            
                                            // Add event listener for keydown event to prevent Enter key press
                                            searchInput.addEventListener('keydown', function(e) {
                                                if (e.key === 'Enter') {
                                                    e.preventDefault();
                                                }
                                            });
    
                                            container.appendChild(containerToShowDropdownOption);
                                            container.appendChild(containerDropdownOption);
                                            
                                            const optionsList = dropdownOption;
                                            const toggleButton = buttonToShowDropdownOption;
    
                                            // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                            if (options.length > 5){
                                                optionsList.style.height = '200px';
                                                optionsList.style.overflowY = 'scroll';
                                            }
    
                                            toggleButton.style.cursor = 'pointer';
                                            toggleButton.style.padding = '3px';
                                            toggleButton.style.border = '1px solid #E8E8E8';
                                            toggleButton.style.height = '30px';
                                            toggleButton.style.marginBottom = '5px';
                                            toggleButton.style.borderRadius = '5px';
                                            toggleButton.style.paddingLeft = '5px';
    
                                            // Set CSS properties dynamically on the Dropdown Options Container
                                            containerDropdownOption.style.display = 'none';
                                            containerDropdownOption.style.border = '1px solid #E8E8E8';
                                            containerDropdownOption.style.padding = '10px';
                                            containerDropdownOption.style.marginBottom = '5px';
                                            containerDropdownOption.style.borderRadius = '5px';
    
                                            // Set toggle button click event
                                            toggleButton.addEventListener('click', toggleOptionsContaineCompany);
    
                                            // Toggle options container visibility
                                            function toggleOptionsContaineCompany() {
                                                document.getElementById(companyFieldKey + 'OptionsOuterContainerForCompanyIndustries').style.display = document.getElementById(companyFieldKey + 'OptionsOuterContainerForCompanyIndustries').style.display === 'none' ? 'block' : 'none';
                                            }
    
                                            // dropdown data
                                            const data = options;
                                        
                                            // Generate options dynamically
                                            data.forEach((option, index) => {
                                                const li = document.createElement('li');
                                                li.textContent = option;
                                                li.id = companyFieldKey + index+'ForCompanyIndustries';
                                                li.addEventListener('click', handleOptionClickCompany);
    
                                                // Attach CSS properties dynamically
                                                li.style.cursor = 'pointer';
                                                li.style.marginBottom = '5px';
                                                li.style.padding = '5px';
                                                li.style.color = 'black';
    
                                                li.addEventListener('mouseover', function () {
                                                    li.style.backgroundColor = '#f5f5f5';
                                                });
    
                                                li.addEventListener('mouseout', function () {
                                                    li.style.backgroundColor = 'white';
                                                });
    
                                                optionsList.appendChild(li);
                                            });
    
                                            // //adding span tag to clear selected option
                                            // const removeOption = document.createElement('span');
                                            //     removeOption.textContent = 'X';
                                            //     removeOption.style.float = 'right';
                                            //     removeOption.style.marginRight = '5px';
                                            //     removeOption.style.color = 'black';
                                            //     removeOption.style.marginTop = '3px';
                                            //     removeOption.style.fontSize = '10px';
    
                                            //     removeOption.classList.add('remove-option');
    
                                            //     removeOption.addEventListener('click', function () {
                                            //         fieldsVisibleOnExtensionForCompany[companyFieldKey] = '';
                                            //         const labelComponenet = document.getElementById(companyFieldKey + 'buttonForCompanyIndustries');
                                            //         labelComponenet.textContent = 'Select from List';
                                            //         buttonToShowDropdownOption.style.color = '#777';
                                            //         toggleOptionsContaineCompany();
                                            //     });
    
                                            function handleOptionClickCompany(e) {
                                                const selectedOption = e.target.textContent;
                                                
                                                let idOfTheLabel = e.target.id;
                                                var endIndex = idOfTheLabel.indexOf("ForCompanyIndustries");
                                                var startIndex = "industry".length;
                                                var integerPart = idOfTheLabel.substring(startIndex, endIndex);
                                                fieldsVisibleOnExtensionForCompany[companyFieldKey+'id'] = integerPart;
                                                const labelComponenet = document.getElementById(companyFieldKey + 'buttonForCompanyIndustries');
                                                labelComponenet.textContent = selectedOption;
                                                labelComponenet.style.color = 'black';
                                                // buttonToShowDropdownOption.append(removeOption);
                                                toggleOptionsContaineCompany();
                                            }
                                            
                                        }
                                        else{                                        
                                            const select = document.createElement("select");
                                            select.id = companyFieldKey + 'ForCompanyIndustries';
                                            select.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border-color: #E8E8E8; font-size: 13px; font-weight: 400; border-radius: 5px; color: #777; padding-left: 1px; ');
                                            
                                        
                                            // Create the options with checkboxes
                                            for (let opt in options) {
                                                const checkbox = document.createElement("input");
                                                checkbox.type = "checkbox";
                                                checkbox.value = options[opt];
                                                checkbox.id = opt;
                                            
                                                const label = document.createElement("label");
                                                label.textContent = options[opt];
                                                label.htmlFor = options[opt];
                                                label.id = opt;
                                                const optionContainer = document.createElement("option");
                                                optionContainer.id = opt;
                                                optionContainer.appendChild(label);
                                                select.appendChild(optionContainer);
                                                select.appendChild(checkbox);
                                            
                                            }
                                        
                                            container.appendChild(select);
                                            // Event listener to capture selected values
                                            select.addEventListener("change", (event) => {
    
                                            // set the error message to none
                                            document.getElementById(companyFieldKey + 'CompanyErrorMessage').style.display = 'none';
                                            
                                                const selectedOptions = [...event.target.selectedOptions].map((option) => option.getElementsByTagName('label')[0].id);
                                                fieldsVisibleOnExtensionForCompany[companyFieldKey+'id'] = selectedOptions[0];
                                                select.style.color = 'black';
                    
                                            });
                                        
                                        }
                                    }else{
                                        let options = [];
                                        options = companyFieldObject['data'].map(object => object.label);
                                        if(!flagForSearchableDropdown){
                                            options.unshift('Select an option');
                                        }
                                        
                                    
                                        const container = document.getElementById("dropDownDataSectionForCompany");

                                        let outerDivContiner = document.createElement('div');
                                        outerDivContiner.id = companyFieldKey + 'CompanynestedDivId';
                                        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                        outerDivContiner.style.marginBottom = '5px';

                                        const headingOfField = document.createElement('label');
                                        headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                        headingOfField.setAttribute('style', 'margin-bottom:5px; display: inline-block;');
                                        headingOfField.innerHTML = companyFieldObject['label'];

                                        // block for required fields validation
                                        headingOfField.id = companyFieldKey + 'CompanyLabelId';
                                        let errorMessage = document.createElement('p');
                                        errorMessage.style.color = 'red';
                                        errorMessage.id = companyFieldKey + 'CompanyErrorMessage';
                                        errorMessage.style.display = 'none';
                                        errorMessage.innerHTML = '' + companyFieldObject['label'] + ' field is required';

                                        // block for required fields validation
                                        if (companyFieldObject['required_on_form'] == true) {
                                            // add a star with red colour to the inner HTML label
                                            headingOfField.innerHTML = companyFieldObject['label'] + ' <span style="color: red;">*</span>';
                                        }

                                    
                                        outerDivContiner.appendChild(headingOfField);
                                        outerDivContiner.appendChild(errorMessage);
                                    
                                        // Create the dropdown dropdown
                                        if(flagForSearchableDropdown){
                                            //block to show the button to view components
                                            let containerToShowDropdownOption = document.createElement('div');
                                            containerToShowDropdownOption.id = companyFieldKey + 'OuterContainerForOptionsForCompanyDropDown';
                                            containerToShowDropdownOption.style.width = 95 + '%';
                                            let buttonToShowDropdownOption = document.createElement('div');
                                            buttonToShowDropdownOption.id = companyFieldKey + 'buttonForCompanyDropDown';
                                            buttonToShowDropdownOption.innerHTML = "Select from List";
                                            containerToShowDropdownOption.appendChild(buttonToShowDropdownOption);
    
                                            // input component for search
                                            let searchInput = document.createElement('input');
                                            searchInput.setAttribute('type', 'text');
                                            searchInput.setAttribute('id', companyFieldKey + 'searchForCompanyDropDown');
                                            searchInput.setAttribute('placeholder', 'Please Search & Select');
                                            searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                            searchInput.setAttribute('class', 'rcrm-ctrl');
    
                                            // block to show the option container
                                            let containerDropdownOption = document.createElement('div');
                                            containerDropdownOption.id = companyFieldKey + 'OptionsOuterContainerForCompanyDropDown';
                                            let dropdownOption = document.createElement('ul');
                                            dropdownOption.id = companyFieldKey + 'options'+'ForCompanyDropDown';
                                            dropdownOption.setAttribute('style', 'list-style: none;');
                                            containerDropdownOption.appendChild(searchInput);
                                            containerDropdownOption.appendChild(dropdownOption);
    
                                            searchInput.addEventListener('input', function(e){
                                                let matchesCount = 0;
                                                let searchValue = e.target.value.trim();
                                                let optionsList = dropdownOption;
    
                                                optionsList.innerHTML = '';
                                                for (let option of options){
                                                    if (option.toLowerCase().includes(searchValue.toLowerCase())){
                                                        const li = document.createElement('li');
                                                        li.textContent = option;
                                                        li.id = companyFieldKey + options.indexOf(option)+'ForCompanyDropDown';
                                                        li.addEventListener('click', handleOptionClickCompany);
                                                        li.style.cursor = 'pointer';
                                                        li.style.marginBottom = '5px';
                                                        li.style.padding = '5px';
                                                        li.style.color = 'black';
                                                        optionsList.appendChild(li);
                                                        matchesCount += 1;
    
                                                        li.addEventListener('mouseover', function () {
                                                            li.style.backgroundColor = '#f5f5f5';
                                                        });
    
                                                        li.addEventListener('mouseout', function () {
                                                            li.style.backgroundColor = 'white';
                                                        });
                                                    }
                                                }
    
                                                if (matchesCount == 0){
                                                    const li = document.createElement('li');
                                                    li.textContent = 'No Results Found';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    li.style.backgroundColor = '#E8E8E8';
                                                    li.style.border = '1px solid #F8FAFB';
                                                    optionsList.appendChild(li);
                                                }
    
                                                if ( matchesCount < 5 ) {
                                                    optionsList.style.height = 'auto';
                                                    optionsList.style.overflowY = 'hidden';
                                                }
    
                                                else {
                                                    optionsList.style.height = '200px';
                                                    optionsList.style.overflowY = 'scroll';
                                                }
    
                                                matchesCount = 0;
                                            });
                                            
                                            // Add event listener for keydown event to prevent Enter key press
                                            searchInput.addEventListener('keydown', function(e) {
                                                if (e.key === 'Enter') {
                                                    e.preventDefault();
                                                }
                                            });
    
                                            outerDivContiner.appendChild(containerToShowDropdownOption);
                                            outerDivContiner.appendChild(containerDropdownOption);
                                            
                                            const optionsList = dropdownOption;
                                            const toggleButton = buttonToShowDropdownOption;
    
                                            // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                            if (options.length > 5){
                                                optionsList.style.height = '200px';
                                                optionsList.style.overflowY = 'scroll';
                                            }
    
                                            toggleButton.style.cursor = 'pointer';
                                            toggleButton.style.padding = '3px';
                                            toggleButton.style.border = '1px solid #E8E8E8';
                                            toggleButton.style.height = '30px';
                                            toggleButton.style.marginBottom = '5px';
                                            toggleButton.style.borderRadius = '5px';
                                            toggleButton.style.paddingLeft = '5px';
    
                                            // Set CSS properties dynamically on the Dropdown Options Container
                                            containerDropdownOption.style.display = 'none';
                                            containerDropdownOption.style.border = '1px solid #E8E8E8';
                                            containerDropdownOption.style.padding = '10px';
                                            containerDropdownOption.style.marginBottom = '5px';
                                            containerDropdownOption.style.borderRadius = '5px';
    
                                            // Set toggle button click event
                                            toggleButton.addEventListener('click', toggleOptionsContaineCompany);
    
                                            // Toggle options container visibility
                                            function toggleOptionsContaineCompany() {
                                                document.getElementById(companyFieldKey + 'OptionsOuterContainerForCompanyDropDown').style.display = document.getElementById(companyFieldKey + 'OptionsOuterContainerForCompanyDropDown').style.display === 'none' ? 'block' : 'none';
                                            }
    
                                            // dropdown data
                                            const data = options;
    
                                            // Generate options dynamically
                                            data.forEach((option, index) => {
                                                const li = document.createElement('li');
                                                li.textContent = option;
                                                li.id = companyFieldKey + index+'ForCompanyDropDown';
                                                li.addEventListener('click', handleOptionClickCompany);
    
                                                // Attach CSS properties dynamically
                                                li.style.cursor = 'pointer';
                                                li.style.marginBottom = '5px';
                                                li.style.padding = '5px';
                                                li.style.color = 'black';
    
                                                li.addEventListener('mouseover', function () {
                                                    li.style.backgroundColor = '#f5f5f5';
                                                });
    
                                                li.addEventListener('mouseout', function () {
                                                    li.style.backgroundColor = 'white';
                                                });
    
                                                optionsList.appendChild(li);
                                            });
    
                                            //adding span tag to clear selected option
                                            // const removeOption = document.createElement('span');
                                            //     removeOption.textContent = 'X';
                                            //     removeOption.style.float = 'right';
                                            //     removeOption.style.marginRight = '5px';
                                            //     removeOption.style.color = 'black';
                                            //     removeOption.style.marginTop = '3px';
                                            //     removeOption.style.fontSize = '10px';
    
                                            //     removeOption.classList.add('remove-option');
    
                                            //     removeOption.addEventListener('click', function () {
                                            //         fieldsVisibleOnExtensionForCompany[companyFieldKey] = '';
                                            //         const labelComponenet = document.getElementById(companyFieldKey + 'buttonForCompanyDropDown');
                                            //         labelComponenet.textContent = 'Select from List';
                                            //         buttonToShowDropdownOption.style.color = '#777';
                                            //         toggleOptionsContaineCompany();
                                            //     });
    
                                            function handleOptionClickCompany(e) {
                                                const selectedOption = e.target.textContent;
                                                let idOfTheLabel = selectedOption;
    
                                                fieldsVisibleOnExtensionForCompany[companyFieldKey] = idOfTheLabel;
    
                                                if(flagForNestedCustomFields){
                                                    parentOptionSelected(companyFieldObject, companyFieldKey, idOfTheLabel, companyEntityTypeId);
                                                }

                                                const labelComponenet = document.getElementById(companyFieldKey + 'buttonForCompanyDropDown');
                                                labelComponenet.textContent = selectedOption;
                                                labelComponenet.style.color = 'black';
                                                // buttonToShowDropdownOption.append(removeOption);
                                                toggleOptionsContaineCompany();
                                            }
                                            
                                        }
                                        else{
                                            const select = document.createElement("select");
                                        select.id = companyFieldKey + 'ForCompany';
                                        select.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border-color: #E8E8E8; font-size: 13px; font-weight: 400; border-radius: 5px; color: #777; padding-left: 1px; ');
                                        let index = 0;
                                    
                                        // Create the options with checkboxes
                                        for (let option of options) {
                                            const checkbox = document.createElement("input");
                                            checkbox.type = "checkbox";
                                            checkbox.value = option;
                                            checkbox.id = companyFieldKey + index ;
                                        
                                            const label = document.createElement("label");
                                            label.textContent = option;
                                            label.htmlFor = option;
                                        
                                            const optionContainer = document.createElement("option");
                                            optionContainer.appendChild(label);
                                            select.appendChild(optionContainer);
                                            select.appendChild(checkbox);
                                            index += 1 ;
                                        }
                                    
                                        outerDivContiner.appendChild(select);
                                    
                                        // Event listener to capture selected values
                                        select.addEventListener("change", (event) => {
                                            const selectedOptions = [...event.target.selectedOptions].map((option) => option.value);
                                            if (selectedOptions[0] == 'Select an option'){
                                                fieldsVisibleOnExtensionForCompany[companyFieldKey] = '';
                                                select.style.color = '#777';
                                            }
                                            else {
                                                // set the error message to none
                                                document.getElementById(companyFieldKey + 'CompanyErrorMessage').style.display = 'none';

                                                fieldsVisibleOnExtensionForCompany[companyFieldKey] = selectedOptions;
                                                select.style.color = 'black';
                                            }
                                        });
                                        }
                                        
                                        container.appendChild(outerDivContiner);
                                        dropdownCustomFieldsForCompany.push(companyFieldKey);
                                        if(flagForNestedCustomFields){
                                            parentOptionSelected(companyFieldObject, companyFieldKey, '', companyEntityTypeId);
                                        }
                                    }
                                    
                                    
                                }

                                else if (companyFieldObject['type'] == 'multiselect'){
                                    if(flagForCompanyContacts && companyFieldObject['field'] == 'contactid' && companyFieldObject['show_on_extension']){
                                        $("#companyContacts").removeClass("d-none").addClass("d-block");
                                        let companyContactLabelContainer = document.getElementById('companyExistingContactLabel')
                                        let errorMessage = document.createElement('p');
                                        errorMessage.style.color = 'red';
                                        errorMessage.id = 'companyExistingContactsErrorMessage';
                                        errorMessage.style.display = 'none';
                                        errorMessage.innerHTML = 'Existing contacts field is required';

                                        // block for required fields validation
                                        if (companyFieldObject['required_on_form'] == true) {
                                            // add a star with red colour to the inner HTML label
                                            companyContactLabelContainer.innerHTML = 'Select Existing Contacts <span style="color: red;">*</span>';
                                        }
                                        companyContactLabelContainer.appendChild(errorMessage);
                                    } else if (companyFieldObject['field'] != 'contactid' && companyFieldObject['data']) {
                                        const options = companyFieldObject['data'].map(object => object.label);

                                        // create dynamically the outer container 
                                        const parentContainerMultiselect = document.getElementById('multiselectDataSectionForCompany'); 

                                        let outerDivContiner = document.createElement('div');
                                        outerDivContiner.id = companyFieldKey + 'CompanynestedDivId';
                                        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                        outerDivContiner.style.marginBottom = '5px';

                                        const headingOfField = document.createElement('label');
                                        headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                        headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                        headingOfField.innerHTML = companyFieldObject['label'];

                                        // block for required fields validation
                                        headingOfField.id = companyFieldKey + 'CompanyLabelId';
                                        let errorMessage = document.createElement('p');
                                        errorMessage.style.color = 'red';
                                        errorMessage.id = companyFieldKey + 'CompanyErrorMessage';
                                        errorMessage.style.display = 'none';
                                        errorMessage.innerHTML = '' + companyFieldObject['label'] + ' field is required';

                                        // block for required fields validation
                                        if (companyFieldObject['required_on_form'] == true) {
                                            // add a star with red colour to the inner HTML label
                                            headingOfField.innerHTML = companyFieldObject['label'] + ' <span style="color: red;">*</span>';
                                        }


                                        outerDivContiner.appendChild(headingOfField);
                                        outerDivContiner.appendChild(errorMessage);

                                        // it will store the id and value of the selected options
                                        const selectedOptions = {};
                                        defaultSelectedOptions[companyFieldKey+'ForCompany'] = {};
                                        multiselectCustomFieldsForCompany.push(companyFieldKey);

                                        // block to show the button to view options 
                                        var containerToShowMultiselectOption = document.createElement('div');
                                        containerToShowMultiselectOption.id = companyFieldKey + 'OuterContainerForOptionsForCompanyMultiselect';
                                        var buttonToShowMultiselectOption = document.createElement('div');
                                        buttonToShowMultiselectOption.id = companyFieldKey + 'buttonForCompanyMultiselect';
                                        buttonToShowMultiselectOption.innerHTML = "Select from List";
                                        containerToShowMultiselectOption.appendChild(buttonToShowMultiselectOption);

                                        // block to show the option container
                                        let searchInput = null;
                                        if (flagForSearchableDropdown){
                                            // input component for search
                                            searchInput = document.createElement('input');
                                            searchInput.setAttribute('type', 'text');
                                            searchInput.setAttribute('id', companyFieldKey + 'searchForCompanyMultiselect');
                                            searchInput.setAttribute('placeholder', 'Please Search & Select');
                                            searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                            searchInput.setAttribute('class', 'rcrm-ctrl');
                                        }

                                        var containerMultiselectOption = document.createElement('div');
                                        containerMultiselectOption.id = companyFieldKey + 'OptionsOuterContainerForCompanyMultiselect';
                                        var multiselectOption = document.createElement('ul');
                                        multiselectOption.id = companyFieldKey + 'optionsForCompanyMultiselect';
                                        multiselectOption.setAttribute('style', 'list-style: none;');

                                        if (flagForSearchableDropdown){
                                            containerMultiselectOption.appendChild(searchInput);
                                        }

                                        containerMultiselectOption.appendChild(multiselectOption);

                                        if (flagForSearchableDropdown){
                                            // when a search is performed we need to manipulate the options list
                                            searchInput.addEventListener('input', function(e){
                                                let searchValue = e.target.value.trim();
                                                let optionsList = document.getElementById(companyFieldKey + 'optionsForCompanyMultiselect');
                                                let optionsAll=companyFieldObject['data'];
                                                let options = optionsAll.map(object => object.label);
                                                let matchesCount = 0;
                                                let counter = 0;
                                                // optionsList.innerHTML = '';

                                                for (let option of options){
                                                    if (option.toLowerCase().includes(searchValue.toLowerCase())){ 
                                                        matchesCount += 1;
                                                        document.getElementById('ForCompanyMultiselect'+companyFieldKey + counter).style.display = 'block';
                                                    }
                                                    else {
                                                        document.getElementById('ForCompanyMultiselect'+companyFieldKey + counter).style.display = 'none';
                                                    }
                                                    counter += 1;
                                                }
                                                
                                                if (matchesCount == 0){
                                                    if (!document.getElementById(companyFieldKey + 'noResultsForCompanyMultiselect')){
                                                        var li = document.createElement('li');
                                                        li.textContent = 'No Results Found';
                                                        li.style.marginBottom = '5px';
                                                        li.style.padding = '5px';
                                                        li.style.color = 'black';
                                                        li.style.backgroundColor = '#E8E8E8';
                                                        li.id = companyFieldKey + 'noResultsForCompanyMultiselect';
                                                        li.style.border = '1px solid #F8FAFB';
                                                        optionsList.appendChild(li);
                                                    }
                                                }
                                                else if (matchesCount > 0) {
                                                    if (document.getElementById(companyFieldKey + 'noResultsForCompanyMultiselect')){
                                                        optionsList.removeChild(document.getElementById(companyFieldKey + 'noResultsForCompanyMultiselect'));
                                                    }
                                                }

                                                if ( matchesCount < 5 ) {
                                                    optionsList.style.height = 'auto';
                                                    optionsList.style.overflowY = 'hidden';
                                                }

                                                else {
                                                    optionsList.style.height = '200px';
                                                    optionsList.style.overflowY = 'scroll';
                                                }

                                                matchesCount = 0;
                                                optionsList = null;
                                            });

                                            // Add event listener for keydown event to prevent Enter key press
                                            searchInput.addEventListener('keydown', function(e) {
                                                if (e.key === 'Enter') {
                                                    e.preventDefault();
                                                }
                                            });
                                        }

                                        // block to show the selected options container
                                        var containerMultiselectSelectedOption = document.createElement('div');
                                        containerMultiselectSelectedOption.id = companyFieldKey + 'SelectedOptionContainerForCompanyMultiselect';
                                        listofmultiselectcolumnForCompany[companyFieldKey] = companyFieldKey+'SelectedOptionContainerForCompanyMultiselect';
                                        var selectedMultiselectOption = document.createElement('ul');
                                        selectedMultiselectOption.setAttribute('style', 'list-style: none;');
                                        selectedMultiselectOption.id = companyFieldKey + 'SelectedOptionsForCompanyMultiselect';
                                        containerMultiselectSelectedOption.appendChild(selectedMultiselectOption);

                                        outerDivContiner.appendChild(containerToShowMultiselectOption);
                                        outerDivContiner.appendChild(containerMultiselectOption);
                                        outerDivContiner.appendChild(containerMultiselectSelectedOption);
                                        parentContainerMultiselect.appendChild(outerDivContiner);
                                        if(flagForNestedCustomFields){
                                            parentOptionSelected(companyFieldObject, companyFieldKey, '', companyEntityTypeId);
                                        }

                                        // Keep track of selected values
                                        let selectedValues = [];

                                        // Get options list and selected list elements
                                        const optionsList = multiselectOption;
                                        const selectedList = selectedMultiselectOption;
                                        const toggleButton = buttonToShowMultiselectOption;

                                        // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                        if (options.length > 5){
                                            optionsList.style.height = '200px';
                                            optionsList.style.overflowY = 'scroll';
                                        }

                                        selectedList.style.height = '50px';
                                        selectedList.style.overflowY = 'scroll';


                                        // Set CSS properties dynamically on the Multiselect button
                                        toggleButton.style.cursor = 'pointer';
                                        toggleButton.style.padding = '3px';
                                        toggleButton.style.border = '1px solid #E8E8E8';
                                        toggleButton.style.height = '30px';
                                        toggleButton.style.marginBottom = '5px';
                                        toggleButton.style.borderRadius = '5px';
                                        toggleButton.style.paddingLeft = '5px';

                                        // Set CSS properties dynamically on the Multiselect Options Container
                                        containerMultiselectOption.style.display = 'none';
                                        containerMultiselectOption.style.border = '1px solid #E8E8E8';
                                        containerMultiselectOption.style.padding = '10px';
                                        containerMultiselectOption.style.marginBottom = '5px';
                                        containerMultiselectOption.style.borderRadius = '5px';

                                        // Set CSS properties dynamically on the Multiselect Selected container
                                        containerMultiselectSelectedOption.style.display = 'none';
                                        containerMultiselectSelectedOption.style.border = '1px solid #E8E8E8';
                                        containerMultiselectSelectedOption.style.padding = '10px';
                                        containerMultiselectSelectedOption.style.width = '100%';
                                        containerMultiselectSelectedOption.style.borderRadius = '5px';
                                        containerMultiselectSelectedOption.style.marginBottom = '5px';

                                        // Set toggle button click event
                                        toggleButton.addEventListener('click', toggleOptionsContainer);

                                        // Toggle options container visibility
                                        function toggleOptionsContainer() {
                                            document.getElementById(companyFieldKey + 'OptionsOuterContainerForCompanyMultiselect').style.display = document.getElementById(companyFieldKey + 'OptionsOuterContainerForCompanyMultiselect').style.display === 'none' ? 'block' : 'none';
                                        }

                                        // Sample data
                                        const data = options;

                                        multiselectCheckboxValueContainer['ForCompanyMultiselect'+companyFieldKey]={};
                                        // Generate options dynamically
                                        data.forEach((option, index) => {
                                            const li = document.createElement('li');
                                            li.textContent = option;
                                            li.id ='ForCompanyMultiselect'+companyFieldKey + index ;
                                            li.addEventListener('click', handleOptionClick);

                                            // Attach CSS properties dynamically
                                            li.style.cursor = 'pointer';
                                            li.style.marginBottom = '5px';
                                            li.style.padding = '5px';
                                            li.style.color = 'black';
                                            // li.style.backgroundColor = '#E8E8E8';

                                            const checkbox=document.createElement('input');
                                            checkbox.type="checkbox";
                                            checkbox.id='ForCompanyMultiselect'+companyFieldKey+'checkbox'+index;
                                            multiselectCheckboxValueContainer['ForCompanyMultiselect'+companyFieldKey]['ForCompanyMultiselect'+companyFieldKey + 'checkbox' + index] = option;
                                            checkbox.style.marginRight='10px';
                                            checkbox.style.cursor='pointer';
                                            checkbox.style.verticalAlign='middle';
                                            checkbox.addEventListener('click',handleMultiselectCheckboxClick);
                                            
                                            li.insertBefore(checkbox,li.firstChild);
                                            li.addEventListener('mouseover', function () {
                                                li.style.backgroundColor = '#f5f5f5';
                                            });

                                            li.addEventListener('mouseout', function () {
                                                li.style.backgroundColor = 'white';
                                            });

                                            optionsList.appendChild(li);
                                            document.getElementById('ForCompanyMultiselect'+companyFieldKey + 'checkbox' + index).value = option;
                                        });
                                        function handleMultiselectCheckboxClick(e) {

                                            // stop the event propagation
                                            e.stopPropagation();

                                            // get the id of the checkbox
                                            let checkboxId = e.target.id;
                                        
                                            let selectedOption = multiselectCheckboxValueContainer['ForCompanyMultiselect'+companyFieldKey][checkboxId];
                                            let selectedOptionId = checkboxId.replace('checkbox', '');

                                            let markAsChecked = e.target.checked;

                                            // if the checkbox is checked then add the option to the selected list
                                            if (markAsChecked && !(selectedOptionId in defaultSelectedOptions[companyFieldKey+'ForCompany'])){

                                                defaultSelectedOptions[companyFieldKey+'ForCompany'][selectedOptionId] = selectedOption;

                                                fieldsVisibleOnExtensionForCompany[companyFieldKey] = [];
                                                for (let key in defaultSelectedOptions[companyFieldKey+'ForCompany']){
                                                    fieldsVisibleOnExtensionForCompany[companyFieldKey].push(defaultSelectedOptions[companyFieldKey+'ForCompany'][key]);
                                                }

                                                if(flagForNestedCustomFields){
                                                    parentOptionSelected(companyFieldObject, companyFieldKey, fieldsVisibleOnExtensionForCompany[companyFieldKey], companyEntityTypeId);
                                                }
                                            
                                                selectedValues.push(selectedOption);


                                                // Create a new list item in the selected list
                                                const selectedListItem = document.createElement('li');
                                                selectedListItem.textContent = selectedOption;

                                                // Attach CSS properties dynamically
                                                selectedListItem.style.cursor = 'pointer';
                                                selectedListItem.style.marginBottom = '2px';
                                                selectedListItem.style.border = '1px solid #F8FAFB';
                                                // selectedListItem.style.backgroundColor = '#E8E8E8';
                                                selectedListItem.style.color = 'black';
                                                selectedListItem.style.paddingLeft = '5px';
                                                selectedListItem.setAttribute('id', selectedOptionId + 'Selected');

                                                // Add hover styling
                                                selectedListItem.addEventListener('mouseenter', function() {
                                                    selectedListItem.style.backgroundColor = '#D3E2E2';
                                                    selectedListItem.style.transform = 'scale(0.97)';
                                                    // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                                });
                                                
                                                selectedListItem.addEventListener('mouseleave', function() {
                                                    selectedListItem.style.backgroundColor = 'white';
                                                    selectedListItem.style.transform = 'scale(1)';
                                                    // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                                });

                                                document.getElementById(companyFieldKey + 'SelectedOptionContainerForCompanyMultiselect').style.display = 'inline-block';
                                                if (selectedValues.length == 1){
                                                    selectedList.style.height = '40px';
                                                }
                                                else{
                                                    selectedList.style.height = '60px';
                                                }
                                                selectedList.appendChild(selectedListItem);

                                                // Create remove option cross mark
                                                const removeOption = document.createElement('span');
                                                removeOption.textContent = 'X';
                                                removeOption.style.float = 'right';
                                                removeOption.style.marginRight = '5px';
                                                removeOption.style.color = 'black';
                                                removeOption.style.marginTop = '3px';
                                                removeOption.style.fontSize = '10px';
                                                removeOption.id = selectedOptionId + 'removeOption'+'ForCompanyMultiselect';

                                                removeOption.classList.add('remove-option');

                                                removeOption.addEventListener('click', function () {
                                                    removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                                                });

                                                // Create remove option circle
                                                const removeOptionCircle = document.createElement('span');
                                                removeOptionCircle.classList.add('remove-option-circle');

                                                // Append the removeOptionCircle to the removeOption
                                                removeOption.appendChild(removeOptionCircle);

                                                // Add hover styling to the removeOption element
                                                removeOption.addEventListener('mouseenter', function() {
                                                    selectedListItem.style.backgroundColor = '#f3dbdb';
                                                    removeOptionCircle.style.display = 'inline-block';
                                                });
                                                
                                                removeOption.addEventListener('mouseleave', function() {
                                                    selectedListItem.style.backgroundColor = '#E8E8E8';
                                                    removeOptionCircle.style.display = 'none';
                                                });

                                                selectedListItem.appendChild(removeOption);
                                            }


                                            else if (!markAsChecked){
                                                // dynamically click the li element to remove the selected option
                                                const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption'+'ForCompanyMultiselect');
                                                if (removeOptionButton){
                                                    removeOptionButton.click();
                                                }
                                            }
                                        }
                                        // Click event handler for options
                                        function handleOptionClick(e) {
                                            
                                            const selectedOption = e.target.textContent;
                                            const selectedOptionId = e.target.id;

                                            // set the error message to none
                                            document.getElementById(companyFieldKey + 'CompanyErrorMessage').style.display = 'none';


                                            // Add the selected value to the tracking array
                                            if (!(selectedOptionId in defaultSelectedOptions[companyFieldKey+'ForCompany'])){
                                                document.getElementById('ForCompanyMultiselect'+companyFieldKey + 'checkbox' + selectedOptionId.replace('ForCompanyMultiselect'+companyFieldKey, '')).checked = true;

                                            defaultSelectedOptions[companyFieldKey+'ForCompany'][selectedOptionId] = selectedOption;

                                                selectedOptions[selectedOptionId] = selectedOption;

                                                fieldsVisibleOnExtensionForCompany[companyFieldKey] = [];
                                                for (let key in defaultSelectedOptions[companyFieldKey+'ForCompany']){
                                                    fieldsVisibleOnExtensionForCompany[companyFieldKey].push(defaultSelectedOptions[companyFieldKey+'ForCompany'][key]);
                                                }

                                                if(flagForNestedCustomFields){
                                                    parentOptionSelected(companyFieldObject, companyFieldKey, fieldsVisibleOnExtensionForCompany[companyFieldKey], companyEntityTypeId);
                                                }
                                            
                                                selectedValues.push(selectedOption);

                                                // Create a new list item in the selected list
                                                const selectedListItem = document.createElement('li');
                                                selectedListItem.textContent = selectedOption;

                                                // Attach CSS properties dynamically
                                                selectedListItem.style.cursor = 'pointer';
                                                selectedListItem.style.marginBottom = '2px';
                                                selectedListItem.style.border = '1px solid #F8FAFB';
                                                // selectedListItem.style.backgroundColor = '#E8E8E8';
                                                selectedListItem.style.color = 'black';
                                                selectedListItem.style.paddingLeft = '5px';
                                                selectedListItem.setAttribute('id', selectedOptionId + 'Selected');
                                                // Add hover styling
                                                selectedListItem.addEventListener('mouseenter', function() {
                                                    selectedListItem.style.backgroundColor = '#D3E2E2';
                                                    selectedListItem.style.transform = 'scale(0.97)';
                                                    // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                                });
                                                
                                                selectedListItem.addEventListener('mouseleave', function() {
                                                    selectedListItem.style.backgroundColor = 'white';
                                                    selectedListItem.style.transform = 'scale(1)';
                                                    // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                                });

                                                document.getElementById(companyFieldKey + 'SelectedOptionContainerForCompanyMultiselect').style.display = 'inline-block';
                                                if (selectedValues.length == 1){
                                                    selectedList.style.height = '40px';
                                                }
                                                else{
                                                    selectedList.style.height = '60px';
                                                }
                                                selectedList.appendChild(selectedListItem);

                                                // Create remove option cross mark
                                                const removeOption = document.createElement('span');
                                                removeOption.textContent = 'X';
                                                removeOption.style.float = 'right';
                                                removeOption.style.marginRight = '5px';
                                                removeOption.style.color = 'black';
                                                removeOption.style.marginTop = '3px';
                                                removeOption.style.fontSize = '10px';
                                                removeOption.id=selectedOptionId+'removeOption'+'ForCompanyMultiselect' 
                                                removeOption.classList.add('remove-option');

                                                removeOption.addEventListener('click', function () {
                                                    removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                                                });

                                                // Create remove option circle
                                                const removeOptionCircle = document.createElement('span');
                                                removeOptionCircle.classList.add('remove-option-circle');

                                                // Append the removeOptionCircle to the removeOption
                                                removeOption.appendChild(removeOptionCircle);

                                                // Add hover styling to the removeOption element
                                                removeOption.addEventListener('mouseenter', function() {
                                                    selectedListItem.style.backgroundColor = '#f3dbdb';
                                                    removeOptionCircle.style.display = 'inline-block';
                                                });
                                                
                                                removeOption.addEventListener('mouseleave', function() {
                                                    selectedListItem.style.backgroundColor = '#E8E8E8';
                                                    removeOptionCircle.style.display = 'none';
                                                });

                                                selectedListItem.appendChild(removeOption);
                                            }
                                            else{
                                                document.getElementById('ForCompanyMultiselect'+companyFieldKey + 'checkbox' + selectedOptionId.replace('ForCompanyMultiselect'+companyFieldKey, '')).checked = false;
                                                const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption'+'ForCompanyMultiselect');
                                                if (removeOptionButton){
                                                    removeOptionButton.click();
                                                }
                                            }
                                        }


                                        // Remove selected option
                                        function removeSelectedOption(option, listItem, selectedOptionId) {
                                            // Remove from the tracking array
                                            
                                            delete defaultSelectedOptions[companyFieldKey+'ForCompany'][selectedOptionId];
                                            fieldsVisibleOnExtensionForCompany[companyFieldKey] = [];
                                            
                                            for (let key in defaultSelectedOptions[companyFieldKey+'ForCompany']){
                                                fieldsVisibleOnExtensionForCompany[companyFieldKey].push(defaultSelectedOptions[companyFieldKey+'ForCompany'][key]);
                                            }
                                            if(flagForNestedCustomFields){
                                                parentOptionSelected(companyFieldObject, companyFieldKey, fieldsVisibleOnExtensionForCompany[companyFieldKey], companyEntityTypeId);
                                            }
                                        
                                            // Remove the list item from the selected list
                                            listItem.remove();

                                            if (fieldsVisibleOnExtensionForCompany[companyFieldKey].length == 0){
                                                document.getElementById(companyFieldKey + 'SelectedOptionContainerForCompanyMultiselect').style.display = 'none';
                                                fieldsVisibleOnExtensionForCompany[companyFieldKey] = null;
                                            }
                                            
                                            const correspondingCheckbox = document.getElementById(selectedOptionId.replace(companyFieldKey, companyFieldKey+'checkbox'));
                                            if (correspondingCheckbox){
                                                correspondingCheckbox.checked = false;
                                            }
                                        
                                        }
                                    }

                                }

                                else if (companyFieldObject["type"] == 'checkbox'){
                                    // Get the container element where the checkbox will be added
                                    const checkboxContainer = document.getElementById('checkboxSectionForCompany');

                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.id = companyFieldKey + 'CompanynestedDivId';
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label rightCheckbox");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = companyFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = companyFieldKey + 'CompanyLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyFieldKey + 'CompanyErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (companyFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = companyFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }


                                    outerDivContiner.appendChild(headingOfField);

                                    // Create the checkbox element
                                    const checkboxElement = document.createElement('input');
                                    checkboxElement.type = 'checkbox';
                                    checkboxElement.id = companyFieldKey + 'ForCompany';
                                    checkboxElement.setAttribute('style', 'margin-bottom:15px;');

                                    // Add a change event listener to the checkbox element
                                    checkboxElement.addEventListener('change', (event) => {
                                        // Get the checked state of the checkbox element
                                        const isChecked = event.target.checked;
                                        
                                        let checkBoxValue = '';
                                        // Save the checked state in the JavaScript object
                                        if (isChecked){
                                            // set the error message to none
                                            document.getElementById(companyFieldKey + 'CompanyErrorMessage').style.display = 'none';

                                            fieldsVisibleOnExtensionForCompany[companyFieldKey] = '1';
                                            checkBoxValue = 'Yes';
                                        }
                                        else{
                                            fieldsVisibleOnExtensionForCompany[companyFieldKey] = '0';
                                            checkBoxValue = 'No';
                                        }

                                        if(flagForNestedCustomFields){
                                            parentOptionSelected(companyFieldObject, companyFieldKey, checkBoxValue, companyEntityTypeId);
                                        }
                                        
                                    });

                                    fieldsVisibleOnExtensionForCompany[companyFieldKey] = '0';

                                    // Add the checkbox element to the container element
                                    outerDivContiner.appendChild(checkboxElement);
                                    outerDivContiner.appendChild(errorMessage);
                                    checkboxContainer.appendChild(outerDivContiner);

                                    if(flagForNestedCustomFields){
                                        parentOptionSelected(companyFieldObject, companyFieldKey, 'No', companyEntityTypeId);
                                    }
                                }

                                else if (companyFieldObject['type'] == 'date'){
                                    // Get the container element where the date input will be added
                                    const dateContainer = document.getElementById('dateSectionForCompany');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = companyFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = companyFieldKey + 'CompanyLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyFieldKey + 'CompanyErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (companyFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = companyFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }


                                    dateContainer.appendChild(headingOfField);
                                    dateContainer.appendChild(errorMessage);

                                    // Create the date input element
                                    const dateElement = document.createElement('input');
                                    dateElement.type = 'date';
                                    dateElement.id = companyFieldKey + 'ForCompany';
                                    dateElement.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border: 1px #E8E8E8 solid; border-radius: 5px; color: #777; padding-left: 5px; text-transform: uppercase; ');

                                    // Add a change event listener to the date input element
                                    dateElement.addEventListener('change', (event) => {
                                        // Get the selected date from the date input element
                                        const selectedDate = new Date(event.target.value);
                                        
                                        // Get the UNIX timestamp of the selected date
                                        const timestamp = selectedDate.getTime() / 1000;

                                        // set the error message to none
                                        document.getElementById(companyFieldKey + 'CompanyErrorMessage').style.display = 'none';

                                        // change the color to black
                                        dateElement.style.color = 'black';

                                        if(flagForStandardDateField){
                                            var date = new Date(timestamp*1000);
                                            // var dat = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear();
                                            var month  = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1)));
                                            var dat = ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) ;
                                            var year = date.getFullYear();

                                            fieldsVisibleOnExtensionForCompany[companyFieldKey] = ''+year+'-'+month+'-'+dat;
                                        }else{        
                                            // Save the UNIX timestamp in the JavaScript object
                                            fieldsVisibleOnExtensionForCompany[companyFieldKey] = timestamp;

                                        }

                                        if (selectedDate == 'Invalid Date'){
                                            dateElement.style.color = '#777';
                                            fieldsVisibleOnExtensionForCompany[companyFieldKey] = null;
                                        }
                                        
                                    });

                                    // Add the date input element to the container element
                                    dateContainer.appendChild(dateElement);
                                    fieldsVisibleOnExtensionForCompany[companyFieldKey] = null;
                                }

                                else if (companyFieldObject['type'] == 'date_time'){
                                    // Get the container element where the date input will be added
                                    const dateContainer = document.getElementById('dateTimeSectionForCompany');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = companyFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = companyFieldKey + 'CompanyLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyFieldKey + 'CompanyErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (companyFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = companyFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }


                                    dateContainer.appendChild(headingOfField);
                                    dateContainer.appendChild(errorMessage);

                                    // Create the date input element
                                    const dateElement = document.createElement('input');
                                    dateElement.type = 'datetime-local';
                                    dateElement.id = companyFieldKey + 'ForCompany';
                                    dateElement.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border: 1px #E8E8E8 solid; border-radius: 5px; color: #777; padding-left: 5px; text-transform: uppercase; ');

                                    // Add a change event listener to the date input element
                                    dateElement.addEventListener('change', (event) => {
                                        // Get the selected date from the date input element
                                        const selectedDate = new Date(event.target.value);
                                        
                                        // Get the UNIX timestamp of the selected date
                                        const timestamp = selectedDate.getTime() / 1000;

                                        // set the error message to none
                                        document.getElementById(companyFieldKey + 'CompanyErrorMessage').style.display = 'none';

                                        // change the color to black
                                        dateElement.style.color = 'black';

                                        // Save the UNIX timestamp in the JavaScript object
                                        fieldsVisibleOnExtensionForCompany[companyFieldKey] = timestamp;

                                        if (selectedDate == 'Invalid Date'){
                                            dateElement.style.color = '#777';
                                            fieldsVisibleOnExtensionForCompany[companyFieldKey] = null;
                                        }
                                        
                                    });

                                    // Add the date input element to the container element
                                    dateContainer.appendChild(dateElement);
                                    fieldsVisibleOnExtensionForCompany[companyFieldKey] = null;
                                }

                                else if (companyFieldObject['type'] == "number" || companyFieldObject['type'] == "decimal"){
                                    let outerDivContiner = document.createElement('div');
                                    outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
                                    outerDivContiner.style.marginBottom = '5px';

                                    let labelContainer = document.createElement('label');
                                    labelContainer.setAttribute('class', 'rcrm-headings-label');
                                    labelContainer.innerHTML = companyFieldObject['label'];

                                    // block for required fields validation
                                    labelContainer.id = companyFieldKey + 'CompanyLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyFieldKey + 'CompanyErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (companyFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        labelContainer.innerHTML = companyFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }

                                    let inputContainer = document.createElement('input');
                                    inputContainer.type = 'number';
                                    inputContainer.id = companyFieldKey + 'ForCompany';
                                    inputContainer.setAttribute('style', 'width:95%; ');
                                    inputContainer.setAttribute('class', 'rcrm-ctrl');

                                    inputContainer.addEventListener("keydown", function(event) {
                                        if (event.key === 'e' || event.key === 'E' || event.key === '+') {
                                            event.preventDefault();
                                        }
                                    });

                                    inputContainer.step = "0.01";
                                    inputContainer.addEventListener("input", () => {
                                        let value = inputContainer.value;

                                        // set the error message to none
                                        document.getElementById(companyFieldKey + 'CompanyErrorMessage').style.display = 'none';

                                        const parts = value.split('.');
                                        if (parts.length == 2 && parts[1].length > 2){
                                            parts[1] = parts[1].slice(0, 2);
                                            inputContainer.value = parts.join('.');
                                        }
                                    });

                                    outerDivContiner.appendChild(labelContainer);
                                    outerDivContiner.appendChild(errorMessage);
                                    outerDivContiner.appendChild(inputContainer);

                                    textFieldsContainerForCompany.appendChild(outerDivContiner);
                                }else if (flagForFileCustomField && companyFieldObject['type'] == 'file'){
                                    
                                    // Get the container element where the file input will be added
                                    const fileContainer = document.getElementById('fileContainerForCompany');

                                    // create the lable component:
                                    const headingOfField = document.createElement('label');
                                    headingOfField.setAttribute('class' ,"rcrm-headings-label");
                                    headingOfField.setAttribute('style', 'margin-bottom:5px;');
                                    headingOfField.innerHTML = companyFieldObject['label'];

                                    // block for required fields validation
                                    headingOfField.id = companyFieldKey + 'CompanyLabelId';
                                    let errorMessage = document.createElement('p');
                                    errorMessage.style.color = 'red';
                                    errorMessage.id = companyFieldKey + 'CompanyErrorMessage';
                                    errorMessage.style.display = 'none';
                                    errorMessage.innerHTML = '' + companyFieldObject['label'] + ' field is required';

                                    // block for required fields validation
                                    if (companyFieldObject['required_on_form'] == true) {
                                        // add a star with red colour to the inner HTML label
                                        headingOfField.innerHTML = companyFieldObject['label'] + ' <span style="color: red;">*</span>';
                                    }


                                    fileContainer.appendChild(headingOfField);
                                    fileContainer.appendChild(errorMessage);

                                    // Create the file input element
                                    const fileElement = document.createElement('input');
                                    fileElement.type = 'file';
                                    fileElement.id = companyFieldKey+'ForCompany';
                                    fileElement.setAttribute('style', 'margin-bottom:10px; border: 1px #E8E8E8 solid; font-size: 13px; display: none;');

                                    // Create the label element
                                    var label = document.createElement('label');
                                    label.setAttribute('for', companyFieldKey+'ForCompany');
                                    label.setAttribute('id', companyFieldKey+'ForCompany' + 'label');
                                    label.setAttribute('style', 'display: inline-block; border: 1px solid #E8E8E8; background-color: white; cursor: pointer; width: 95%; height: 25px; margin-bottom: 10px; border-radius: 5px;');

                                    // Create the span element for the text
                                    var span = document.createElement('span');
                                    span.setAttribute('id', companyFieldKey+'ForCompany' + 'span');
                                    span.setAttribute('style', 'padding-right: 5px; padding-left: 5px; ');
                                    span.textContent = 'Upload File';

                                    // Create the icon element
                                    var icon = document.createElement('i');
                                    icon.setAttribute('class', 'mdi mdi-upload mdi-13px'); // Add your desired icon class here

                                    // Append the span and icon elements to the label
                                    label.appendChild(span);
                                    label.appendChild(icon);

                                    fileElement.addEventListener('change', (event) => {
                                        // set the error message to none
                                        document.getElementById(companyFieldKey + 'CompanyErrorMessage').style.display = 'none';

                                        const uploadedFile = event.target.files[0];
                                        if (uploadedFile) {
                                            let nameOfFile = uploadedFile.name;
                                            if (nameOfFile.length < 28){
                                                // span.textContent = nameOfFile;
                                                document.getElementById(companyFieldKey+'ForCompany' + 'span').textContent = nameOfFile;
                                                document.getElementById(companyFieldKey+'ForCompany' + 'span').style.color = 'black';
                                            }
                                            else {
                                                nameOfFile = nameOfFile.split('.');
                                                let firstHalfName = nameOfFile[0]?.slice(0, 25);
                                                let completeName = firstHalfName + '.. .' + nameOfFile[nameOfFile.length - 1];
                                                // span.textContent = completeName;
                                                document.getElementById(companyFieldKey+'ForCompany' + 'span').textContent = completeName;
                                                document.getElementById(companyFieldKey+'ForCompany' + 'span').style.color = 'black';
                                            }
                                            
                                        } else {
                                            span.textContent = 'Upload File';
                                            document.getElementById(companyFieldKey+'ForCompany' + 'span').style.color = '';
                                        }
                                        const reader = new FileReader();
                                        reader.onload = function() {
                                            const base64String = reader.result.split(',')[1];
                                            fileDataForCompany[companyFieldKey] = {
                                                'file': base64String,
                                                'filename': uploadedFile.name,
                                                'filetype': uploadedFile.type,
                                                'filesize': uploadedFile.size
                                            };
                                            
                                        };
                                        reader.readAsDataURL(uploadedFile);
                                        // fieldsVisibleOnExtensionForCompany[companyFieldKey] = uploadedFile ? uploadedFile : '';

                                    });

                                    // Add the file input element to the container element
                                    fileContainer.appendChild(fileElement);
                                    fileContainer.appendChild(label);
                                    fileTypeCustomFieldsForCompany.push(companyFieldKey);
                                }

                                else if (isEntityTypeField(companyFieldObject['type'])){
                                    const parentContainerMultiselect = document.getElementById('multiselectDataSectionForCompany');
                                    renderEntityTypeField(companyFieldObject, companyFieldKey, companyEntityTypeId, parentContainerMultiselect)
                                }

                            }
                        }   

                        // Get all input elements using a CSS selector, code to handle events 
                        const inputElements = document.querySelectorAll('input[type="text"], input[type="email"], input[type="number"]');

                        // Loop through all input elements and add an input event listener
                        inputElements.forEach(inputElement => {
                            inputElement.addEventListener('input', (event) => {
                                // Get the value entered in the input element
                                const inputValue = event.target.value;
                                
                                // Get the ID of the input element
                                const inputId = event.target.id;
                                if(flagForAddressFields){
                                    checkAddressField(inputId);
                                }
                                const entity_form_name = event.target.form.id;
                                // Save the value in the JavaScript object with the input ID as the key
                                if (fieldsVisibleOnExtension.hasOwnProperty(inputId)){
                                    // set the error message visibility to none
                                    if (document.getElementById(inputId + 'ErrorMessage')){
                                        document.getElementById(inputId + 'ErrorMessage').style.display = 'none';
                                    }

                                    if (document.getElementById(inputId + 'ContactErrorMessage')){
                                        document.getElementById(inputId + 'ContactErrorMessage').style.display = 'none';
                                    }

                                    if (document.getElementById(inputId + 'CompanyErrorMessage')){
                                        document.getElementById(inputId + 'CompanyErrorMessage').style.display = 'none';
                                    }

                                    fieldsVisibleOnExtension[inputId] = inputValue;

                                    if (candidateColumns[inputId]['type'] == 'number' || candidateColumns[inputId]['type'] == 'decimal'){
                                        fieldsVisibleOnExtension[inputId] = parseFloat(inputValue);
                                    }
                                    if((inputId == 'salaryexpectation' || inputId == 'currentsalary') && inputValue == ''){
                                        fieldsVisibleOnExtension[inputId] = 0;
                                    }
                                }

                                if(entity_form_name == 'contact_form'){
                                    var newInputId = inputId.replace('ForContact','');
                                    if (fieldsVisibleOnExtensionForContact.hasOwnProperty(newInputId)){
                                        // console.log(inputId.replace('ForContactnewInputId',''));
                                        fieldsVisibleOnExtensionForContact[newInputId] = inputValue;
                                        if (contactColumns[newInputId]['type'] == 'number' || contactColumns[newInputId]['type'] == 'decimal'){
                                            fieldsVisibleOnExtensionForContact[newInputId] = parseFloat(inputValue);
                                        }

                                        if (document.getElementById(newInputId + 'ContactErrorMessage')){
                                            document.getElementById(newInputId + 'ContactErrorMessage').style.display = 'none';
                                        }
    
                                        if (document.getElementById(newInputId + 'CompanyErrorMessage')){
                                            document.getElementById(newInputId + 'CompanyErrorMessage').style.display = 'none';
                                        }
                                    }
                                }else if(entity_form_name == 'company_form'){
                                    var newInputId = '';
                                    if(inputId.includes('ForCompanyContact')){
                                        newInputId = inputId.replace('ForCompanyContact','');
                                        if (fieldsVisibleOnExtensionForCompanyContact.hasOwnProperty(newInputId)){
                                            fieldsVisibleOnExtensionForCompanyContact[newInputId] = inputValue;
                                            if (contactColumns[newInputId]['type'] == 'number' || contactColumns[newInputId]['type'] == 'decimal'){
                                                fieldsVisibleOnExtensionForCompanyContact[newInputId] = parseFloat(inputValue);
                                            }
                                        }
                                        if (document.getElementById(newInputId + 'ContactErrorMessage')){
                                            document.getElementById(newInputId + 'ContactErrorMessage').style.display = 'none';
                                        }
    
                                        if (document.getElementById(newInputId + 'CompanyErrorMessage')){
                                            document.getElementById(newInputId + 'CompanyErrorMessage').style.display = 'none';
                                        }

                                        if (document.getElementById(newInputId + 'CompanyContactErrorMessage')){
                                            document.getElementById(newInputId + 'CompanyContactErrorMessage').style.display = 'none';
                                        }
                                    }else{
                                        newInputId = inputId.replace('ForCompany','');
                                        if (fieldsVisibleOnExtensionForCompany.hasOwnProperty(newInputId)){
                                            fieldsVisibleOnExtensionForCompany[newInputId] = inputValue;
                                            if (companyColumns[newInputId]['type'] == 'number' || companyColumns[newInputId]['type'] == 'decimal'){
                                                fieldsVisibleOnExtensionForCompany[newInputId] = parseFloat(inputValue);
                                            }
                                        }
                                        if (document.getElementById(newInputId + 'ContactErrorMessage')){
                                            document.getElementById(newInputId + 'ContactErrorMessage').style.display = 'none';
                                        }
    
                                        if (document.getElementById(newInputId + 'CompanyErrorMessage')){
                                            document.getElementById(newInputId + 'CompanyErrorMessage').style.display = 'none';
                                        }

                                        if (document.getElementById(newInputId + 'CompanyContactErrorMessage')){
                                            document.getElementById(newInputId + 'CompanyContactErrorMessage').style.display = 'none';
                                        }
                                    }
                                }

                            });
                        });


                        // Get all textarea elements using a CSS selector
                        const textareaElements = document.querySelectorAll('textarea');

                        // Loop through all textarea elements and add an input event listener
                        textareaElements.forEach(textareaElement => {
                            textareaElement.addEventListener('input', (event) => {
                                // Get the value entered in the textarea element
                                const textareaValue = event.target.value;
                                const entity_form_name = event.target.form.id;
                                // Get the ID of the textarea element
                                const textareaId = event.target.id;
                                
                                // Save the value in the JavaScript object with the textarea ID as the key
                                if (fieldsVisibleOnExtension.hasOwnProperty(textareaId)){
                                    // set the error message visibility to none
                                    if (document.getElementById(textareaId + 'ErrorMessage')){
                                        document.getElementById(textareaId + 'ErrorMessage').style.display = 'none';
                                    }

                                    if (document.getElementById(textareaId + 'ContactErrorMessage')){
                                        document.getElementById(textareaId + 'ContactErrorMessage').style.display = 'none';
                                    }

                                    if (document.getElementById(textareaId + 'CompanyErrorMessage')){
                                        document.getElementById(textareaId + 'CompanyErrorMessage').style.display = 'none';
                                    }

                                    fieldsVisibleOnExtension[textareaId] = textareaValue;
                                }
                                if(entity_form_name == 'contact_form'){
                                    const newTextAreaId = textareaId.replace('ForContact','');
                                    if (fieldsVisibleOnExtensionForContact.hasOwnProperty(newTextAreaId)){
                                        fieldsVisibleOnExtensionForContact[newTextAreaId] = textareaValue;
                                    }

                                    if (document.getElementById(textareaId + 'ContactErrorMessage')){
                                        document.getElementById(textareaId + 'ContactErrorMessage').style.display = 'none';
                                    }

                                    if (document.getElementById(textareaId + 'CompanyErrorMessage')){
                                        document.getElementById(textareaId + 'CompanyErrorMessage').style.display = 'none';
                                    }

                                }else if(entity_form_name == 'company_form'){
                                    var newTextAreaId = ''
                                    if(textareaId.includes('ForCompanyContact')){
                                        newTextAreaId = textareaId.replace('ForCompanyContact','');
                                        if (fieldsVisibleOnExtensionForCompanyContact.hasOwnProperty(newTextAreaId)){
                                            fieldsVisibleOnExtensionForCompanyContact[newTextAreaId] = textareaValue;
                                        }
                                    }else{
                                        newTextAreaId = textareaId.replace('ForCompany','');
                                        if (fieldsVisibleOnExtensionForCompany.hasOwnProperty(newTextAreaId)){
                                            fieldsVisibleOnExtensionForCompany[newTextAreaId] = textareaValue;
                                        }
                                    }
                                    if (document.getElementById(textareaId + 'ContactErrorMessage')){
                                        document.getElementById(textareaId + 'ContactErrorMessage').style.display = 'none';
                                    }

                                    if (document.getElementById(textareaId + 'CompanyErrorMessage')){
                                        document.getElementById(textareaId + 'CompanyErrorMessage').style.display = 'none';
                                    }
                                }
                            });
                        });
                    }

                    else if (!flagForShowOnExtension) {
                        document.getElementById('additionalDetailsHeaderEmpty').style.display = 'none';
                        document.getElementById('additionalDetailsHeaderForContactEmpty').style.display = 'none';
                        document.getElementById('additionalDetailsHeaderForCompanyEmpty').style.display = 'none';
                        document.getElementById('reorderSectionsHeader').style.display = 'none';
                    }

                    if (flagForShowOnExtension && !flagForWorkAndEducation){
                        document.getElementById('reorderSectionsHeader').style.display = 'none';
                        document.getElementById('additionalDetailsHeaderEmpty').style.display = 'none';
                    }


                    // block for marking field as required 


                    // check for Candidate Standard fields
                    if (enforceRequiredFieldsOnExtension && enforceRequiredFieldsOnExtension?.candidate == true) {
                        if (candidateColumns.firstname.required_on_form == true) {
                            const firstNameInput = document.getElementById('candidate_firstname');
                            firstNameInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            firstNameInput.setAttribute('placeholder', 'Candidate First Name *');

                            if (flagForEnforceRequiredFieldsOnExtension && firstNameInput) {
                                firstNameInput.setAttribute('required', 'required');
                            }
                        }

                        if (candidateColumns.emailid.required_on_form == true) {
                            const emailInput = document.getElementById('candidate_email');
                            emailInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            emailInput.setAttribute('placeholder', 'Email *');

                            if (flagForEnforceRequiredFieldsOnExtension && emailInput) {
                                emailInput.setAttribute('required', 'required');
                            }
                        }

                        if (candidateColumns.lastname.required_on_form == true) {
                            const lastNameInput = document.getElementById('candidate_lastname');    
                            lastNameInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            lastNameInput.setAttribute('placeholder', 'Candidate Last Name *');

                            if (flagForEnforceRequiredFieldsOnExtension && lastNameInput) {
                                lastNameInput.setAttribute('required', 'required');
                            }
                        }

                        if (candidateColumns.contactnumber.required_on_form == true) {
                            const contactNumberInput = document.getElementById('candidate_phone');
                            contactNumberInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            contactNumberInput.setAttribute('placeholder', 'Phone *');

                            if (flagForEnforceRequiredFieldsOnExtension && contactNumberInput) {
                                contactNumberInput.setAttribute('required', 'required');
                            }
                        }

                        if (candidateColumns.locality.required_on_form == true) {
                            const localityInput = document.getElementById('candidate_location');
                            localityInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            localityInput.setAttribute('placeholder', 'Locality *');

                            if (flagForEnforceRequiredFieldsOnExtension && localityInput) {
                                localityInput.setAttribute('required', 'required');
                            }
                        }

                        if (candidateColumns.lastorganisation.required_on_form == true) {
                            const lastOrganisationLabel = document.getElementById('candidate_lastorganisation_label');
                            const lastOrganisationInput = document.getElementById('candidate_lastorganisation');
                            lastOrganisationLabel.innerHTML = 'Organisation <span style="color: red;">*</span>';

                            if (flagForEnforceRequiredFieldsOnExtension && lastOrganisationInput) {
                                lastOrganisationInput.setAttribute('required', 'required');
                            }
                        }

                        if (candidateColumns.position.required_on_form == true) {
                            const positionInput = document.getElementById('candidate_position');
                            positionInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            positionInput.setAttribute('placeholder', 'Title / Position *');

                            if (flagForEnforceRequiredFieldsOnExtension && positionInput) {
                                positionInput.setAttribute('required', 'required');
                            }
                        }
                    }

                    // check for contact Standard fields 
                    if (enforceRequiredFieldsOnExtension && enforceRequiredFieldsOnExtension?.contact == true) {
                        if (contactColumns.firstname.required_on_form == true) {
                            const firstNameInput = document.getElementById('contact_firstname');
                            firstNameInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            firstNameInput.setAttribute('placeholder', 'Contact First Name *');

                            if (flagForEnforceRequiredFieldsOnExtension && firstNameInput) {
                                firstNameInput.setAttribute('required', 'required');
                            }
                        }

                        if (contactColumns.lastname.required_on_form == true) {
                            const lastNameInput = document.getElementById('contact_lastname');
                            lastNameInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            lastNameInput.setAttribute('placeholder', 'Contact Last Name *');

                            if (flagForEnforceRequiredFieldsOnExtension && lastNameInput) {
                                lastNameInput.setAttribute('required', 'required');
                            }
                        }

                        if (contactColumns.designation.required_on_form == true) {
                            const designationInput = document.getElementById('contact_designation');
                            designationInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            designationInput.setAttribute('placeholder', 'Title *');

                            if (flagForEnforceRequiredFieldsOnExtension && designationInput) {
                                designationInput.setAttribute('required', 'required');
                            }
                        }

                        if (contactColumns.email.required_on_form == true) {
                            const emailInput = document.getElementById('contact_email');
                            emailInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            emailInput.setAttribute('placeholder', 'Email *');

                            if (flagForEnforceRequiredFieldsOnExtension && emailInput) {
                                emailInput.setAttribute('required', 'required');
                            }
                        }

                        if (contactColumns.contactnumber.required_on_form == true) {
                            const contactNumberInput = document.getElementById('contact_contactnumber');
                            contactNumberInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            contactNumberInput.setAttribute('placeholder', 'Phone *');

                            if (flagForEnforceRequiredFieldsOnExtension && contactNumberInput) {
                                contactNumberInput.setAttribute('required', 'required');
                            }
                        }

                        if (contactColumns.locality.required_on_form == true) {
                            const localityInput = document.getElementById('contact_locality');
                            localityInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            localityInput.setAttribute('placeholder', 'Contact Locality *');

                            if (flagForEnforceRequiredFieldsOnExtension && localityInput) {
                                localityInput.setAttribute('required', 'required');
                            }
                        }

                        if (contactColumns.address.required_on_form == true) {
                            const addressInput = document.getElementById('contact_address');
                            addressInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            addressInput.setAttribute('placeholder', 'Full Address *');

                            if (flagForEnforceRequiredFieldsOnExtension && addressInput) {
                                addressInput.setAttribute('required', 'required');
                            }
                        }

                        if (contactColumns.companyid.required_on_form == true) {
                            const companyInput = document.getElementById('contact_companyid');
                            companyInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            companyInput.setAttribute('placeholder', 'Company Name in Recruit CRM Database *');

                            if (flagForEnforceRequiredFieldsOnExtension && companyInput) {
                                companyInput.setAttribute('required', 'required');
                            }
                        }
                    }


                    // check for company Standard fields
                    if (enforceRequiredFieldsOnExtension && enforceRequiredFieldsOnExtension?.company == true) {
                        if (companyColumns.companyname.required_on_form == true) {
                            const companyNameInput = document.getElementById('company_companyname');
                            companyNameInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            companyNameInput.setAttribute('placeholder', 'Company Name *');

                            if (flagForEnforceRequiredFieldsOnExtension && companyNameInput) {
                                companyNameInput.setAttribute('required', 'required');
                            }
                        }

                        if (companyColumns.website.required_on_form == true) {
                            const websiteInput = document.getElementById('company_website');
                            websiteInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            websiteInput.setAttribute('placeholder', 'Website *');

                            if (flagForEnforceRequiredFieldsOnExtension && websiteInput) {
                                websiteInput.setAttribute('required', 'required');
                            }
                        }

                        if (companyColumns.aboutcompany.required_on_form == true) {
                            const aboutCompanyInput = document.getElementById('company_aboutcompany');
                            aboutCompanyInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            aboutCompanyInput.setAttribute('placeholder', 'About company... *');

                            if (flagForEnforceRequiredFieldsOnExtension && aboutCompanyInput) {
                                aboutCompanyInput.setAttribute('required', 'required');
                            }
                        }

                        if (companyColumns.address.required_on_form == true) {
                            const addressInput = document.getElementById('company_fulladdress');
                            addressInput.classList.add('placeholder-red'); // Add CSS class to change placeholder color
                            addressInput.setAttribute('placeholder', 'City, State, Country *');

                            if (flagForEnforceRequiredFieldsOnExtension && addressInput) {
                                addressInput.setAttribute('required', 'required');
                            }
                        }
                    }



                    //Setting override data in case override is not available in cookies
                    if (typeof (extSettings.overrideData) == "undefined") {
                        storeInLocalStorage("overrideData", true)
                    }

                    //Setting saveCandidate and saveContact in case key not available in cookies
                    if (typeof (extSettings.saveContact) == "undefined" || typeof (extSettings.saveCandidate) == "undefined") {
                        storeInLocalStorage("saveContact", false)
                        storeInLocalStorage("saveCandidate", false)
                    }

                    //Setting saveCandidateFromCompany in case key not available in cookies
                    if (typeof (extSettings.saveCandidateFromCompany) == "undefined") {
                        storeInLocalStorage("saveCandidateFromCompany", false)
                    }

                    //add event listners for google meet button
                    if (EventListnsers.indexOf(".add_g_meet") == -1) {
                        document.getElementById("add_g_meet").addEventListener("click", function () {
                            setIsProcessing('#add_g_meet');
                            sendMessageToParent({"message": "addGMeet"});
                        })
                        EventListnsers.push(".add_g_meet");
                    }
                    if (EventListnsers.indexOf(".join_g_meet") == -1) {
                        document.getElementById("connect_g_meet").addEventListener("click", function () {
                            var url = BASE_APP_URL + '/v1/user/meeting_integration';
                            window.open(url, '_blank');
                        })
                        EventListnsers.push(".join_g_meet");
                    }
                    if (EventListnsers.indexOf(".join_g_meet_btn") == -1) {
                        document.getElementById("join_g_meet_btn").addEventListener("click", function () {
                            sendMessageToParent({"message": "joinGMeet"});
                        });
                        EventListnsers.push(".join_g_meet_btn");
                    }
                    if (EventListnsers.indexOf(".delete_gmeet_link") == -1) {
                        document.getElementById("delete_gmeet_link").addEventListener("click", function () {
                            document.getElementById("appointment_address").value = "";
                            setDisplayForIds('add_g_meet', 'flex');
                            setDisplayForIds('join_g_meet', 'none');
                        });
                        EventListnsers.push(".delete_gmeet_link");
                    }
                    if (EventListnsers.indexOf(".copy_g_meet_link") == -1) {
                        document.getElementById("copy_g_meet_link").addEventListener("click", function() {
                            var textToCopy = document.getElementById("appointment_address").value;
                            navigator.clipboard.writeText(textToCopy);
                            toastr.success("Google Meet link copied to clipboard");
                          });      
                        EventListnsers.push(".copy_g_meet_link");          
                    }
                    if (EventListnsers.indexOf(".choose-team-meet") == -1) {
                        document.getElementById("choose-team-meet").addEventListener("click", function() {
                            sendMessageToParent({"message": "chooseTeamMeet"});
                            var teamMeetElement = document.getElementById("meeting_types_dropdown");
                            var currentDisplay = window.getComputedStyle(teamMeetElement).display;
                            // Toggle the display property
                            if (currentDisplay === "block") {
                                setDisplayForIds('choose-meet-menu-down', 'flex');
                                setDisplayForIds('choose-meet-menu-up', 'none');
                                teamMeetElement.style.display = "none";
                            } else {
                                setDisplayForIds('g_meet_expired', 'none');
                                setDisplayForIds('choose-meet-menu-down', 'none');
                                setDisplayForIds('choose-meet-menu-up', 'flex');
                                teamMeetElement.style.display = "block";
                            }
                        });
                        EventListnsers.push(".choose-team-meet");   
                    }
                    if (EventListnsers.indexOf(".connect_gmeet") == -1) {
                        document.getElementById("connect_gmeet").addEventListener("click", function() {
                            var url = BASE_APP_URL + '/v1/user/meeting_integration';
                            window.open(url, '_blank');
                        })
                        EventListnsers.push(".connect_gmeet");
                    }
                    if (EventListnsers.indexOf(".connect_team_meet") == -1) {
                        document.getElementById("connect_team_meet").addEventListener("click", function() {
                            var url = BASE_APP_URL + '/v1/user/meeting_integration';
                            window.open(url, '_blank');
                        })
                        EventListnsers.push(".connect_team_meet");
                    }
                    if (EventListnsers.indexOf(".add_gmeet") == -1) {
                        document.getElementById("add_gmeet").addEventListener("click", function () {
                            setDisplayForIds(['add_gmeet_btn','add_team_btn','add_zoom_btn'], 'none');
                            setDisplayForIds('choose_meet', 'flex');
                            setIsProcessing('#choose_meet');
                            sendMessageToParent({"message": "addG-Meet"});
                        })
                        EventListnsers.push(".add_gmeet");
                    }
                    if (EventListnsers.indexOf(".add_team_meet") == -1) {
                        document.getElementById("add_team_meet").addEventListener("click", function () {
                            setDisplayForIds(['add_gmeet_btn','add_team_btn','add_zoom_btn'], 'none');
                            setDisplayForIds('choose_meet', 'flex');
                            setIsProcessing('#choose_meet');
                            sendMessageToParent({"message": "addTeamMeet"});
                        })
                        EventListnsers.push(".add_team_meet");
                    }
                    if (EventListnsers.indexOf(".copy_team_link") == -1) {
                        document.getElementById("copy_team_link").addEventListener("click", function() {
                            var textToCopy = document.getElementById("appointment_address").value;
                            navigator.clipboard.writeText(textToCopy);
                            toastr.success("Microsoft Teams Meet link copied to clipboard");
                          });      
                        EventListnsers.push(".copy_team_link");
                    }
                    if (EventListnsers.indexOf(".copy_gmeet_link") == -1) {
                        document.getElementById("copy_gmeet_link").addEventListener("click", function() {
                            var textToCopy = document.getElementById("appointment_address").value;
                            navigator.clipboard.writeText(textToCopy);
                            toastr.success("Google Meet link copied to clipboard");
                            });
                        EventListnsers.push(".copy_gmeet_link");
                    }
                    if (EventListnsers.indexOf(".delete_g_meet_link") == -1) {
                        document.getElementById("delete_g_meet_link").addEventListener("click", function() {
                            document.getElementById("appointment_address").value = "";
                            setDisplayForIds('choose-meeting-dropdown', 'flex');
                            setDisplayForIds(['join_gmeet','choose_meet','add_team_btn','add_zoom_btn'], 'none');
                            setDisplayForIds('add_gmeet_btn', 'flex');
                        });
                        EventListnsers.push(".delete_g_meet_link");
                    }
                    if (EventListnsers.indexOf(".delete_mteam_link") == -1) {
                        document.getElementById("delete_mteam_link").addEventListener("click", function() {
                            document.getElementById("appointment_address").value = "";
                            setDisplayForIds('choose-meeting-dropdown', 'flex');
                            setDisplayForIds(['join_team_meet','choose_meet','add_gmeet_btn','add_zoom_btn'], 'none');
                            setDisplayForIds('add_team_btn', 'flex');
                        });
                        EventListnsers.push(".delete_mteam_link");
                    }
                    if (EventListnsers.indexOf(".join_gmeet_btn") == -1) {
                        document.getElementById("join_gmeet_btn").addEventListener("click", function () {
                            sendMessageToParent({"message": "joinGMeet"});
                        });
                        EventListnsers.push(".join_gmeet_btn");
                    }
                    if (EventListnsers.indexOf(".join_team_meet_btn") == -1) {
                        document.getElementById("join_team_meet_btn").addEventListener("click", function () {
                            sendMessageToParent({"message": "joinGMeet"});
                        });
                        EventListnsers.push(".join_team_meet_btn");
                    }
                    if (EventListnsers.indexOf(".add_team_btn") == -1) {
                        document.getElementById("add_team_btn").addEventListener("click", function (event) {
                            event.stopPropagation();
                            setDisplayForIds('choose_meet', 'flex');
                            setDisplayForIds(['meeting_types_dropdown', 'add_team_btn'], 'none');
                            setIsProcessing('#choose_meet');
                            sendMessageToParent({"message": "addTeamMeet"});
                        });
                        EventListnsers.push(".add_team_btn");
                    }
                    if (EventListnsers.indexOf(".add_gmeet_btn") == -1) {
                        document.getElementById("add_gmeet_btn").addEventListener("click", function (event) {
                            event.stopPropagation();
                            setDisplayForIds('choose_meet', 'flex');
                            setDisplayForIds(['meeting_types_dropdown', 'add_gmeet_btn'], 'none');
                            setIsProcessing('#choose_meet');
                            sendMessageToParent({"message": "addG-Meet"});
                        });
                        EventListnsers.push(".add_gmeet_btn");
                    }
                    if (EventListnsers.indexOf(".connect_zoom_meet") == -1) {
                        document.getElementById("connect_zoom_meet").addEventListener("click", function() {
                            var url = BASE_APP_URL + '/v1/user/meeting_integration';
                            window.open(url, '_blank');
                        })
                        EventListnsers.push(".connect_zoom_meet");
                    }
                    if (EventListnsers.indexOf(".add_zoom_meet") == -1) {
                        document.getElementById("add_zoom_meet").addEventListener("click", function () {
                            setDisplayForIds(['add_gmeet_btn','add_team_btn','add_zoom_btn'], 'none');
                            setDisplayForIds('choose_meet', 'flex');
                            setIsProcessing('#choose_meet');
                            sendMessageToParent({"message": "addZoomMeet"});
                        })
                        EventListnsers.push(".add_zoom_meet");
                    }
                    if (EventListnsers.indexOf(".add_zoom_btn") == -1) {
                        document.getElementById("add_zoom_btn").addEventListener("click", function (event) {
                            event.stopPropagation();
                            setDisplayForIds('choose_meet', 'flex');
                            setDisplayForIds(['meeting_types_dropdown', 'add_zoom_btn'], 'none');
                            setIsProcessing('#choose_meet');
                            sendMessageToParent({"message": "addZoomMeet"});
                        });
                        EventListnsers.push(".add_zoom_btn");
                    }
                    if (EventListnsers.indexOf(".delete_zoom_link") == -1) {
                        document.getElementById("delete_zoom_link").addEventListener("click", function() {
                            document.getElementById("appointment_address").value = "";
                            setDisplayForIds('choose-meeting-dropdown', 'flex');
                            setDisplayForIds(['join_zoom_meet','choose_meet','add_gmeet_btn','add_team_btn'], 'none');
                            setDisplayForIds('add_zoom_btn', 'flex');
                        });
                        EventListnsers.push(".delete_zoom_link");
                    }
                    if (EventListnsers.indexOf(".copy_zoom_link") == -1) {
                        document.getElementById("copy_zoom_link").addEventListener("click", function() {
                            var textToCopy = document.getElementById("appointment_address").value;
                            navigator.clipboard.writeText(textToCopy);
                            toastr.success("Zoom Meet link copied to clipboard");
                            });
                        EventListnsers.push(".copy_zoom_link");
                    }
                    if (EventListnsers.indexOf(".join_zoom_meet_btn") == -1) {
                        document.getElementById("join_zoom_meet_btn").addEventListener("click", function () {
                            sendMessageToParent({"message": "joinGMeet"});
                        });
                        EventListnsers.push(".join_zoom_meet_btn");
                    }
                    checkEverytingLoaded();
                    // populateNotifications(response.notifications);
                    // setNotificationUi();
                } else {
                    setFrameLoadedState();
                }
                $(".modal-window").addClass("d-none");
                break;
            case "getLinkedInPersonProfileFinished":
                userCallFinished = true;
                if (message.data.response) {
                    response = message.data.response;
                    return extractPersonFromLinkedInResponse(response);
                }
                finishParsing(true);
                break;
            case "getLinkedInCompanyProfileFinished":
                userCallFinished = true;
                if (message.data.response) {
                    response = message.data.response;
                    return extractCompanyFromLinkedInResponse(response);
                }
                finishParsing(true);
                break;
            case "getLinkedInPersonProfilePdfFinished":
                userCallFinished = true;
                if (message.data.response && message.data.response.base64profile) {
                    base64Text = message.data.response.base64profile || ''
                }
                if (message.data.response.tooManyReq) {
                    toastr.error("Failed to upload profile pdf");
                }
                if (extSettings.saveCandidate && createCandidate) {
                    createCandidateRecord(true, false, contact);
                } else {
                    createCandidateRecord(true, true);
                }
                //Setting entity type id
                entityTypeId = 5;
                break;
            case "urlchanged":
                let fromUrl = previousUrl.href;
                if (message.data.linkedInCtp) {
                    ctp[window.top.document.domain] = true
                } else {
                    ctp[window.top.document.domain] = false
                    currentUrlObj = window.top.location
                }
                if (slugChanged()) {

                    if(flagForNestedCustomFields){
                        entitiesArray.forEach(entityTypeId => {
                            getNestedFieldsForEntity(entityTypeId);
                        });
                    } else {
                        get_user();
                    }

                    // we need to empty all the data filled by the user when the url changes 
                    fileTypeCustomFields = [];
                    fileTypeCustomFieldsForContact =[];
                    fileTypeCustomFieldsForCompany = [];
                    fileTypeCustomFieldsForCompanyContact = [];
                    fileDataForCompany ={};
                    fileDataForCompanyContact = {};
                    fieldsVisibleOnExtension = {};
                    dropdownCustomFields = [];
                    multiselectCustomFields = [];
                    fieldsVisibleOnExtensionForContact = {};
                    fieldsVisibleOnExtensionForCompany = {};
                    fieldsVisibleOnExtensionForCompanyContact = {};
                    dropdownCustomFieldsForContact = [];
                    dropdownCustomFieldsForCompany = [];
                    dropdownCustomFieldsForCompanyContact = [];
                    multiselectCustomFieldsForContact = [];
                    multiselectCustomFieldsForCompany = [];
                    multiselectCustomFieldsForCompanyContact = [];
                    listofmultiselectcolumnForContact = [];
                    listofmultiselectcolumnForCompany = [];
                    selectedValues = {};
                    checkDuplicateNotCalled = true;
                    countOfLanguageProfieciency = 1;
                    differentEmailValueForCandidate = false;
                    differentEmailValueForContact = false;
                    differentPhoneValueForCandidate = false;
                    differentPhoneValueForContact = false;
                    oldValueForEmailCandidate = '';
                    oldValueForEmailContact = '';
                    oldValueForPhoneCandidate = '';
                    oldValueForPhoneContact = '';
                    duplicateCandidateSlug = null;
                    duplicateContactSlug = null;
                    holdContactObject = null;
                    holdCandidateObject = null;
                    document.getElementById('dropdownContainerNew').innerHTML = '';
                    document.getElementById('languagebuttonContainerNew').innerHTML = '';
                    nestedCustomFieldEntities = [
                        {
                            2 : {
                                'rootNodes' : [],
                                'children' : [],
                                'nestedFields' : [],
                                'defaultOptions' : []
                            },
                            3 : {
                                'rootNodes' : [],
                                'children' : [],
                                'nestedFields' : [],
                                'defaultOptions' : []
                            },
                            5 : {
                                'rootNodes' : [],
                                'children' : [],
                                'nestedFields' : [],
                                'defaultOptions' : []
                            }
                        }
                    ];
                }
                previousUrl = JSON.parse(JSON.stringify(currentUrlObj));
                if (typeof (previousUrl) != "object") {
                    previousUrl = new URL(previousUrl);
                }
                let toUrl = previousUrl.href;

                if (!(fromUrl.includes(toUrl) || toUrl.includes(fromUrl))){
                    document.getElementById("educationHistoryHeader").style.display = 'none';
                    document.getElementById('workHistoryHeader').style.display = 'none';
                }

                document.getElementById('additionalDetailsHeader').style.display = 'block';
                if (flagForShowOnExtension){
                    document.getElementById('additionalDetailsHeaderEmpty').style.display = 'none';
                }

                document.getElementById('additionalDetailsHeaderForContact').style.display = 'block';
                if(flagForShowOnExtension){
                    document.getElementById('additionalDetailsHeaderForContactEmpty').style.display = 'none';
                }
                document.getElementById('additionalDetailsHeaderForCompany').style.display = 'block';
                if(flagForShowOnExtension){
                    document.getElementById('additionalDetailsHeaderForCompanyEmpty').style.display = 'none';
                }
                document.getElementById('additionalDetailsHeaderForCompanyContact').style.display = 'block';

                while (document.getElementById('firstRemoveButton') != undefined){
                    document.getElementById('firstRemoveButton').remove();
                }

                // check if the newUrl starts with the old URL 
                if (!window?.top?.location?.href?.startsWith(previousUrl.href) ) {
                    differentEmailValueForCandidate = false;
                    differentEmailValueForContact = false;
                    differentPhoneValueForCandidate = false;
                    differentPhoneValueForContact = false;
                    oldValueForEmailCandidate = '';
                    oldValueForEmailContact = '';
                    oldValueForPhoneCandidate = '';
                    oldValueForPhoneContact = '';
                    duplicateCandidateSlug = null;
                    duplicateContactSlug = null;
                    holdContactObject = null;
                    holdCandidateObject = null;
                    existingCandidate = null;
                }
                if (document.getElementById('containerCandidateSavedNote')) {
                    document.getElementById('containerCandidateSavedNote').style.display = 'none';
                }
                if (document.getElementById('updateContactDetailsAfterSave')) {
                    document.getElementById('updateContactDetailsAfterSave').removeEventListener('click', updateEmailInline);
                    document.getElementById('updateContactDetailsAfterSave').removeEventListener('click', updatePhoneInline);
                }
                countOfDuplicateFound = 0;
                break;
            case "addToHotListFinished":
                stopProcessing('#btn_add_to_hot_list');
                response = JSON.parse(message.data.response);
                if (response.status == "success") {
                    if (response.data.length > 0) {
                        if (response.data.hotlist.entityname == 'candidates') {
                            hotlists['candidate'].push(response.data.hotlist);
                        }
                        if (response.data.hotlist.entityname == 'contacts') {
                            hotlists['contact'].push(response.data.hotlist);
                        }
                        if (response.data.hotlist.entityname == 'companies') {
                            hotlists['company'].push(response.data.hotlist);
                        }
                    }
                    toastr.success(response.message);
                    $('#add_to_hot_list_followup .close-modal').click();

                    //Add mixpannel eventtrack for Add To Hotlist     
                    if (document.domain === 'www.linkedin.com') {
                        Domains[document.domain]?.checkURL();
                    }           
                    var dataObject = {
                        [actionSource]: chromeExtension,
                        [entityName]: message?.data?.entity,
                        [createHotlist]: response?.action_name == 'Create Hotlist' ? 'Yes' : 'No',
                        [shareWithTeammate]: message?.data?.shared ? 'Yes' : 'No',
                        [platformName]: Domains[document.domain]?.name || manuallyAdded
                    }
                    sendMessageToParent({ "message": "mixpanelEventHandler", "event": addToHotlist, "payload": dataObject });
                } else {
                    toastr.error(response.message);
                }
                break;
            case "assignCandidateToJobFinished":
                stopProcessing('#btn_assign_to_job');
                $(jobSelectId).val('');
                response = JSON.parse(message.data.response);
                if (response.status == "success") {
                    toastr.success(response.message);
                    $('#update_hiring_stage_tooltip .h-p-close').click();
                    // $('#assign_to_job_followup .close-modal').click();
                    sendMessageToParent({ 'message': 'getAssignedJobs', 'data': { 'id': candidate.id } });

                    //Add mixpannel eventtrack for Assign To Job
                    if (document.domain === 'www.linkedin.com') {
                        Domains[document.domain]?.checkURL();
                    }
                    var dataObject = {
                        [actionSource]: chromeExtension,
                        [platformName]: Domains[document.domain]?.name || manuallyAdded
                    }
                    sendMessageToParent({ "message": "mixpanelEventHandler", "event": 'Assign To Job', "payload": dataObject });
                } else {
                    toastr.error(response.message, '', { timeOut: 8000 });
                }
                break;
            case "submitCandidateFinished":
                profileXing = null;
                response = JSON.parse(message.data.response);
                candidateSlug = response?.data?.candidate?.slug;
                candidate = response?.data?.candidate;
                submitSuccessHandler(message, 'candidate')
                if(entityTypeId == null){
                    entityTypeId = 5;
                }
                var payload = { "entityTypeId": entityTypeId, "candidateSlug": candidateSlug, "contactSlug": contactSlug };
                // Calling linking service to link candidate to contact only if save as Contact is checked
                if (extSettings.saveContact || (extSettings.saveCandidateFromCompany && contactSlug != null) || (extSettings.saveCandidate && contactSlug != null)) {
                    sendMessageToParent({ "message": "linkContact", "payload": payload });
                }
                document.getElementById('additionalDetailsHeader').style.display = 'none';
                document.getElementById('additionalDetailsHeaderEmpty').style.display = 'none';

                document.getElementById('additionalDetailsHeaderForContact').style.display = 'none';
                document.getElementById('additionalDetailsHeaderForContactEmpty').style.display = 'none';
                document.getElementById('additionalDetailsHeaderForCompany').style.display = 'none';
                document.getElementById('additionalDetailsHeaderForCompanyEmpty').style.display = 'none';
                document.getElementById('additionalDetailsHeaderForCompanyContact').style.display = 'none';

                sendMessageToParent({ "message": "parseCandidateResume", "payload": candidate });
                //Add mixpannel eventtrack for add
                var formFields = [];
                if (candidate !== null) {
                    for (var key in candidate) {
                        if (candidate[key] !== null) {
                            formFields.push(key);
                        }
                    }
                }
                if (document.domain === 'www.linkedin.com') {
                    Domains[document.domain]?.checkURL();
                }
                var dataObject = {
                    [actionSource]: chromeExtension,
                    [formField]: formFields,
                    [platformName]: Domains[document.domain]?.name || manuallyAdded,
                    [saveAsCandidateContact]: extSettings.saveContact ? 'Yes' : 'No',
                    [savePdf]:  $("#save_linked_in_profile_pdf").is(":checked") ? 'On' : 'Off'
                }
                if (!response?.data?.duplicate_updated) {
                    delete candidate['concatedtext'];
                    sendMessageToParent({ "message": "mixpanelEventHandler", "event": candidateAdded, "payload": dataObject });
                }

                else{
                    sendMessageToParent({ "message": "mixpanelEventHandler", "event": candidateUpdated, "payload": dataObject });
                }
                break;
            case "submitOrderingFinished":
                break;

            case 'submitInlineEditEmail': 
                if (countOfDuplicateFound != 2) {
                    toastr.success("Contact Details Updated");
                }
                if (document.getElementById('containerCandidateSavedNote')) {
                    document.getElementById('containerCandidateSavedNote').style.display = 'none';
                }
                break;

            case 'submitInlineEditPhone': 
                toastr.success("Contact Details Updated");
                if (document.getElementById('containerCandidateSavedNote')) {
                    document.getElementById('containerCandidateSavedNote').style.display = 'none';
                }
                break;

            case "submitContactFinished":
                response = JSON.parse(message.data.response);
                contactSlug = response?.data?.contact?.slug;
                submitSuccessHandler(message, 'contact')
                var payload = { "entityTypeId": entityTypeId, "candidateSlug": candidateSlug, "contactSlug": contactSlug };
                // Call linking service to link contact to candidate only if save as Candidate is checked
                if (extSettings.saveCandidate) {
                    sendMessageToParent({ "message": "linkContact", "payload": payload });
                }
                var formFields = [];
                if (response?.data?.contact !== null) {
                    for (var key in response?.data?.contact) {
                        if (response?.data?.contact[key] !== null) {
                            formFields.push(key);
                        }
                    }
                }
                if (document.domain === 'www.linkedin.com') {
                    Domains[document.domain]?.checkURL();
                }
                var dataObject = {
                    [actionSource]: chromeExtension,
                    [formField]: formFields,
                    [platformName]: Domains[document.domain]?.name || manuallyAdded,
                    [saveAsCandidateContact]: extSettings?.saveCandidate ? 'Yes' : 'No'
                }
                //Add mixpannel eventtrack for add
                if (!response?.data?.duplicate_updated) {
                    sendMessageToParent({ "message": "mixpanelEventHandler", "event": contactAdded, "payload": dataObject });
                }
                else {
                    sendMessageToParent({ "message": "mixpanelEventHandler", "event": contactUpdated, "payload": dataObject });
                }
                document.getElementById('additionalDetailsHeader').style.display = 'none';
                document.getElementById('additionalDetailsHeaderForContact').style.display = 'none';
                document.getElementById('additionalDetailsHeaderForCompany').style.display = 'none';
                document.getElementById('additionalDetailsHeaderForCompanyContact').style.display = 'none';
                break;
            case "submitCompanyContactFinished":
                response = JSON.parse(message.data.response);
                contactSlug = response?.data?.contact?.slug;
                if(flagForExtensionEnhancement && extSettings.saveCandidateFromCompany){
                    createCandidateRecord(true, false, contact, false, response?.data?.company?.slug);
                }
                submitSuccessHandler(message, 'company');
                //Add mixpannel eventtrack for add
                var formFields = [];
                if (response?.data?.company !== null) {
                    for (var key in response?.data?.company) {
                        if (response?.data?.company[key] !== null) {
                            formFields.push(key);
                        }
                    }
                }
                if (document.domain === 'www.linkedin.com') {
                    Domains[document.domain]?.checkURL();
                }
                var dataObject = {
                    [actionSource]: chromeExtension,
                    [formField]: formFields,
                    [platformName]: Domains[document.domain]?.name || manuallyAdded,
                    [contactAdded]: response?.data?.contact ? 'Yes' : 'No'
                }
                if (!response?.action_name.includes('Updated')) {
                    sendMessageToParent({ "message": "mixpanelEventHandler", "event": companyAdded, "payload": dataObject });
                }

                else{
                    sendMessageToParent({ "message": "mixpanelEventHandler", "event": companyUpdated, "payload": dataObject });
                }
                document.getElementById('additionalDetailsHeader').style.display = 'none';

                document.getElementById('additionalDetailsHeaderForContact').style.display = 'none';
                document.getElementById('additionalDetailsHeaderForCompany').style.display = 'none';
                document.getElementById('additionalDetailsHeaderForCompanyContact').style.display = 'none';
                break;
            case "getCompaniesFinished":
                $('#companies_list').children().remove();
                response = JSON.parse(message.data.response);
                if (response.status == "success") {
                    response.data.forEach(function (company) {
                        var option = document.createElement('option');
                        option.value = company.title;
                        option.setAttribute('data-id', company.id);
                        $('#companies_list').append(option)
                    });
                    $(".search-company-loader").removeClass("d-block").addClass("d-none");
                }
                break;
            case "getContactsFinished":
                response = JSON.parse(message.data.response);
                if (response.status == "success") {
                    companyContactOptions = response.data;
                    let dropDown = document.getElementById("companyContactsSearchField");
                    if (!(dropDown.classList.contains('active'))) {
                        dropDown.classList.toggle('active');
                    }
                    createContactOptions(response.data, 'search');
                    checkContactOptions();
                }
                break;
            case "getContactsLinkedFinished":
                response = JSON.parse(message.data.response);
                if (response.status == "success") {
                    let companyContactsLinked = response.data.contacts;
                    selectedCompanyContacts = companyContactsLinked.map(contact => {
                        contact.title = contact.name;
                        return contact;
                    });
                    createSelectedContacts();
                }
                break;
            case "updatedOrderingData":
                response = JSON.parse(message.data.response);
                if (response.status == "success") {
                    // show a popup that data updated 
                }
                break;
            case "submitAppointmentFinished":
                stopProcessing('#appointment_form button[type=submit]');
                response = JSON.parse(message.data.response);
                if (response.status == "success") {
                    toastr.success(response.message);
                    $('#add_appointment_followup .close-modal').click();
                    reset_appointment_form()
                    //Add mixpannel eventtrack for Add Meeting
                    if (document.domain === 'www.linkedin.com') {
                        Domains[document.domain]?.checkURL();
                    }
                    var dataObject = {
                        [actionSource]: chromeExtension,
                        [entityName]: $('#appointment_form').attr('data-entity'),
                        [meetingType]: 'Regular',
                        [platformName]: Domains[document.domain]?.name || manuallyAdded,
                        [titleLength]: response.data?.appointment?.title.length,
                        [whereLength]: response.data?.appointment?.address.length,
                        [descriptionLength]: response.data?.appointment?.description.length,
                        [relatedEntityType]: relatedEntity[response.data?.appointment?.relatedtotypeid],
                        [reminderDuration]: response.data?.appointment?.reminder + ' Minutes',
                        [numberOfAttendees]: Object.keys(response.data?.attendee_names_emails).length,
                        [calendarInvite]: $('#appointment_no_cal_invites')?.prop('checked') ? 'On' : 'Off',
                        [meetingDuration]: (response.data?.appointment?.enddate - response.data?.appointment?.startdate)/60 + ' Minutes',
                    }
                    sendMessageToParent({ "message": "mixpanelEventHandler", "event": meetingAdded, "payload": dataObject });
                } else {
                    toastr.error(response.message);
                }
                break;
            case "submitTaskFinished":
                stopProcessing('#task_form button[type=submit]');
                response = JSON.parse(message.data.response);
                if (response.status == "success") {
                    toastr.success(response.message);
                    $('#add_task_followup .close-modal').click();
                    reset_task_form()
                    //Add mixpannel eventtrack for Add Task
                    if (document.domain === 'www.linkedin.com') {
                        Domains[document.domain]?.checkURL();
                    }
                    var dataObject = {
                        [actionSource]: chromeExtension,
                        [entityName]: $('#task_form').attr('data-entity'),
                        [platformName]: Domains[document.domain]?.name || manuallyAdded,
                        [titleLength]: response.data?.task?.title.length,
                        [reminderDuration]: response.data?.task?.reminder + ' Minutes',
                        [startTimeDate]: new Date( (response.data?.task?.startdate) * 1000).toISOString(),
                        [descriptionLength]: response.data?.task?.description.length,
                        [tasktype]: response.data?.task?.notetype,
                        [relatedEntityType]: relatedEntity[response.data?.task?.relatedtotypeid]
                    }
                    sendMessageToParent({ "message": "mixpanelEventHandler", "event": 'Add Task', "payload": dataObject });
                } else {
                    toastr.error(response.message);
                }
                break;

            case "getJobsToAssignCandidateFinished":
                if (message.data.isDataObj) {
                    response = message.data.response;
                } else {
                    response = JSON.parse(message.data.response);
                }
                if (response.status == "success") {

                    if (response.data.jobs) {
                        jobs = response.data.jobs;
                        var options = '';

                        jobs.forEach(function (job) {
                            options += '<option value = ' + job.id + '>' + HtmlEncode(job.jobname) + ' ' + (job.companyname ? '(' + HtmlEncode(job.companyname) + ')' : '') + ' ' + (job.city ? '- ' + HtmlEncode(job.city) : '') + '</option>';
                        });
                    } else {
                        jobs = response.data;
                        var options = '';
                      
                        jobs.forEach(function (job) {
                            options += '<option value = ' + job.id + '>' + HtmlEncode(job.title) + ' ' + (job.companynameforjob ? '(' + HtmlEncode(job.companynameforjob) + ')' : '') + ' ' + (job.location ? '- ' + HtmlEncode(job.location) : '') + '</option>';
                        });
                    }
                    $(jobSelectId).empty().append(options); 
                    $(jobSelectId).trigger("change");
                   
                    sendMessageToParent({ 'message': 'getJobsToAssignCandidateForEmailTrigger' });

                    if (EventListnsers.indexOf("#btn_assign_to_job") == -1 && ("#btn_assign_to_job").length > 0) {
                        $("#btn_assign_to_job").on("click", function () {
                            if ($(jobSelectId).val().length) assignToJob();
                            else {
                                toastr.info("At Least one Job Must Be Selected")
                            }
                        });
                        EventListnsers.push("#btn_assign_to_job");
                    }
                    $(".search-company-loader").removeClass("d-block").addClass("d-none");
                }
                break;
            case "getJobsToAssignCandidateForEmailTriggerFinished":
                if (message.data.isDataObj) {
                    response = message.data.response;
                } else {
                    response = JSON.parse(message.data.response);
                }

                if (response.data.emailtrigger.length > 0) {
                    $('#send_email_trigger_checkbox_div').show();
                    $('#send_email_trigger_checkbox').prop('checked', true);
                    $('#send_email_trigger_checkbox_label').html('Send ' + response.data.emailtrigger[0].name + ' Email');
                }
                break;
            case "assignCandidateToJobCheckForEmailTrigger":
                response = JSON.parse(message.data.response);
                var jobData = message.data.jobs;
                var selectedJobsId = {};
                for (var key in jobData) {
                    selectedJobsId = {
                        ...selectedJobsId,
                        [`${Object.keys(selectedJobsId).length++}`]: jobData[key].id
                    };
                }
                if ($('#send_email_trigger_checkbox')) {
                    if ($('#send_email_trigger_checkbox').is(":checked")) {
                        sendEmailTrigger('assignCandidateToJobEmailTrigger', 1, 1, [candidate], 5, selectedJobsId, message.data.response, response.data.failedRecords, 'bulk');
                    } else {
                        this.window.postMessage({ "message": "assignCandidateToJobFinished", 'isDataObj': true, "response": message.data.response });
                    }
                } else {
                    this.window.postMessage({ "message": "assignCandidateToJobFinished", 'isDataObj': true, "response": message.data.response });
                }
                break;
            case "getHotlistsFinished":
                if (message.data.isDataObj) {
                    response = message.data.response;
                } else {
                    response = JSON.parse(message.data.response);
                }
                if (response.status == "success" || response.data.length) {
                    hotlists[message.data.entity] = response.data;
                    setHotListSelectOptions(message.data.entity);
                }
                break;
            case 'fetchCandidateFieldsDataFinished':
                response = JSON.parse(message.data.response);

                if (response.status == "success"){
                    var fields = response.data.custumFields;
                    candidateExtraFieldsData =  Object.keys(fields).map(function(e) { return fields[e];});
                    // Object.values(fields).map(function(e) {candidateExtraFieldsData[e.columnid] = false;});
                }
                else {
                    console.log('Error! Unable to fetch candidate dustom section data');
                }

                break;
            case 'getGenderDataFinished':
                response = JSON.parse(message.data.response);

                if (response.status == "success"){
                    response.data.forEach(item => {
                        genderData.push(item);
                    });
                }
                else {
                    console.log('Error! Unable to fetch gender data');
                }
                break;
            case 'getCurrencyTypeFinished':
                response = JSON.parse(message.data.response);

                if (response.status == "success"){
                    currencyTypes = response.data;
                }
                else {
                    console.log('Error! Unable to fetch currency data');
                }
                break;
            case 'getAddressFinished':
                response = JSON.parse(message.data.response);

                if (response.status == "success"){
                    let dropDown = document.getElementById(message.data.payload.fieldInputId);
                    dropDown.parentNode.setAttribute('class', 'rcrm-form-ctrl m-b-10 custom-dropdown');
                    if (!(dropDown.parentNode.classList.contains('active'))) {
                        dropDown.parentNode.classList.toggle('active');
                    }
                    renderAddressOptions(response.data, message.data.payload);
                }
                break;
            case 'getEntityTypeRecordsFinished':
                response = JSON.parse(message.data.response);
                if (response.status == "success"){
                    let entityTypeOptions = []
                    if(message.data.entityPayload.entityFieldType == 'team' || message.data.entityPayload.entityFieldType == 'user'){
                        let userOrTeamDetails = message.data.entityPayload.entityFieldType == 'team' ? collaboratorDataTeam : collaboratorDataUser;
                        entityTypeOptions = userOrTeamDetails.filter(option => {
                            if(option['name'].toLowerCase().includes(message.data.entityPayload.searchValue.toLowerCase())){
                               option.title = option.name;
                               return option;
                            }
                        });
                    } else {
                        entityTypeOptions = response.data;
                    }
                    renderEntityTypeFieldOptions(entityTypeOptions, message.data.entityPayload);
                }
                break;
            case 'getExistingEntityTypeValuesFinished':
                response = JSON.parse(message.data.response);
                if (response.status == "success"){
                    formatExistingEntityTypeValues(response.data, message.data.entityTypeId);
                }
                break;
            case "checkDuplicateFinished":
                response = JSON.parse(message.data.response);
                sendMessageToParent({"message": "getUserWithTeam"});
                // response from check-duplicate API call 
                setTimeout(() => {
                    $('.exists-message-container').children('div').toggleClass('d-block', false).toggleClass('d-none', true);
                    $('.exists-message-container').toggleClass('slidedown', false);
                    $('.form-container').toggleClass('slidedown', false);

                    if (response.status == "success") {
                        const parentElements = document.querySelectorAll('.rcrm-fixed-bottom');
                        parentElements.forEach(parent => {
                            const targetElement = parent.querySelector('.rcrm-success-button');
                            //  Remove "d-none" class from target element if it exists
                            if (targetElement) {
                                targetElement.classList.remove('d-none');
                            }
                        });

                        // getting the candidate object 
                        let existingCandidate = response.data.candidate;
                        holdCandidateObject = existingCandidate;

                        if (existingCandidate) {
                            duplicateCandidateSlug = existingCandidate?.slug;
                        }

                        // check if the email is currently empty 
                        const emailInput = document.getElementById('candidate_email');
                        if (existingCandidate && existingCandidate?.emailid != null && existingCandidate?.emailid != '' && document.getElementById('containerCandidateSavedNote')){
                            // check if we are getting the value from API as well 
                            if (emailInput.value != '' && emailInput.value != existingCandidate.emailid){
                                differentEmailValueForCandidate = true;
                                oldValueForEmailCandidate = emailInput.value;
                            }
                            emailInput.value = existingCandidate.emailid;
                        }

                        // candidate_phone
                        const phoneInput = document.getElementById('candidate_phone');
                        if (existingCandidate && existingCandidate?.contactnumber != null && existingCandidate?.contactnumber != '' && document.getElementById('containerCandidateSavedNote')){
                            // check if we are getting the value from API as well
                            if (phoneInput.value != '' && phoneInput.value != existingCandidate.contactnumber){
                                differentPhoneValueForCandidate = true;
                                oldValueForPhoneCandidate = phoneInput.value;
                            }
                            phoneInput.value = existingCandidate.contactnumber;
                        }


                        // getting the contact object from the response
                        let existingContact  = response.data.contact;
                        holdContactObject = existingContact;

                        if (existingContact) {
                            duplicateContactSlug = existingContact?.slug;
                            getExistingEntityTypeValues(existingContact.id, contactEntityTypeId);
                        }


                        // check if the email is currently empty 
                        const contactemailInput = document.getElementById('contact_email');
                        if (existingContact && existingContact?.email != null && existingContact?.email != '' && document.getElementById('containerCandidateSavedNote')){
                            if (contactemailInput.value != '' && contactemailInput.value != existingContact.email){
                                differentEmailValueForContact = true;
                                oldValueForEmailContact = contactemailInput.value;
                            }
                            contactemailInput.value = existingContact.email;
                        }

                        // contact phone number
                        const contactphoneInput = document.getElementById('contact_contactnumber');
                        if (existingContact && existingContact.contactnumber != null && existingContact?.contactnumber != '' && document.getElementById('containerCandidateSavedNote')){
                            if (contactphoneInput.value != '' && contactphoneInput.value != existingContact.contactnumber){
                                differentPhoneValueForContact = true;
                                oldValueForPhoneContact = contactphoneInput.value;
                            }
                            contactphoneInput.value = existingContact.contactnumber;
                        }

                        if (response.data.candidate && response.data.candidate.id != undefined && response.data.candidate.id != "" && response.data.candidate.id != 0) {
                            candidate = response.data.candidate;
                            candidateNotes = response.data.candidate_notes;
                            $('#candidate .exists-message-container .exists-link').attr('href', BASE_APP_URL + '/candidate/' + response.data.candidate.slug);
                            $('#candidate .exists-message-container .exists').toggleClass('d-block', true).toggleClass('d-none', false);
                            if(flagForOffLimits && response.data.candidate.offLimits != null){
                                $('#candidate .exists-message-container .exists .off-limits-not-exists').toggleClass('d-block', false).toggleClass('d-none', true);
                                fillOffLimitsData(response.data.candidate.offLimits, 'candidate', 'off-limits-exists');
                            } else{
                                $('#candidate .exists-message-container .exists .off-limits-exists').toggleClass('d-block', false).toggleClass('d-none', true);
                                $('#candidate .exists-message-container .exists .off-limits-not-exists').toggleClass('d-block', true).toggleClass('d-none', false);
                            }
                            this.window.postMessage({ "message": "getJobsToAssignCandidateFinished", 'isDataObj': true, "response": response });
                            this.window.postMessage({ "message": "getHotlistsFinished", 'isDataObj': true, "response": { "data": response.data.candidate_hotlist }, 'entity': 'candidate' });
                        } else if(flagForOffLimits && response.data.company && response.data.company.offLimits != null){
                            fillOffLimitsData(response.data.company.offLimits, 'candidate', 'company-off-limits-exists');
                            $('#candidate .exists-message-container .company-off-limits-exists .exists-link').attr('href', BASE_APP_URL + '/company/' + response.data.company.slug);
                        } else{
                            $('#candidate .exists-message-container .not-exists').toggleClass('d-block', true).toggleClass('d-none', false);
                        }

                        if (response.data.contact && response.data.contact.id != undefined && response.data.contact.id != "" && response.data.contact.id != 0) {
                            contact = response.data.contact;
                            contactNotes = response.data.contact_notes

                            $('#contact .exists-message-container .exists-link').attr('href', BASE_APP_URL + '/contact/' + response.data.contact.slug);
                            $('#contact .exists-message-container .exists').toggleClass('d-block', true).toggleClass('d-none', false);
                            if(flagForOffLimits && response.data.contact.offLimits != null){
                                $('#contact .exists-message-container .exists .off-limits-not-exists').toggleClass('d-block', false).toggleClass('d-none', true);
                                fillOffLimitsData(response.data.contact.offLimits, 'contact', 'off-limits-exists');
                            } else{
                                $('#contact .exists-message-container .exists .off-limits-exists').toggleClass('d-block', false).toggleClass('d-none', true);
                                $('#contact .exists-message-container .exists .off-limits-not-exists').toggleClass('d-block', true).toggleClass('d-none', false);
                            }
                            this.window.postMessage({ "message": "getHotlistsFinished", 'isDataObj': true, "response": { "data": response.data.contact_hotlist }, 'entity': 'contact' });

                        }else if(flagForOffLimits && response.data.company && response.data.company.offLimits != null){
                            fillOffLimitsData(response.data.company.offLimits, 'contact', 'company-off-limits-exists');
                            $('#contact .exists-message-container .company-off-limits-exists .exists-link').attr('href', BASE_APP_URL + '/company/' + response.data.company.slug);
                        } else {
                            $('#contact .exists-message-container .not-exists').toggleClass('d-block', true).toggleClass('d-none', false);
                        }

                        if (response.data.company && response.data.company.id != undefined && response.data.company.id != "" && response.data.company.id != 0) {
                            company = response.data.company;

                            $('#company .exists-message-container .exists-link').attr('href', BASE_APP_URL + '/company/' + response.data.company.slug);
                            $('#company .exists-message-container .exists').toggleClass('d-block', true).toggleClass('d-none', false);
                            if(flagForOffLimits && response.data.company.offLimits != null){
                                $('#company .exists-message-container .exists .off-limits-not-exists').toggleClass('d-block', false).toggleClass('d-none', true);
                                fillOffLimitsData(response.data.company.offLimits, 'company', 'off-limits-exists');
                            } else{
                                $('#company .exists-message-container .exists .off-limits-exists').toggleClass('d-block', false).toggleClass('d-none', true);
                                $('#company .exists-message-container .exists .off-limits-not-exists').toggleClass('d-block', true).toggleClass('d-none', false);
                            }
                            // this.window.postMessage({ "message": "getHotlistsFinished", 'isDataObj': true, "response": { "data": response.data.contact_hotlist }, 'entity': 'contact' });

                        } else {
                            $('#company .exists-message-container .not-exists').toggleClass('d-block', true).toggleClass('d-none', false);
                        }
                        checkDuplicateNotCalled = false;
                        contactColumnInfo = response.data.contact_columns;
                        existingContact  = response.data.contact;

                        if(existingContact && flagForShowOnExtension == true) {
                            if(flagForNestedCustomFields){
                                fillExistingData(existingContact, contactColumnInfo, contactEntityTypeId);
                                fillExistingData(existingContact, contactColumnInfo, companyContactEntityTypeId);
                            }
                            existingContactData = [];
                            for(let col in contactColumnInfo){
                                if(contactColumnInfo[col]['show_on_extension'] && contactColumnInfo[col]['show_on_extension'] == true){
                                    if(col.substring(0,10) == 'custcolumn'){
                                        var typeOfField = contactColumnInfo[col].type;
                                        if(typeOfField == 'text' || typeOfField == 'longtext' || typeOfField == 'email' || typeOfField == 'social_profile'){
                                            if(existingContact[col] != null) {
                                                if(document.getElementById(col+'ForContact')){
                                                    document.getElementById(col+'ForContact').value = existingContact[col];
                                                }
                                                fieldsVisibleOnExtensionForContact[col] = existingContact[col];

                                                if( document.getElementById(col+'ForCompanyContact')){
                                                    document.getElementById(col+'ForCompanyContact').value = existingContact[col];
                                                }
                                                fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                            }
                                        }
                                        else if(typeOfField == 'dropdown' && col != 'stageid'){
                                            
                                                
                                                
                                                if(existingContact[col] != '') {  
                                                    if(flagForSearchableDropdown){
                                                        
                                                        const labelComponenet = document.getElementById(col + 'buttonForContactDropDown');
                                                        const labelComponenetCompanyContact=document.getElementById(col + 'buttonForCompanyContactDropDown');
                                                        if (labelComponenet) {
                                                            labelComponenet.textContent = existingContact[col];
                                                            labelComponenet.style.color = 'black';
                                                        }
                                                        fieldsVisibleOnExtensionForContact[col] = existingContact[col];   
                                                        if(labelComponenetCompanyContact){
                                                            labelComponenetCompanyContact.textContent = existingContact[col];
                                                            labelComponenetCompanyContact.style.color = 'black';
                                                        }
                                                        fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                                    }
                                                    else {
                                                        document.getElementById(col+'ForContact').value = existingContact[col];
                                                        fieldsVisibleOnExtensionForContact[col] = existingContact[col];

                                                        document.getElementById(col+'ForCompanyContact').value = existingContact[col];
                                                        fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                                    }


                                                }
                                            
                                        }
                                        else if(typeOfField == 'multiselect'){
                                            if(existingContact[col] != '' && existingContact[col]!=null){
                                                const selectedOptions = {};
                                                fieldsVisibleOnExtensionForContact[col]=[];
                                                fieldsVisibleOnExtensionForCompanyContact[col]=[];
                                                
                                                const selectedOptionsForCompanyContact = {};
                                                const usedIdsForRemoveButton = [];
                                                const values = existingContact[col].split(',');
                                                document.getElementById(col+'SelectedOptionContainerForContactMultiselect').style.display = 'inline-block';
                                                document.getElementById(col+'SelectedOptionContainerForCompanyContactMultiselect').style.display = 'inline-block';
                                                const unorderedListForSelectedValue = document.getElementById(col+'SelectedOptionsForContactMultiselect');
                                                const unorderedListForSelectedValueForCompanyContact = document.getElementById(col+'SelectedOptionsForCompanyContactMultiselect');
                                                
                                                function findLiIdByData(ulId, targetData) {
                                                    const ulElement = document.getElementById(ulId);
                                                    if (ulElement) {
                                                        const liElements = ulElement.getElementsByTagName("li");
                                                        for (const liElement of liElements) {
                                                            if (liElement.textContent === targetData && usedIdsForRemoveButton.indexOf(liElement.id) == -1) {
                                                                usedIdsForRemoveButton.push(liElement.id);
                                                                const associatedCheckbox = document.getElementById(liElement.id.replace(col, col+'checkbox'));
                                                                if (associatedCheckbox){
                                                                    associatedCheckbox.checked = true;
                                                                }
                                                                return liElement.id;
                                                            }
                                                        }
                                                    }
                                                    return null; // Return null if no matching li element is found
                                                }
                                                
                                                for(let val in values){
                                                    let idOfListTag = findLiIdByData(col+'optionsForContactMultiselect', values[val]);
                                                    const selectedListItem = document.createElement('li');
                                                    selectedListItem.textContent = values[val];
                                                    const selectedOptionId = idOfListTag;
                                                    
                                                    selectedOptions[selectedOptionId] = values[val];
                                                    
                                                    // Attach CSS properties dynamically
                                                    selectedListItem.style.cursor = 'pointer';
                                                    selectedListItem.style.marginBottom = '2px';
                                                    // selectedListItem.style.border = '1px solid #F8FAFB';
                                                    // selectedListItem.style.backgroundColor = 'white';
                                                    selectedListItem.style.color = 'black';
                                                    selectedListItem.style.paddingLeft = '5px';
                                                    selectedListItem.setAttribute('id', selectedOptionId + 'Selected');
                                                    // Add hover styling
                                                    selectedListItem.addEventListener('mouseenter', function() {
                                                        selectedListItem.style.backgroundColor = '#D3E2E2';
                                                        selectedListItem.style.transform = 'scale(0.97)';
                                                        // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                                    });
                                                    
                                                    selectedListItem.addEventListener('mouseleave', function() {
                                                        selectedListItem.style.backgroundColor = 'white';
                                                        selectedListItem.style.transform = 'scale(1)';
                                                        // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                                    });

                                                    
                                                    unorderedListForSelectedValue.style.height = '60px';
                                                    unorderedListForSelectedValue.appendChild(selectedListItem);


                                                    // Create remove option cross mark
                                                    const removeOption = document.createElement('span');
                                                    removeOption.textContent = 'X';
                                                    removeOption.style.float = 'right';
                                                    removeOption.style.marginRight = '5px';
                                                    removeOption.style.color = 'black';
                                                    removeOption.style.marginTop = '3px';
                                                    removeOption.style.fontSize = '10px';
                                                    removeOption.id = selectedOptionId + 'removeOption'+'ForContactMultiselect';
                                                    removeOption.classList.add('remove-option');

                                                    removeOption.addEventListener('click', function () {
                                                        removeSelectedOption(val, selectedListItem, selectedOptionId);
                                                        if(flagForNestedCustomFields){
                                                            let multiSelectSelectedValue = getFieldsVisibleOnExtensionForEntity(col, contactEntityTypeId);
                                                            parentOptionSelected(contactColumns[col], col, multiSelectSelectedValue, contactEntityTypeId);
                                                        }
                                                    });

                                                    // Create remove option circle
                                                    const removeOptionCircle = document.createElement('span');
                                                    removeOptionCircle.classList.add('remove-option-circle');

                                                    // Append the removeOptionCircle to the removeOption
                                                    removeOption.appendChild(removeOptionCircle);

                                                    // Add hover styling to the removeOption element
                                                    removeOption.addEventListener('mouseenter', function() {
                                                        selectedListItem.style.backgroundColor = '#f3dbdb';
                                                        removeOptionCircle.style.display = 'inline-block';
                                                    });
                                                    
                                                    removeOption.addEventListener('mouseleave', function() {
                                                        selectedListItem.style.backgroundColor = 'white';
                                                        removeOptionCircle.style.display = 'none';
                                                    });

                                                    selectedListItem.appendChild(removeOption);
                                                    
                                                    defaultSelectedOptions[col+'ForContact'][idOfListTag] = values[val];
                                                    
                                                    fieldsVisibleOnExtensionForContact[col].push(values[val]);
                                                    
                                                    function removeSelectedOption(option, listItem, selectedOptionId) {
                                                        // Remove from the tracking array
                                                        delete defaultSelectedOptions[col+'ForContact'][selectedOptionId];
                                                        fieldsVisibleOnExtensionForContact[col] = [];
                                                        for (let key in defaultSelectedOptions[col+'ForContact']){
                                                            fieldsVisibleOnExtensionForContact[col].push(defaultSelectedOptions[col+'ForContact'][key]);
                                                            
                                                        }
                                            
                                                        // Remove the list item from the selected list
                                                        listItem.remove();
                                                        if (fieldsVisibleOnExtensionForContact[col].length == 0){
                                                            document.getElementById(col + 'SelectedOptionContainerForContactMultiselect').style.display = 'none';
                                                            fieldsVisibleOnExtensionForContact[col] = null;
                                                        }

                                                        // mark the checkbox as unchecked 
                                                        const correspondingCheckbox = document.getElementById(selectedOptionId.replace(col, col+'checkbox'));
                                                        if (correspondingCheckbox){
                                                        correspondingCheckbox.checked = false;
                                                        }
                                                    
                                                    }    
                                                }
                                                for(let val in values){
                                                    let idOfListTag = findLiIdByData(col+'optionsForCompanyContactMultiselect', values[val]);
                                                    const selectedListItem = document.createElement('li');
                                                    selectedListItem.textContent = values[val];
                                                    const selectedOptionId = idOfListTag;
                    
                                                    selectedOptionsForCompanyContact[selectedOptionId] = values[val];
                                                    // Attach CSS properties dynamically
                                                    selectedListItem.style.cursor = 'pointer';
                                                    selectedListItem.style.marginBottom = '2px';
                                                    // selectedListItem.style.border = '1px solid #F8FAFB';
                                                    // selectedListItem.style.backgroundColor = 'white';
                                                    selectedListItem.style.color = 'black';
                                                    selectedListItem.style.paddingLeft = '5px';
                                                    selectedListItem.setAttribute('id',selectedOptionId+'Selected')
                                                    // Add hover styling
                                                    selectedListItem.addEventListener('mouseenter', function() {
                                                        selectedListItem.style.backgroundColor = '#D3E2E2';
                                                        selectedListItem.style.transform = 'scale(0.97)';
                                                        // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                                    });
                                                    
                                                    selectedListItem.addEventListener('mouseleave', function() {
                                                        selectedListItem.style.backgroundColor = 'white';
                                                        selectedListItem.style.transform = 'scale(1)';
                                                        // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                                    });

                                                    unorderedListForSelectedValueForCompanyContact.style.height = '60px';
                                                    unorderedListForSelectedValueForCompanyContact.appendChild(selectedListItem);

                                                    // Create remove option cross mark
                                                    const removeOption = document.createElement('span');
                                                    removeOption.textContent = 'X';
                                                    removeOption.style.float = 'right';
                                                    removeOption.style.marginRight = '5px';
                                                    removeOption.style.color = 'black';
                                                    removeOption.style.marginTop = '3px';
                                                    removeOption.style.fontSize = '10px';
                                                    removeOption.id = selectedOptionId + 'removeOption'+'ForCompanyContactMultiselect';
                                                    removeOption.classList.add('remove-option');

                                                    removeOption.addEventListener('click', function () {
                                                        removeSelectedOption(val, selectedListItem, selectedOptionId);
                                                        if(flagForNestedCustomFields){
                                                            let multiSelectSelectedValue = getFieldsVisibleOnExtensionForEntity(col, companyContactEntityTypeId);
                                                            parentOptionSelected(contactColumns[col], col, multiSelectSelectedValue, companyContactEntityTypeId);
                                                        }
                                                    });

                                                    // Create remove option circle
                                                    const removeOptionCircle = document.createElement('span');
                                                    removeOptionCircle.classList.add('remove-option-circle');

                                                    // Append the removeOptionCircle to the removeOption
                                                    removeOption.appendChild(removeOptionCircle);

                                                    // Add hover styling to the removeOption element
                                                    removeOption.addEventListener('mouseenter', function() {
                                                        selectedListItem.style.backgroundColor = '#f3dbdb';
                                                        removeOptionCircle.style.display = 'inline-block';
                                                    });
                                                    
                                                    removeOption.addEventListener('mouseleave', function() {
                                                        selectedListItem.style.backgroundColor = 'white';
                                                        removeOptionCircle.style.display = 'none';
                                                    });

                                                    selectedListItem.appendChild(removeOption);
                                                    function removeSelectedOption(option, listItem, selectedOptionId) {
                                                    
                                                        // Remove from the tracking array                              
                                                        
                                                        delete defaultSelectedOptions[col+'ForCompanyContact'][selectedOptionId];
                                                        fieldsVisibleOnExtensionForCompanyContact[col] = [];
                                                        for (let key in defaultSelectedOptions[col+'ForCompanyContact']){
                                                            fieldsVisibleOnExtensionForCompanyContact[col].push(defaultSelectedOptions[col+'ForCompanyContact'][key]);
                                                        }
                                            
                                                        // Remove the list item from the selected list
                                                        listItem.remove();
    
                                                        if (fieldsVisibleOnExtensionForCompanyContact[col].length == 0){
                                                            document.getElementById(col + 'SelectedOptionContainerForCompanyContactMultiselect').style.display = 'none';
                                                            fieldsVisibleOnExtensionForCompanyContact[col] = null;
                                                        }

                                                        // mark the checkbox as unchecked 
                                                        const correspondingCheckbox = document.getElementById(selectedOptionId.replace(col, col+'checkbox'));
                                                        if (correspondingCheckbox){
                                                        correspondingCheckbox.checked = false;
                                                        }
                                                    }
                                                    defaultSelectedOptions[col+'ForCompanyContact'][idOfListTag] = values[val];
                                                    fieldsVisibleOnExtensionForCompanyContact[col].push(values[val]);
                                                }
                                            }

                                        }else if(typeOfField == 'checkbox'){
                                            if(existingContact[col] == '1'){
                                                if(document.getElementById(col+'ForContact')){
                                                    document.getElementById(col+'ForContact').checked = true;
                                                }
                                                fieldsVisibleOnExtensionForContact[col] = existingContact[col];

                                                if(document.getElementById(col+'ForCompanyContact')){
                                                    document.getElementById(col+'ForCompanyContact').checked = true;
                                                }
                                                fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];

                                            }
                                        }else if(typeOfField == 'number'){
                                            if(existingContact[col] != null) {
                                                if(document.getElementById(col+'ForContact')){
                                                    document.getElementById(col+'ForContact').value = existingContact[col];
                                                }
                                                fieldsVisibleOnExtensionForContact[col] = existingContact[col];

                                                if(document.getElementById(col+'ForCompanyContact')){
                                                    document.getElementById(col+'ForCompanyContact').value = existingContact[col];
                                                }
                                                fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                            }
                                        }else if(typeOfField == 'phonenumber'){
                                            if(existingContact[col] != null) {
                                                if( document.getElementById(col+'ForContact')){
                                                    document.getElementById(col+'ForContact').value = existingContact[col];
                                                }
                                                fieldsVisibleOnExtensionForContact[col] = existingContact[col];

                                                if(document.getElementById(col+'ForCompanyContact')){
                                                    document.getElementById(col+'ForCompanyContact').value = existingContact[col];
                                                }
                                                fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                            }
                                        }else if(typeOfField == 'date'){
                                            if(existingContact[col] != null){
                                                if(existingContact[col].includes('-')){
                                                    if(document.getElementById(col+'ForContact')){
                                                        document.getElementById(col+'ForContact').value = existingContact[col];
                                                    }
                                                    fieldsVisibleOnExtensionForContact[col] = existingContact[col];
                                                    if(document.getElementById(col+'ForCompanyContact')){
                                                        document.getElementById(col+'ForCompanyContact').value = existingContact[col];
                                                    }
                                                    fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];

                                                    
                                                }else{
                                                    var date = new Date(existingContact[col]*1000);
                                                    // var dat = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear();
                                                    var month  = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1)));
                                                    var dat = ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) ;
                                                    var year = date.getFullYear();
                                                    if(document.getElementById(col+'ForContact')){
                                                        document.getElementById(col+'ForContact').value = ''+year+'-'+month+'-'+dat;
                                                    }
                                                    fieldsVisibleOnExtensionForContact[col] = existingContact[col];

                                                    if(document.getElementById(col+'ForCompanyContact')){
                                                        document.getElementById(col+'ForCompanyContact').value = ''+year+'-'+month+'-'+dat;
                                                    }
                                                    fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                                }
                                            }

                                        } else if(typeOfField == 'date_time'){
                                            if(existingContact[col] != null){
                                                if(document.getElementById(col+'ForContact')){
                                                    document.getElementById(col+'ForContact').value = getDateTimeValue(existingContact[col]);
                                                }
                                                fieldsVisibleOnExtensionForContact[col] = existingContact[col];

                                                if(document.getElementById(col+'ForCompanyContact')){
                                                    document.getElementById(col+'ForCompanyContact').value = getDateTimeValue(existingContact[col]);
                                                }
                                                fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                            }

                                        }else if(typeOfField == 'file' && flagForFileCustomField){
                                            if(existingContact[col] != null && existingContact[col] != ''){
                                                let val = existingContact[col].split(',');
                                                let nameOfFile = val[1];
                        
                                                if (nameOfFile.length < 28){
                                                    // span.textContent = nameOfFile;
                                                    if(document.getElementById(col+'ForContact' + 'span')){
                                                        document.getElementById(col+'ForContact' + 'span').textContent = nameOfFile;
                                                    }
                                                    if(document.getElementById(col+'ForCompanyContact' + 'span')){
                                                        document.getElementById(col+'ForCompanyContact' + 'span').textContent = nameOfFile;
                                                    }
                                                }
                                                else {
                                                    nameOfFile = nameOfFile.split('.');
                                                    let firstHalfName = nameOfFile[0]?.slice(0, 25);
                                                    let completeName = firstHalfName + '.. .' + nameOfFile[nameOfFile.length - 1];
                                                    // span.textContent = completeName;
                                                    if(document.getElementById(col+'ForContact' + 'span')){
                                                        document.getElementById(col+'ForContact' + 'span').textContent = completeName;
                                                    }
                                                    if( document.getElementById(col+'ForCompanyContact' + 'span')){
                                                        document.getElementById(col+'ForCompanyContact' + 'span').textContent = completeName;
                                                    }
                                                    
                                                }
                                                
                                                fieldsVisibleOnExtensionForContact[col] = existingContact[col];
                                                fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                            }
                                        }
                                    }else if(col == 'stageid'){
                                       
                                        if(flagForSearchableDropdown){
                                            const stageIdSelectorUl = document.getElementById('stageidoptionsForContact');
                                            const stageIdSelector=stageIdSelectorUl.querySelectorAll('li');
                                            const labelComponenet = document.getElementById(col + 'buttonForContact');
                                            for(let opt in stageIdSelector){
        
                                                if((stageIdSelector[opt].id == ('stageid'+existingContact[col])) && existingContact[col] != null){
                                                    // stageIdSelector[opt].setAttribute('selected','selected');
                                                    labelComponenet.textContent = stageIdSelector[opt].textContent;
                                                    labelComponenet.style.color = 'black';
                                                    fieldsVisibleOnExtensionForContact[col] = existingContact[col];
                                                    fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                                }
                                            }
                                        }
                                        else{
                                            const stageIdSelector = document.getElementById('stageidForContact').options;
                                            for(let opt in stageIdSelector){
                                    
                                                if(stageIdSelector[opt].id == existingContact[col] && existingContact[col] != null){
                                                    stageIdSelector[opt].setAttribute('selected','selected');
                                                    fieldsVisibleOnExtensionForContact[col] = existingContact[col];
                                                    fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                                    document.getElementById('stageidForContact').style.color = 'black';
                                                }
                                            }

                                            if(existingContact[col] == null){
                                                document.getElementById('stageidForContact').querySelector(`option[id="${0}"]`).selected = true;
                                                fieldsVisibleOnExtensionForContact[col] = existingContact[col];
                                                fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                            }
                                        }
                                    }else if(flagForAddressFields && addressFields.includes(col)){
                                        if(existingContact[col] != null) {
                                            if(col == 'locality'){
                                                document.getElementById('contact_locality').value = existingContact[col];
                                                fieldsVisibleOnExtensionForContact[col] = existingContact[col];
                                            } else {
                                                document.getElementById(col+'ForContact').value = existingContact[col];
                                                fieldsVisibleOnExtensionForContact[col] = existingContact[col];

                                                document.getElementById(col+'ForCompanyContact').value = existingContact[col];
                                                fieldsVisibleOnExtensionForCompanyContact[col] = existingContact[col];
                                            }   
                                        } 
                                    }
                                }
                            }
                        }


                        //This section fill data into company field if company already in DB
                        companyColumnInfo = response.data.company_columns;
                        existingCompany  = response.data.company;
                        holdCompanyObject = existingCompany;

                        if(existingCompany && flagForShowOnExtension == true) {
                            getExistingEntityTypeValues(existingCompany.id, companyEntityTypeId);
                            if(flagForNestedCustomFields){
                                fillExistingData(existingCompany, companyColumnInfo, companyEntityTypeId);
                            }
                            existingCompanyData = [];
                            for(let col in companyColumnInfo){
                                if(companyColumnInfo[col]['show_on_extension'] && companyColumnInfo[col]['show_on_extension'] == true){
                                    if(col.substring(0,10) == 'custcolumn'){
                                        var typeOfField = companyColumnInfo[col].type;
                                        if(typeOfField == 'text' || typeOfField == 'longtext' || typeOfField == 'email' || typeOfField == 'social_profile'){
                                            if(existingCompany[col] != null) {
                                                if(document.getElementById(col+'ForCompany')){
                                                    document.getElementById(col+'ForCompany').value = existingCompany[col];
                                                }
                                                fieldsVisibleOnExtensionForCompany[col] = existingCompany[col];
                                            }
                                        }else if(typeOfField == 'dropdown' && col != 'industry'){
                                            if(existingCompany[col] != '') {  
                                                
                                                
                                                if(flagForSearchableDropdown){
                                                        
                                                    const labelComponenet = document.getElementById(col + 'buttonForCompanyDropDown');
                                                    if (labelComponenet) {
                                                        labelComponenet.textContent = existingCompany[col];
                                                        labelComponenet.style.color = 'black';
                                                    }
                                                    fieldsVisibleOnExtensionForCompany[col] = existingCompany[col];  
                                                    
                                                }
                                                else {
                                                    document.getElementById(col+'ForCompany').value = existingCompany[col];
                                                    fieldsVisibleOnExtensionForCompany[col] = existingCompany[col];
                                                }
                                            }
                                        }else if(typeOfField == 'multiselect'){
                                            if(existingCompany[col] != '' && existingCompany[col]!=null && document.getElementById(col+'SelectedOptionContainerForCompanyMultiselect')){
                                                const selectedOptions = {};
                                                
                                                fieldsVisibleOnExtensionForCompany[col]=[];
                                                const usedIdsForRemoveButton = [];
                                                const values = existingCompany[col].split(',');
                                                document.getElementById(col+'SelectedOptionContainerForCompanyMultiselect').style.display = 'inline-block';
                                                const unorderedListForSelectedValue = document.getElementById(col+'SelectedOptionsForCompanyMultiselect');
                                               
                                                function findLiIdByData(ulId, targetData) {
                                                    const ulElement = document.getElementById(ulId);
                                                    if (ulElement) {
                                                        const liElements = ulElement.getElementsByTagName("li");
                                                        for (const liElement of liElements) {
                                                            if (liElement.textContent === targetData && usedIdsForRemoveButton.indexOf(liElement.id) == -1) {
                                                                usedIdsForRemoveButton.push(liElement.id);
                                                                const associatedCheckbox = document.getElementById(liElement.id.replace(col, col+'checkbox'));
                                                                if (associatedCheckbox){
                                                                    associatedCheckbox.checked = true;
                                                                }
                                                                return liElement.id;
                                                            }
                                                        }
                                                    }
                                                    return null; // Return null if no matching li element is found
                                                }
                                               
                                                for(let val in values){
                                                    let idOfListTag = findLiIdByData(col+'optionsForCompanyMultiselect', values[val]);
                                                    const selectedListItem = document.createElement('li');
                                                    selectedListItem.textContent = values[val];
                                                    const selectedOptionId=idOfListTag;
                                                    selectedOptions[selectedOptionId] = values[val];
                                                    // Attach CSS properties dynamically
                                                    selectedListItem.style.cursor = 'pointer';
                                                    selectedListItem.style.marginBottom = '2px';
                                                    // selectedListItem.style.border = '1px solid #F8FAFB';
                                                    // selectedListItem.style.backgroundColor = '#E8E8E8';
                                                    selectedListItem.style.color = 'black';
                                                    selectedListItem.style.paddingLeft = '5px';
                                                    selectedListItem.setAttribute('id',selectedOptionId+'Selected')    
                                                    // Add hover styling
                                                    selectedListItem.addEventListener('mouseenter', function() {
                                                        selectedListItem.style.backgroundColor = '#D3E2E2';
                                                        selectedListItem.style.transform = 'scale(0.97)';
                                                        // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                                    });
                                                    
                                                    selectedListItem.addEventListener('mouseleave', function() {
                                                        selectedListItem.style.backgroundColor = 'white';
                                                        selectedListItem.style.transform = 'scale(1)';
                                                        // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                                    });

                                                    
                                                    unorderedListForSelectedValue.style.height = '60px';
                                                    unorderedListForSelectedValue.appendChild(selectedListItem);

                                                    // Create remove option cross mark
                                                    const removeOption = document.createElement('span');
                                                    removeOption.textContent = 'X';
                                                    removeOption.style.float = 'right';
                                                    removeOption.style.marginRight = '5px';
                                                    removeOption.style.color = 'black';
                                                    removeOption.style.marginTop = '3px';
                                                    removeOption.style.fontSize = '10px';
                                                    removeOption.id = selectedOptionId + 'removeOption'+'ForCompanyMultiselect';
                                                    removeOption.classList.add('remove-option');

                                                    removeOption.addEventListener('click', function () {
                                                        removeSelectedOption(val, selectedListItem, selectedOptionId);
                                                        if(flagForNestedCustomFields){
                                                            let multiSelectSelectedValue = getFieldsVisibleOnExtensionForEntity(col, companyEntityTypeId);
                                                            parentOptionSelected(companyColumns[col], col, multiSelectSelectedValue, companyEntityTypeId);
                                                        }
                                                    });

                                                    // Create remove option circle
                                                    const removeOptionCircle = document.createElement('span');
                                                    removeOptionCircle.classList.add('remove-option-circle');

                                                    // Append the removeOptionCircle to the removeOption
                                                    removeOption.appendChild(removeOptionCircle);

                                                    // Add hover styling to the removeOption element
                                                    removeOption.addEventListener('mouseenter', function() {
                                                        selectedListItem.style.backgroundColor = '#f3dbdb';
                                                        removeOptionCircle.style.display = 'inline-block';
                                                    });
                                                    
                                                    removeOption.addEventListener('mouseleave', function() {
                                                        selectedListItem.style.backgroundColor = 'white';
                                                        removeOptionCircle.style.display = 'none';
                                                    });

                                                    selectedListItem.appendChild(removeOption);
                                                    
                                                    defaultSelectedOptions[col+'ForCompany'][idOfListTag] = values[val];
                                                    
                                                    fieldsVisibleOnExtensionForCompany[col].push(values[val]);
                                                    
                                                    function removeSelectedOption(option, listItem, selectedOptionId) {
                                                        // Remove from the tracking array
                                                        delete defaultSelectedOptions[col+'ForCompany'][selectedOptionId];
                                                        fieldsVisibleOnExtensionForCompany[col] = [];
                                                        for (let key in defaultSelectedOptions[col+'ForCompany']){
                                                            fieldsVisibleOnExtensionForCompany[col].push(defaultSelectedOptions[col+'ForCompany'][key]);
                                                            
                                                        }
                                            
                                                        // Remove the list item from the selected list
                                                        listItem.remove();
                                                        if (fieldsVisibleOnExtensionForCompany[col].length == 0){
                                                            document.getElementById(col + 'SelectedOptionContainerForCompanyMultiselect').style.display = 'none';
                                                            fieldsVisibleOnExtensionForCompany[col] = null;
                                                        }

                                                        // mark the checkbox as unchecked 
                                                        const correspondingCheckbox = document.getElementById(selectedOptionId.replace(col, col+'checkbox'));
                                                        if (correspondingCheckbox){
                                                        correspondingCheckbox.checked = false;
                                                        }
                                                    
                                                    }  
                                                }
                                            }

                                        }else if(typeOfField == 'checkbox'){
                                            if(existingCompany[col] == '1'){
                                                if(document.getElementById(col+'ForCompany')){
                                                    document.getElementById(col+'ForCompany').checked = true;
                                                }
                                                fieldsVisibleOnExtensionForCompany[col] = existingCompany[col];
                                            }
                                        }else if(typeOfField == 'number'){
                                            if(existingCompany[col] != null) {
                                                if(document.getElementById(col+'ForCompany')){
                                                    document.getElementById(col+'ForCompany').value = existingCompany[col];
                                                }
                                                fieldsVisibleOnExtensionForCompany[col] = existingCompany[col];
                                            }
                                        }else if(typeOfField == 'phonenumber'){
                                            if(existingCompany[col] != null) {
                                                if(document.getElementById(col+'ForCompany')){
                                                    document.getElementById(col+'ForCompany').value = existingCompany[col];
                                                }
                                                fieldsVisibleOnExtensionForCompany[col] = existingCompany[col];
                                            }
                                        }else if(typeOfField == 'date'){
                                            if(existingCompany[col] != null){
                                                if(existingCompany[col].includes('-')){
                                                    if(document.getElementById(col+'ForCompany')){
                                                        document.getElementById(col+'ForCompany').value = existingCompany[col];
                                                    }
                                                    fieldsVisibleOnExtensionForCompany[col] = existingCompany[col];
                                                  
                                                }else{

                                                    var date = new Date(existingCompany[col]*1000);
                                                    // var dat = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear();
                                                    var month  = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1)));
                                                    var dat = ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) ;
                                                    var year = date.getFullYear();
                                                    if(document.getElementById(col+'ForCompany')){
                                                        document.getElementById(col+'ForCompany').value = ''+year+'-'+month+'-'+dat;
                                                    }
                                                    fieldsVisibleOnExtensionForCompany[col] = existingCompany[col];
                                                }
                                            }

                                        } else if(typeOfField == 'date_time'){
                                            if(existingCompany[col] != null && document.getElementById(col+'ForCompany')){
                                                document.getElementById(col+'ForCompany').value = getDateTimeValue(existingCompany[col]);
                                                fieldsVisibleOnExtensionForCompany[col] = existingCompany[col];
                                            }

                                        }else if(typeOfField == 'file' && flagForFileCustomField){
                                            if(existingCompany[col] != null && existingCompany[col] != ''){
                                                let val = existingCompany[col].split(',');
                                                let nameOfFile = val[1];
                                                if (nameOfFile.length < 28){
                                                    // span.textContent = nameOfFile;
                                                    if(document.getElementById(col+'ForCompany' + 'span')){
                                                        document.getElementById(col+'ForCompany' + 'span').textContent = nameOfFile;
                                                    }
                                                    
                                                    
                                                }
                                                else {
                                                    nameOfFile = nameOfFile.split('.');
                                                    let firstHalfName = nameOfFile[0]?.slice(0, 25);
                                                    let completeName = firstHalfName + '.. .' + nameOfFile[nameOfFile.length - 1];
                                                    // span.textContent = completeName;
                                                    if(document.getElementById(col+'ForCompany' + 'span')){
                                                        document.getElementById(col+'ForCompany' + 'span').textContent = completeName;
                                                    }
                                                    
                                                    
                                                }
                                                
                                                fieldsVisibleOnExtensionForCompany[col] = existingCompany[col];
                                                
                                            }
                                        }
                                    }
                                    if(col == 'industry' && existingCompany[col+'id']!='' && existingCompany[col+'id']!=null){
                                        
                                        if(flagForSearchableDropdown){
                                            
                                            const allIndustriesUl = document.getElementById('industryoptionsForCompanyIndustries');
                                            const allIndustries=allIndustriesUl.querySelectorAll('li');
                                            const labelComponenet = document.getElementById(col + 'buttonForCompanyIndustries');
                                            if (labelComponenet) {
                                                for(var opt in allIndustries){
                                                   
                                                    if(allIndustries[opt].id && existingCompany[col+'id'] && allIndustries[opt].id == 'industry'+existingCompany[col+'id']+'ForCompanyIndustries'){
                                                        // allIndustries[opt].setAttribute('selected','selected');
                                                        labelComponenet.textContent = allIndustries[opt].textContent;
                                                        labelComponenet.style.color = 'black';
                                                        fieldsVisibleOnExtensionForCompany[col+'id'] = existingCompany[col+'id'];
                                    
                                                        // document.getElementById('industryForCompanyIndustries').style.color = 'black';
                                                    }
                                                }
                                            } 
                                        }
                                        else {
                                            const allIndustries = document.getElementById('industryForCompanyIndustries').options;
                                      
                                            for(var opt in allIndustries){
                                            if(allIndustries[opt].id && existingCompany[col+'id'] && allIndustries[opt].id == existingCompany[col+'id']){
                                                allIndustries[opt].setAttribute('selected','selected');
                                                fieldsVisibleOnExtensionForCompany[col+'id'] = existingCompany[col+'id'];
                            
                                                document.getElementById('industryForCompanyIndustries').style.color = 'black';
                                            }
                                            }
                                        }
                                    }
                                    if(flagForAddressFields && addressFields.includes(col)){
                                        if(existingCompany[col] != null) {
                                            document.getElementById(col+'ForCompany').value = existingCompany[col];
                                            fieldsVisibleOnExtensionForCompany[col] = existingCompany[col];
                                        } 
                                    }
                                }
                            }
                            sendMessageToParent({ 'message': 'getContactsLinked', 'companyid': existingCompany.id });
                        }

                        // This section will fill data if candidate already exists 
                        let candidateColumnInfo = response.data?.candidate_columns;
                        existingCandidate = response.data?.candidate;

                        if (existingCandidate && flagForShowOnExtension){
                            if(flagForNestedCustomFields){
                                fillExistingData(existingCandidate, candidateColumnInfo, candidateEntityTypeId);
                            }
                            for (let col in candidateColumnInfo){
                                if(candidateColumnInfo[col]['show_on_extension'] && candidateColumnInfo[col]['show_on_extension'] == true && !defaultExtensionFields.includes(col)){
                                    
                                    var typeOfCandidateField = candidateColumnInfo[col].type;


                                    if(col == 'languageskills' && flagForSearchableDropdown){
                                        if (existingCandidate[col] != null && existingCandidate[col] != ''){

                                            const parentElementOfLanguageNew = document.getElementById('dropdownContainerNew');
                                            fieldsVisibleOnExtension[col] = existingCandidate[col];
                                            let listOfLanguageData = existingCandidate[col]?.split(',');
                                            let initialLanguageData = [];


                                            for (let i = 0; i < listOfLanguageData.length; i++){
                                                let currentLanguageData = listOfLanguageData[i];
                                                const parts = currentLanguageData.split("(");

                                                const languagePart = parts[0] ? parts[0]?.trim() : ''; // "Afar"
                                                const proficiencyPart = parts[1] ? parts[1]?.replace(")", "")?.trim(): '';
                                                const pairOfLanguageProficiency = {'value1': languagePart, 'value2': proficiencyPart};
                                                initialLanguageData.push(pairOfLanguageProficiency);
                                            }

                                            let dropdown1List = languageList;
                                            let dropdown2List = proficiencyList;

                                            
                                            function populateDropdowns(dropdownGroup) {
                                                const langAndProfAndButtonConatiner = document.createElement('div');
                                                langAndProfAndButtonConatiner.style.marginBottom = '10px';

                                                // LANGUAGE DROPDOWN 
                                                // block to show the button to view options 
                                                let containerToShowDropdownOption = document.createElement('div');
                                                containerToShowDropdownOption.id = col + 'OuterContainerForOptions' + countOfLanguageProfieciency;
                                                containerToShowDropdownOption.style.width = 95 + '%';
                                                let buttonToShowDropdownOption = document.createElement('div');
                                                buttonToShowDropdownOption.id = col + 'button' + countOfLanguageProfieciency;
                                                buttonToShowDropdownOption.innerHTML = dropdown1List[37];
                                                buttonToShowDropdownOption.style.color = 'black';
                                                containerToShowDropdownOption.appendChild(buttonToShowDropdownOption);


                                                // input component for search
                                                let searchInput = document.createElement('input');
                                                searchInput.setAttribute('type', 'text');
                                                searchInput.setAttribute('id', col + 'search');
                                                searchInput.setAttribute('placeholder', 'Please Search & Select');
                                                searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                                searchInput.setAttribute('class', 'rcrm-ctrl');


                                                // block to show the option container
                                                let containerDropdownOption = document.createElement('div');
                                                containerDropdownOption.id = col + 'OptionsOuterContainer' + countOfLanguageProfieciency;
                                                let dropdownOption = document.createElement('ul');
                                                dropdownOption.id = col + 'options' + countOfLanguageProfieciency;
                                                dropdownOption.setAttribute('style', 'list-style: none;');
                                                containerDropdownOption.appendChild(searchInput);
                                                containerDropdownOption.appendChild(dropdownOption);


                                                // add Event Listener in the input element 
                                                searchInput.addEventListener('input', function(e){
                                                    let searchValue = e.target.value.trim();
                                                    let optionsList = dropdownOption;
                                                    let matchesCount = 0;

                                                    optionsList.innerHTML = '';
                                                    for (let option of dropdown1List){
                                                        if (option.toLowerCase().includes(searchValue.toLowerCase())){
                                                            const li = document.createElement('li');
                                                            li.textContent = option;
                                                            li.id = col + dropdown1List.indexOf(option);
                                                            li.addEventListener('click', handleOptionClick);
                                                            li.style.cursor = 'pointer';
                                                            li.style.marginBottom = '5px';
                                                            li.style.padding = '5px';
                                                            li.style.color = 'black';
                                                            // li.style.backgroundColor = '#E8E8E8';
                                                            li.style.border = '1px solid #F8FAFB';

                                                            li.addEventListener('mouseover', function () {
                                                                li.style.backgroundColor = '#f5f5f5';
                                                            });
        
                                                            li.addEventListener('mouseout', function () {
                                                                li.style.backgroundColor = 'white';
                                                            });


                                                            optionsList.appendChild(li);
                                                            matchesCount++;
                                                        }
                                                    }


                                                    if (matchesCount == 0){
                                                        const li = document.createElement('li');
                                                        li.textContent = 'No Results Found';
                                                        li.style.marginBottom = '5px';
                                                        li.style.padding = '5px';
                                                        li.style.color = 'black';
                                                        li.style.backgroundColor = '#E8E8E8';
                                                        li.style.border = '1px solid #F8FAFB';
                                                        optionsList.appendChild(li);
                                                    }
        
                                                    if ( matchesCount < 5 ) {
                                                        optionsList.style.height = 'auto';
                                                        optionsList.style.overflowY = 'hidden';
                                                    }
        
                                                    else {
                                                        optionsList.style.height = '200px';
                                                        optionsList.style.overflowY = 'scroll';
                                                    }
        
                                                    matchesCount = 0;
                                                });

                                                // Add event listener for keydown event to prevent Enter key press
                                                searchInput.addEventListener('keydown', function(e) {
                                                    if (e.key === 'Enter') {
                                                        e.preventDefault();
                                                    }
                                                });

                                                langAndProfAndButtonConatiner.appendChild(containerToShowDropdownOption);
                                                langAndProfAndButtonConatiner.appendChild(containerDropdownOption);

                                                // Get options list and selected list elements
                                                const optionsList = dropdownOption;
                                                const toggleButton = buttonToShowDropdownOption;


                                                // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                                if (dropdown1List.length > 5){
                                                    optionsList.style.height = '200px';
                                                    optionsList.style.overflowY = 'scroll';
                                                }


                                                // Set CSS properties dynamically on the Dropdown button
                                                toggleButton.style.cursor = 'pointer';
                                                toggleButton.style.padding = '3px';
                                                toggleButton.style.border = '1px solid #E8E8E8';
                                                toggleButton.style.height = '30px';
                                                toggleButton.style.marginBottom = '5px';
                                                toggleButton.style.borderRadius = '5px';
                                                toggleButton.style.paddingLeft = '5px';

                                                // Set CSS properties dynamically on the Dropdown Options Container
                                                containerDropdownOption.style.display = 'none';
                                                containerDropdownOption.style.border = '1px solid #E8E8E8';
                                                containerDropdownOption.style.padding = '10px';
                                                containerDropdownOption.style.marginBottom = '5px';
                                                containerDropdownOption.style.borderRadius = '5px';


                                                // Set toggle button click event
                                                toggleButton.addEventListener('click', function() {
                                                    toggleOptionsContainer(this);
                                                });

                                                // toggleButton.addEventListener('click', toggleOptionsContainer);

                                                // Toggle options container visibility
                                                function toggleOptionsContainer(e) {
                                                    let idOfButton = e.id.charAt(e.id.length - 1);
                                                    document.getElementById(col + 'OptionsOuterContainer' + idOfButton).style.display = document.getElementById(col + 'OptionsOuterContainer' + idOfButton).style.display === 'none' ? 'block' : 'none';
                                                }

                                                // dropdown data
                                                const data = dropdown1List;

                                                // Generate options dynamically
                                                data.forEach((option, index) => {
                                                    const li = document.createElement('li');
                                                    li.textContent = option;
                                                    li.id = col + index;
                                                    li.addEventListener('click', handleOptionClick);

                                                    // Attach CSS properties dynamically
                                                    li.style.cursor = 'pointer';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    // li.style.backgroundColor = '#E8E8E8';

                                                    li.addEventListener('mouseover', function () {
                                                        li.style.backgroundColor = '#f5f5f5';
                                                    });

                                                    li.addEventListener('mouseout', function () {
                                                        li.style.backgroundColor = 'white';
                                                    });

                                                    optionsList.appendChild(li);
                                                });





                                                // PROFICIENCY DROPDOWN
                                                // block to show the button to view options 
                                                let containerToShowDropdownOption2 = document.createElement('div');
                                                containerToShowDropdownOption2.id = col + 'OuterContainerForOptionsProficiency' + countOfLanguageProfieciency;
                                                containerToShowDropdownOption2.style.width = 95 + '%';
                                                let buttonToShowDropdownOption2 = document.createElement('div');
                                                buttonToShowDropdownOption2.id = col + 'buttonProficiency' + countOfLanguageProfieciency;
                                                buttonToShowDropdownOption2.innerHTML = dropdown2List[5];
                                                buttonToShowDropdownOption2.style.color = 'black';
                                                containerToShowDropdownOption2.appendChild(buttonToShowDropdownOption2);


                                                // input component for search
                                                searchInput = document.createElement('input');
                                                searchInput.setAttribute('type', 'text');
                                                searchInput.setAttribute('id', col + 'search');
                                                searchInput.setAttribute('placeholder', 'Please Search & Select');
                                                searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                                searchInput.setAttribute('class', 'rcrm-ctrl');


                                                // block to show the option container
                                                let containerDropdownOption2 = document.createElement('div');
                                                containerDropdownOption2.id = col + 'OptionsOuterContainerProficiency' + countOfLanguageProfieciency;
                                                let dropdownOption2 = document.createElement('ul');
                                                dropdownOption2.id = col + 'options' + countOfLanguageProfieciency;
                                                dropdownOption2.setAttribute('style', 'list-style: none;');
                                                containerDropdownOption2.appendChild(searchInput);
                                                containerDropdownOption2.appendChild(dropdownOption2);


                                                // add Event Listener in the input element 
                                                searchInput.addEventListener('input', function(e){
                                                    let searchValue = e.target.value.trim();
                                                    let optionsList = dropdownOption2;
                                                    let matchesCount = 0;

                                                    optionsList.innerHTML = '';
                                                    for (let option of dropdown2List){
                                                        if (option.toLowerCase().includes(searchValue.toLowerCase())){
                                                            const li = document.createElement('li');
                                                            li.textContent = option;
                                                            li.id = col + dropdown2List.indexOf(option);
                                                            li.addEventListener('click', handleOptionClick);
                                                            li.style.cursor = 'pointer';
                                                            li.style.marginBottom = '5px';
                                                            li.style.padding = '5px';
                                                            li.style.color = 'black';
                                                            // li.style.backgroundColor = '#E8E8E8';
                                                            li.style.border = '1px solid #F8FAFB';

                                                            li.addEventListener('mouseover', function () {
                                                                li.style.backgroundColor = '#f5f5f5';
                                                            });
        
                                                            li.addEventListener('mouseout', function () {
                                                                li.style.backgroundColor = 'white';
                                                            });

                                                            optionsList.appendChild(li);
                                                            matchesCount++;
                                                        }
                                                    }


                                                    if (matchesCount == 0){
                                                        const li = document.createElement('li');
                                                        li.textContent = 'No Results Found';
                                                        li.style.marginBottom = '5px';
                                                        li.style.padding = '5px';
                                                        li.style.color = 'black';
                                                        li.style.backgroundColor = '#E8E8E8';
                                                        li.style.border = '1px solid #F8FAFB';
                                                        optionsList.appendChild(li);
                                                    }
        
                                                    if ( matchesCount < 5 ) {
                                                        optionsList.style.height = 'auto';
                                                        optionsList.style.overflowY = 'hidden';
                                                    }
        
                                                    else {
                                                        optionsList.style.height = '200px';
                                                        optionsList.style.overflowY = 'scroll';
                                                    }
        
                                                    matchesCount = 0;
                                                });


                                                // Add event listener for keydown event to prevent Enter key press
                                                searchInput.addEventListener('keydown', function(e) {
                                                    if (e.key === 'Enter') {
                                                        e.preventDefault();
                                                    }
                                                });

                                                langAndProfAndButtonConatiner.appendChild(containerToShowDropdownOption2);
                                                langAndProfAndButtonConatiner.appendChild(containerDropdownOption2);

                                                // Get options list and selected list elements
                                                const optionsList2 = dropdownOption2;
                                                const toggleButton2 = buttonToShowDropdownOption2;


                                                // we don't need a scroll bar if the lenght of options list is less than or equal to 5
                                                if (dropdown2List.length > 5){
                                                    optionsList2.style.height = '200px';
                                                    optionsList2.style.overflowY = 'scroll';
                                                }


                                                // Set CSS properties dynamically on the Dropdown button
                                                toggleButton2.style.cursor = 'pointer';
                                                toggleButton2.style.padding = '3px';
                                                toggleButton2.style.border = '1px solid #E8E8E8';
                                                toggleButton2.style.height = '30px';
                                                toggleButton2.style.marginBottom = '5px';
                                                toggleButton2.style.borderRadius = '5px';
                                                toggleButton2.style.paddingLeft = '5px';

                                                // Set CSS properties dynamically on the Dropdown Options Container
                                                containerDropdownOption2.style.display = 'none';
                                                containerDropdownOption2.style.border = '1px solid #E8E8E8';
                                                containerDropdownOption2.style.padding = '10px';
                                                containerDropdownOption2.style.marginBottom = '5px';
                                                containerDropdownOption2.style.borderRadius = '5px';


                                                // Set toggle button click event
                                                toggleButton2.addEventListener('click', function(){
                                                    toggleOptionsContainer2(this);
                                                });

                                                // Toggle options container visibility
                                                function toggleOptionsContainer2(e) {
                                                    let idOfElement = e.id.charAt(e.id.length - 1);
                                                    document.getElementById(col + 'OptionsOuterContainerProficiency' + idOfElement ).style.display = document.getElementById(col + 'OptionsOuterContainerProficiency' + idOfElement).style.display === 'none' ? 'block' : 'none';
                                                }

                                                // dropdown data
                                                const data2 = dropdown2List;

                                                // Generate options dynamically
                                                data2.forEach((option, index) => {
                                                    const li = document.createElement('li');
                                                    li.textContent = option;
                                                    li.id = col + index;
                                                    li.addEventListener('click', handleOptionClick);

                                                    // Attach CSS properties dynamically
                                                    li.style.cursor = 'pointer';
                                                    li.style.marginBottom = '5px';
                                                    li.style.padding = '5px';
                                                    li.style.color = 'black';
                                                    // li.style.backgroundColor = '#E8E8E8';

                                                    li.addEventListener('mouseover', function () {
                                                        li.style.backgroundColor = '#f5f5f5';
                                                    });

                                                    li.addEventListener('mouseout', function () {
                                                        li.style.backgroundColor = 'white';
                                                    });

                                                    optionsList2.appendChild(li);
                                                });


                                                function handleOptionClick(e) {
                                                    const selectedOption = e.target.textContent;
                                                    const selectedId = e.target.parentElement.id.charAt(e.target.parentElement.id.length - 1);

                                                    if(dropdown2List.includes(selectedOption)){
                                                        document.getElementById(col + 'buttonProficiency' + selectedId).textContent = selectedOption;
                                                        document.getElementById(col + 'OptionsOuterContainerProficiency' + selectedId).style.display = 'none';
                                                        selectedValues['Group ' + selectedId]['value2'] = selectedOption;
                                                    }
                                                    else {
                                                        document.getElementById(col + 'button' + selectedId).textContent = selectedOption;
                                                        document.getElementById(col + 'OptionsOuterContainer' + selectedId).style.display = 'none';
                                                        selectedValues['Group ' + selectedId]['value1'] = selectedOption;
                                                    }
                                                }


                                                const firstRemoveButton = document.createElement('button'); // Add remove button
                                                firstRemoveButton.textContent = 'Remove';
                                                firstRemoveButton.id = col + 'removeButton' + countOfLanguageProfieciency;
                                                firstRemoveButton.style.width = '95%';
                                                firstRemoveButton.style.border = '1px solid #E8E8E8';
                                                firstRemoveButton.style.height = '20px';

                                                // Remove button event listener
                                                firstRemoveButton.onclick = function() {
                                                    removeDropdownGroup(this);
                                                };


                                                langAndProfAndButtonConatiner.appendChild(firstRemoveButton);

                                                dropdownGroup.appendChild(langAndProfAndButtonConatiner);

                                                // update the selected values
                                                selectedValues['Group ' + countOfLanguageProfieciency] = {
                                                    value1: dropdown1List[37],
                                                    value2: dropdown2List[5]
                                                }

                                                // increment the count of language proficiency
                                                countOfLanguageProfieciency += 1;
                                            }


                                            function addDropdownGroup() {
                                                populateDropdowns(parentElementOfLanguageNew);
                                            }

                                            function removeDropdownGroup(button) {
                                                const dropdownGroup = button.parentElement;
                                                const idOfButton = button.id.charAt(button.id.length - 1);
                                                const dropdownContainer = dropdownGroup.parentElement;
                                                dropdownContainer.removeChild(dropdownGroup);
                                                delete selectedValues['Group ' + idOfButton];
                                            }
    

                                            if (listOfLanguageData.length > 0){
                                                const firstLangLabel = document.getElementById('languageskillsbutton1');
                                                const firstProfLabel = document.getElementById('languageskillsbuttonProficiency1');

                                                firstLangLabel.textContent = initialLanguageData[0].value1;
                                                firstProfLabel.textContent = initialLanguageData[0].value2;

                                                selectedValues['Group 1'] = {
                                                    value1: initialLanguageData[0].value1,
                                                    value2: initialLanguageData[0].value2
                                                }

                                                for(let i = 1; i < initialLanguageData.length; i++){
                                                    addDropdownGroup();

                                                    const langLabel = document.getElementById('languageskillsbutton' + (i + 1));
                                                    const profLabel = document.getElementById('languageskillsbuttonProficiency' + (i + 1));

                                                    langLabel.textContent = initialLanguageData[i].value1;
                                                    profLabel.textContent = initialLanguageData[i].value2;

                                                    selectedValues['Group ' + (i + 1)] = {
                                                        value1: initialLanguageData[i].value1,
                                                        value2: initialLanguageData[i].value2
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            document.getElementById('dropdownContainerNew').innerHTML = '';
                                            selectedValues = {};
                                        }
                                    }
                                    else if (col == 'languageskills'){
                                        // values -> Afar(Limited working proficiency),Abkhazian(Full professional proficiency),Afrikaans(Native or bilingual proficiency)
                                        if (existingCandidate[col] != null && existingCandidate[col] != ''){
                                            fieldsVisibleOnExtension[col] = existingCandidate[col];
                                            var listOfLanguageData = existingCandidate[col]?.split(',');
                                            let initialLanguageData = [];


                                            // code for displaying language and proficiency
                                            const firstRemoveButton = document.createElement('button'); // Add remove button
                                            firstRemoveButton.textContent = 'Remove';
                                            firstRemoveButton.id = 'firstRemoveButton';
                                            firstRemoveButton.style.width = '95%';
                                            firstRemoveButton.style.border = '1px solid #E8E8E8';
                                            firstRemoveButton.style.height = '20px';

                                            firstRemoveButton.onclick = function() {
                                                removeDropdownGroup(this);
                                            };

                                            let dropdown1List = languageList;
                                            let dropdown2List = proficiencyList;

                                            function captureValue(dropdownIndex) {
                                                const dropdownGroup = document.getElementsByClassName('dropdownGroup')[dropdownIndex];
                                                const dropdown1 = dropdownGroup.getElementsByClassName('myDropdown1')[0];
                                                const dropdown2 = dropdownGroup.getElementsByClassName('myDropdown2')[0];
                                                const selectedValue1 = dropdown1.value;
                                                const selectedValue2 = dropdown2.value;
                                                const dropdownGroupName = 'Group ' + (dropdownIndex + 1);
                                                selectedValues[dropdownGroupName] = {
                                                    value1: selectedValue1,
                                                    value2: selectedValue2
                                                };
                                            }
                                            
                                            function populateDropdowns(dropdownGroup) {
                                                let dropdown1, dropdown2;

                                                // if we have the the select element then we can directly use it to populate data
                                                if (dropdownGroup.getElementsByClassName('myDropdown1')[0] && dropdownGroup.getElementsByClassName('myDropdown2')[0]){
                                                    dropdown1 = dropdownGroup.getElementsByClassName('myDropdown1')[0];
                                                    dropdown2 = dropdownGroup.getElementsByClassName('myDropdown2')[0];
                                                    // Clear existing options
                                                    dropdown1.innerHTML = '';
                                                    dropdown2.innerHTML = '';
                                                }
                                                // we need to create the element first before populating the data
                                                else {
                                                    dropdown1 = document.createElement('select');
                                                    dropdown2 = document.createElement('select');

                                                    dropdown1.setAttribute('class', 'myDropdown1 rcrm-native-select');
                                                    dropdown1.setAttribute('style', 'margin-top: 5px;margin-bottom: 5px; width: 95%; border: 1px solid #E8E8E8; border-radius: 5px;');
                                                    dropdown2.setAttribute('class', 'myDropdown2 rcrm-native-select');
                                                    dropdown2.setAttribute('style', 'width:95%; border: 1px solid #E8E8E8; border-radius: 5px;');

                                                    dropdownGroup.appendChild(dropdown1);
                                                    dropdownGroup.appendChild(dropdown2);
                                                    dropdownGroup.appendChild(firstRemoveButton);
                                                }

                                                // Populate options with values from respective lists
                                                dropdown1List.forEach(value => {
                                                    const option = document.createElement('option');
                                                    option.value = value;
                                                    option.textContent = value;
                                                    dropdown1.appendChild(option);
                                                });
                                                dropdown2List.forEach(value => {
                                                    const option = document.createElement('option');
                                                    option.value = value;
                                                    option.textContent = value;
                                                    dropdown2.appendChild(option);
                                                });
                                                // Add change event listeners to capture selected values
                                                dropdown1.addEventListener('change', function() {
                                                    captureValue(Array.from(dropdownGroup.parentElement.children).indexOf(dropdownGroup));
                                                });
                                                dropdown2.addEventListener('change', function() {
                                                    captureValue(Array.from(dropdownGroup.parentElement.children).indexOf(dropdownGroup));
                                                });
                                                // Capture initial values
                                                captureValue(Array.from(dropdownGroup.parentElement.children).indexOf(dropdownGroup));
                                            }
                                            
                                            function addDropdownGroup() {
                                                const dropdownContainer = document.getElementById('dropdownContainer');
                                                const newDropdownGroup = document.createElement('div');
                                                newDropdownGroup.className = 'dropdownGroup';
                                            
                                                const dropdown1 = document.createElement('select');
                                                dropdown1.className = 'myDropdown1';
                                                // dropdown1.setAttribute('class', 'rcrm-native-select');
                                                dropdown1.setAttribute('style', 'margin-top: 5px;margin-bottom: 5px; width: 95%;height: 31px !important; border:1px solid #E8E8E8; ');
                                                newDropdownGroup.appendChild(dropdown1);
                                            
                                                const dropdown2 = document.createElement('select');
                                                dropdown2.className = 'myDropdown2';
                                                // dropdown2.setAttribute('class', 'rcrm-native-select');
                                                dropdown2.setAttribute('style', 'width: 95%;height: 31px !important; border:1px solid #E8E8E8;');
                                                newDropdownGroup.appendChild(dropdown2);
                                            
                                                const removeButton = document.createElement('button'); // Add remove button
                                                removeButton.textContent = 'Remove';
                                                removeButton.style.width = '95%';
                                                removeButton.style.height = '20px';
                                                removeButton.style.border = '1px solid #E8E8E8';
                                                removeButton.id = 'firstRemoveButton';

                                                removeButton.onclick = function() {
                                                    removeDropdownGroup(this);
                                                };
                                                newDropdownGroup.appendChild(removeButton); // Append remove button to dropdown group

                                                dropdownContainer.appendChild(newDropdownGroup);
                                                populateDropdowns(newDropdownGroup);
                                            }
                                            
                                            function removeDropdownGroup(button) {
                                                const dropdownGroup = button.parentElement;
                                                const dropdownContainer = dropdownGroup.parentElement;
                                                let index = Array.from(dropdownContainer.children).indexOf(dropdownGroup);
                                                index = index + 1;
                                                dropdownContainer.removeChild(dropdownGroup);
                                                

                                                // Remove captured values for the removed dropdown group
                                                const dropdownGroupName = 'Group ' + index;
                                                delete selectedValues[dropdownGroupName]; // Update to use "data" object instead of "selectedValues"

                                                const remainingDropdownGroups = Array.from(dropdownContainer.children); 
                                                for (var i = index+1; i <= remainingDropdownGroups.length + 1; i++){
                                                    if (selectedValues.hasOwnProperty('Group '+i)){
                                                        selectedValues['Group '+ (i-1)] = selectedValues['Group '+i];
                                                        delete selectedValues['Group '+i];
                                                    }
                                                }
                                            }

                                            for (let i = 0; i < listOfLanguageData.length; i++){
                                                let currentLanguageData = listOfLanguageData[i];
                                                const parts = currentLanguageData.split("(");

                                                const languagePart = parts[0] ? parts[0]?.trim() : ''; // "Afar"
                                                const proficiencyPart = parts[1] ? parts[1]?.replace(")", "")?.trim(): '';
                                                const pairOfLanguageProficiency = {'value1': languagePart, 'value2': proficiencyPart};
                                                initialLanguageData.push(pairOfLanguageProficiency);
                                            }

                                            // Loop through the initial data and set the selected values for each dropdown group
                                            initialLanguageData.forEach((data, index) => {
                                                captureValue(index); // Capture the selected values for the dropdown group
                                                const dropdownGroup = document.getElementsByClassName('dropdownGroup')[index];
                                                const dropdown1 = dropdownGroup.getElementsByClassName('myDropdown1')[0];
                                                const dropdown2 = dropdownGroup.getElementsByClassName('myDropdown2')[0];
                                                dropdown1.value = data.value1; // Set the selected value for the first dropdown
                                                dropdown2.value = data.value2; // Set the selected value for the second dropdown
                                                selectedValues['Group ' + (index + 1)] = {
                                                    value1: data.value1,
                                                    value2: data.value2
                                                };
                                                if (index != initialLanguageData.length - 1){
                                                    addDropdownGroup();
                                                }
                                            });
  
                                        }
                                        else {
                                            if (document.getElementById('firstRemoveButton')){
                                                document.getElementById('firstRemoveButton').click();
                                            }
                                        }
                                    }
                                    else if (col == 'summary'){
                                        if(existingCandidate[col] != null) {
                                            fieldsVisibleOnExtension[col] = existingCandidate[col];
                                        }
                                    }
                                    else if (col == 'genderid'){
                                        if (existingCandidate[col] != null){
                                            const genderFieldOptions = {
                                                0: 'Not Available',
                                                1: 'Male',
                                                2: 'Female',
                                                3: 'Non Binary',
                                                4: 'Prefer Not To Say'
                                            }
                                            const selectedGenderOption  = genderFieldOptions[existingCandidate[col]];

                                            if(flagForSearchableDropdown){
                                                const labelComponenet = document.getElementById(col + 'button');
                                                if (labelComponenet){
                                                    labelComponenet.textContent = selectedGenderOption;
                                                    labelComponenet.style.color = 'black';
                                                }
                                                fieldsVisibleOnExtension[col] = existingCandidate[col];
                                            }
                                            else {
                                                const entireSetOfOptions = document.getElementById(col).options;
                                                for (var options in entireSetOfOptions){
                                                    if (entireSetOfOptions[options].textContent && entireSetOfOptions[options].textContent ==  selectedGenderOption){
                                                        entireSetOfOptions[options].setAttribute('selected', 'selected');
                                                        fieldsVisibleOnExtension[col] = [entireSetOfOptions[options].label];
                                                        document.getElementById(col).style.color = 'black';
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if( col == 'currencyid' || col == 'salarytype'){
                                        if (existingCandidate[col] != null ){
                                            let label = ''; 

                                            if(flagForSearchableDropdown){
                                                // get the label of the selected option
                                                if (col == 'currencyid'){
                                                    for (let currency of currencyTypes){
                                                        if (currency.id == existingCandidate[col]){
                                                            label = currency.country;
                                                        }
                                                    }
                                                }

                                                if (col == 'salarytype'){
                                                    for(let object of candidateColumnInfo[col]['data']){
                                                        if (object.id == existingCandidate[col]){
                                                            label = object.label;
                                                        }
                                                    }
                                                }

                                                const labelComponenet = document.getElementById(col + 'button');
                                                if (labelComponenet) {
                                                    labelComponenet.textContent = label;
                                                    labelComponenet.style.color = 'black';
                                                }
                                                fieldsVisibleOnExtension[col] = existingCandidate[col];

                                                if (col == 'currencyid'){
                                                    document.getElementById('currencyidOptionsOuterContainer').display = 'block';
                                                    document.getElementById('currencyidOptionsOuterContainer').display = 'none';
                                                }
                                            }
                                            else {
                                                const entireSetOfOptions = document.getElementById(col).options;
                                                for (var options in entireSetOfOptions){
                                                    if (entireSetOfOptions[options].id && existingCandidate[col] && entireSetOfOptions[options].id ==  existingCandidate[col]){
                                                        entireSetOfOptions[options].setAttribute('selected', 'selected');
                                                        fieldsVisibleOnExtension[col] = [entireSetOfOptions[options].label];
                                                        document.getElementById(col).style.color = 'black';
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (col == 'workexpyr' || col == 'relevantexperience' ){
                                        if (existingCandidate[col] != null ){
                                            if (flagForSearchableDropdown){
                                                let label = ''; 
                                                if (existingCandidate[col] == 0){
                                                    label = '0 Year';
                                                }
                                                else {
                                                    for(let object of candidateColumnInfo[col]['data']){
                                                        if (object.id == existingCandidate[col]){
                                                            label = object.label;
                                                        }
                                                    }
                                                }
                                                const labelComponenet = document.getElementById(col + 'button');
                                                if (labelComponenet) {
                                                    labelComponenet.textContent = label;
                                                    labelComponenet.style.color = 'black';
                                                }
                                                fieldsVisibleOnExtension[col] = existingCandidate[col];
                                            }
                                            else {
                                                const entireSetOfOptions = document.getElementById(col).options;
                                                for (var options in entireSetOfOptions){
                                                    if (entireSetOfOptions[options].id && existingCandidate[col] && entireSetOfOptions[options].id ==  existingCandidate[col]){
                                                        entireSetOfOptions[options].setAttribute('selected', 'selected');
                                                        fieldsVisibleOnExtension[col] = [entireSetOfOptions[options].label];
                                                        document.getElementById(col).style.color = 'black';
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    else if(typeOfCandidateField == 'text' || typeOfCandidateField == 'social_profile' || typeOfCandidateField == 'longtext' || typeOfCandidateField == 'email'){
                                        if(existingCandidate[col] != null){
                                            if(document.getElementById(col)){
                                                document.getElementById(col).value = existingCandidate[col];
                                            }
                                            fieldsVisibleOnExtension[col] = existingCandidate[col];
                                        }
                                    }
                                    else if (typeOfCandidateField == 'dropdown'){
                                        if(existingCandidate[col] != null) {  
                                            if(flagForSearchableDropdown){
                                                const labelComponenet = document.getElementById(col + 'button');
                                                if (labelComponenet) {
                                                    labelComponenet.textContent = existingCandidate[col];
                                                    labelComponenet.style.color = 'black';
                                                }
                                                fieldsVisibleOnExtension[col] = existingCandidate[col];   
                                            }
                                            else {
                                                document.getElementById(col).value = existingCandidate[col];
                                                fieldsVisibleOnExtension[col] = existingCandidate[col];
                                            }
                                        }
                                    }
                                    else if(typeOfCandidateField == 'multiselect'){
                                        if(existingCandidate[col] != null && existingCandidate[col] != ''){
                                            const selectedOptions = {};
                                            fieldsVisibleOnExtension[col] = [];
                                            const usedIdsForRemoveButton = [];


                                            let searchInput = null;
                                            if (flagForSearchableDropdown){
                                                // input component for search
                                                searchInput = document.createElement('input');
                                                searchInput.setAttribute('type', 'text');
                                                searchInput.setAttribute('id', col + 'search');
                                                searchInput.setAttribute('placeholder', 'Please Search & Select');
                                                searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
                                                searchInput.setAttribute('class', 'rcrm-ctrl');
                                            }

                                            function findLiIdByData(ulId, targetData) {
                                                const ulElement = document.getElementById(ulId);
                                                if (ulElement) {
                                                    const liElements = ulElement.getElementsByTagName("li");
                                                    for (const liElement of liElements) {
                                                        if (liElement.textContent === targetData && usedIdsForRemoveButton.indexOf(liElement.id) == -1) {
                                                            usedIdsForRemoveButton.push(liElement.id);
                                                            const associatedCheckbox = document.getElementById(liElement.id.replace(col, col+'checkbox'));
                                                            if (associatedCheckbox){
                                                                associatedCheckbox.checked = true;
                                                            }
                                                            return liElement.id;
                                                        }
                                                    }
                                                }
                                                return null; // Return null if no matching li element is found
                                            }

                                            function removeSelectedOption(option, listItem, selectedOptionId) {
                                                // Remove from the tracking array
                                                delete defaultSelectedOptions[col][selectedOptionId];
    
                                                fieldsVisibleOnExtension[col] = [];
                                                for (let key in defaultSelectedOptions[col]){
                                                    fieldsVisibleOnExtension[col].push(defaultSelectedOptions[col][key]);
                                                }
                                            
                                                // Remove the list item from the selected list
                                                listItem.remove();
    
                                                if (fieldsVisibleOnExtension[col].length == 0){
                                                    document.getElementById(col + 'SelectedOptionContainer').style.display = 'none';
                                                    fieldsVisibleOnExtension[col] = null;
                                                }

                                                // mark the checkbox as unchecked 
                                                const correspondingCheckbox = document.getElementById(selectedOptionId.replace(col, col+'checkbox'));
                                                if (correspondingCheckbox){
                                                    correspondingCheckbox.checked = false;
                                                }
                                            }

                                            const values = existingCandidate[col].split(',');
                                            document.getElementById(col + 'SelectedOptionContainer').style.display = 'inline-block';
                                            const unorderedListForSelectedValue = document.getElementById(col+'SelectedOptions');
                                            let count = 0;
                                            for(let val in values){
                                                let idOfListTag = findLiIdByData(col+'options', values[val]);

                                                const selectedListItem = document.createElement('li');
                                                selectedListItem.textContent = values[val];
                                                // todo: we may need to change this ID
                                                const selectedOptionId = idOfListTag;
                                                selectedOptions[selectedOptionId] = values[val];

                                                // Attach CSS properties dynamically
                                                selectedListItem.style.cursor = 'pointer';
                                                selectedListItem.style.marginBottom = '2px';
                                                // selectedListItem.style.border = '1px solid #F8FAFB';
                                                // selectedListItem.style.backgroundColor = '#E8E8E8';
                                                selectedListItem.style.color = 'black';
                                                selectedListItem.style.paddingLeft = '5px';
                                                selectedListItem.setAttribute('id', selectedOptionId + 'Selected');

                                                // Add hover styling
                                                selectedListItem.addEventListener('mouseenter', function() {
                                                    selectedListItem.style.backgroundColor = '#D3E2E2';
                                                    selectedListItem.style.transform = 'scale(0.97)';
                                                    // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                                                });
                                                
                                                selectedListItem.addEventListener('mouseleave', function() {
                                                    selectedListItem.style.backgroundColor = 'white';
                                                    selectedListItem.style.transform = 'scale(1)';
                                                    // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                                                });

                                                
                                                unorderedListForSelectedValue.style.height = '60px';
                                                unorderedListForSelectedValue.appendChild(selectedListItem);

                                                // Create remove option cross mark
                                                const removeOption = document.createElement('span');
                                                removeOption.textContent = 'X';
                                                removeOption.style.float = 'right';
                                                removeOption.style.marginRight = '5px';
                                                removeOption.style.color = 'black';
                                                removeOption.style.marginTop = '3px';
                                                removeOption.style.fontSize = '10px';
                                                removeOption.id = selectedOptionId + 'removeOption';

                                                removeOption.classList.add('remove-option');

                                                removeOption.addEventListener('click', function () {
                                                    removeSelectedOption(val, selectedListItem, selectedOptionId);
                                                    if(flagForNestedCustomFields && col.substring(0,10) == 'custcolumn'){
                                                        let multiSelectSelectedValue = getFieldsVisibleOnExtensionForEntity(col, candidateEntityTypeId);
                                                        parentOptionSelected(candidateColumns[col], col, multiSelectSelectedValue, candidateEntityTypeId);
                                                    }
                                                });

                                                // Create remove option circle
                                                const removeOptionCircle = document.createElement('span');
                                                removeOptionCircle.classList.add('remove-option-circle');

                                                // Append the removeOptionCircle to the removeOption
                                                removeOption.appendChild(removeOptionCircle);

                                                // Add hover styling to the removeOption element
                                                removeOption.addEventListener('mouseenter', function() {
                                                    selectedListItem.style.backgroundColor = '#f3dbdb';
                                                    removeOptionCircle.style.display = 'inline-block';
                                                });
                                                
                                                removeOption.addEventListener('mouseleave', function() {
                                                    selectedListItem.style.backgroundColor = '#E8E8E8';
                                                    removeOptionCircle.style.display = 'none';
                                                });

                                                selectedListItem.appendChild(removeOption);
                                                
                                                defaultSelectedOptions[col][idOfListTag] = values[val];
                                                fieldsVisibleOnExtension[col].push(values[val]);
                                            }
                                        }
                                    }
                                    else if(typeOfCandidateField == 'checkbox' || col == 'willingtorelocate'){
                                        if(existingCandidate[col] == '1'){
                                            if(document.getElementById(col)){
                                                document.getElementById(col).checked = true;
                                            }
                                            fieldsVisibleOnExtension[col] = existingCandidate[col];
                                        }
                                    }
                                    else if(typeOfCandidateField == 'number' || typeOfCandidateField == 'decimal'){
                                        if(existingCandidate[col] != null) {
                                            if (document.getElementById(col)) {
                                                document.getElementById(col).value = existingCandidate[col];
                                            }
                                            fieldsVisibleOnExtension[col] = isNaN(existingCandidate[col]) ? existingCandidate[col] : parseFloat(existingCandidate[col]);
                                        }
                                    }
                                    else if(typeOfCandidateField == 'phonenumber'){
                                        if(existingCandidate[col] != null) {
                                            if(document.getElementById(col)){
                                                document.getElementById(col).value = existingCandidate[col];
                                            }
                                            fieldsVisibleOnExtension[col] = existingCandidate[col];
                                        }
                                    }
                                    else if(typeOfCandidateField == 'date'){
                                        if(existingCandidate[col] != null && existingCandidate[col] != "" ){

                                            if(typeof existingCandidate[col] === 'string' && existingCandidate[col]?.includes('-')){
                                                let dateElementCandidate = document.getElementById(col);
                                                if (dateElementCandidate){
                                                    dateElementCandidate.value = existingCandidate[col];
                                                }
                                                fieldsVisibleOnExtension[col] = existingCandidate[col];
                                            }
                                            else {
                                                var date = new Date(existingCandidate[col]*1000);
                                                var month  = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1)));
                                                var dat = ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) ;
                                                var year = date.getFullYear();
                                                if(document.getElementById(col)){
                                                    document.getElementById(col).value = ''+year+'-'+month+'-'+dat;
                                                }
                                                fieldsVisibleOnExtension[col] = existingCandidate[col];
                                            }
                                        }
                                    }
                                    else if(typeOfCandidateField == 'date_time'){
                                        if(existingCandidate[col] != null && document.getElementById(col)){
                                            document.getElementById(col).value = getDateTimeValue(existingCandidate[col]);
                                            fieldsVisibleOnExtension[col] = existingCandidate[col];
                                        }
                                    }
                                    else if(typeOfCandidateField == 'file'){
                                        if(existingCandidate[col] != null && existingCandidate[col] != ''){
                                            let val = existingCandidate[col].split(',');
                                            let nameOfFile = val[1] ? val[1] : '';
                    
                                            if (nameOfFile?.length < 28 && document.getElementById(col + 'span')){
                                                document.getElementById(col + 'span').textContent = nameOfFile;
                                            }
                                            else {
                                                nameOfFile = nameOfFile.split('.');
                                                let firstHalfName = nameOfFile[0]?.slice(0, 25);
                                                let completeName = firstHalfName + '.. .' + nameOfFile[nameOfFile.length - 1];
                                                // span.textContent = completeName;
                                                if(document.getElementById(col + 'span')){
                                                    document.getElementById(col + 'span').textContent = completeName;
                                                }
                                            }
                                            
                                            fieldsVisibleOnExtension[col] = existingCandidate[col];
                                        }
                                    }
                                }
                            }
                        }
                        // setFrameLoadedState();
                    } else {
                        $('#candidate .exists-message-container .not-exists').toggleClass('d-block', true).toggleClass('d-none', false);
                        $('#contact .exists-message-container .not-exists').toggleClass('d-block', true).toggleClass('d-none', false);
                        $('#company .exists-message-container .not-exists').toggleClass('d-block', true).toggleClass('d-none', false);
                    }
                }, 1250);
                break;
            case "getHiringStagesFinished":
                var response = JSON.parse(message.data.response);
                if (response.status == 'success' && response.data.hiringPipelineStages.length) {
                    hiringStages = response.data.hiringPipelineStages
                }
                break;
            case "getCustomPipelineHiringStagesFinished":
                var response = JSON.parse(message.data.response);
                if (response.hiring_stages.length) {
                    $("#update_hiring_stage_tooltip #candidatestatusid")
                        .empty()
                    hiringStages = response.hiring_stages;
                    // jobid
                    var selectedAssignedJob = assignedJobs.filter((asJob) => asJob.jobid == selectedJobId)[0]
                    selectedAssignmentId = selectedAssignedJob.id
                    hiringStages.forEach(stage => {
                        var seleceted = (stage.id == selectedAssignedJob.candidatestatusid) ? "selected" : "";
                        var optHrml = '<option value="' + stage.id + '" ' + seleceted + '>' + HtmlEncode(stage.label) + '</option>'
                        $("#update_hiring_stage_tooltip #candidatestatusid").append(optHrml)
                    });
                }
                break;
            case "getHiringStagesEmailTriggerFinished":
                var response = JSON.parse(message.data.response);
                if (response.status == 'success' && response.data.length) {
                    hiringStageTriggers = response.data;
                }
                break;
            case "getAssignedJobsFinished":
                var response = JSON.parse(message.data.response);
                var presetEntity = {};
                presetEntity.candidate = window['candidate'];
                var options = $('#assign_to_job_followup option');
                if (options.length) {
                    options.removeAttr('disabled');
                }
                $('.assign_to_job_followup_presigned').toggleClass('d-none', true).toggleClass('d-block', false);
                $('.assign_to_job_followup_preigned_empty').toggleClass('d-none', true).toggleClass('d-block', false);
                if (response.status == 'success' && response.data.jobs.length) {
                    var jobsLi = ''
                    assignedJobs = response.data.jobs
                    var jobidArr = [];
                    assignedJobs.forEach(assignedJob => {
                        if (jobs.length) {
                            jobs.forEach(job => {
                                
                                if (job.id == assignedJob.jobid) {
                                    jobidArr.push(job.id);
                                    $('#assign_to_job_followup option[value="' + job.id + '"]').attr('disabled', 'disabled');
                                    var logoHtml = '<p class="image avatar-35 bg-company color-company m-r-5"><i class="mdi mdi-domain material-icons"></i> </p>';
                                    var companyHtml = '<span><i class ="mdi mdi-domain material-icons m-r-5"></i>Not avaialble</span>'
                                    var cityHtml = '<span><i class="mdi mdi-map-marker material-icons m-r-5"></i>Not available</span>'

                                    var jobName = ((job.jobname && job.jobname.length > 14) ?? (job.title && job.title.length > 14)) ? HtmlEncode(job.jobname ?? job.title).substring(0, 15) + '..' : HtmlEncode(job.jobname ?? job.title);
                                    var stageName = (!assignedJob.candidatestatus) ? 'Not Available' : (assignedJob.candidatestatus && assignedJob.candidatestatus.length > 14) ? HtmlEncode(assignedJob.candidatestatus).substring(0, 15) + '..' : HtmlEncode(assignedJob.candidatestatus);

                                    var src = assignedJob.companylogo ? assignedJob.companylogo : "";
                                    if (assignedJob.companylogo) {
                                        src = assignedJob.companylogo.split(',')[0];
                                        if (assignedJob.companylogo.search('clearbit') > 0) {
                                            src = assignedJob.companylogo;
                                        }
                                    }
                                    if (src != "") {
                                        logoHtml = '<p class="image avatar-35 bg-company color-company m-r-10"><image class="avatar-35 bg-company" style="width:100%" src="' + src + '"></image> </p>';
                                    }
                                    if (assignedJob.companyslug && assignedJob.companyslug != "") {
                                        var companyName = (assignedJob.companyname && assignedJob.companyname.length >= 14) ? HtmlEncode(assignedJob.companyname).substring(0, 15) + '..' : HtmlEncode(assignedJob.companyname);
                                        companyHtml = '<i class ="mdi mdi-domain material-icons"></i>' +
                                            '<a class="m-l-5" href="' + BASE_APP_URL + '/company/' + assignedJob.companyslug + '" target="_blank" title = "' + HtmlEncode(assignedJob.companyname) + '">' +
                                            companyName +
                                            '</a>';
                                    }
                                    if (job.city && job.city != "") {
                                        var cityName = (job.city && job.city.length >= 12) ? HtmlEncode(job.city).substring(0, 12) + '..' : HtmlEncode(job.city);
                                        cityHtml = '<span title="' + HtmlEncode(job.city) + '"><i class="mdi mdi-map-marker material-icons m-r-5"></i>' + HtmlEncode(cityName) + '</span>'
                                    }
                                    jobsLi += '<li>' +
                                        '<div class="d-flex align-items-center">' +
                                        '<div>' +
                                        logoHtml +
                                        '</div>' +
                                        '<div class="d-flex flex-direction-col">' +
                                        '<div class="m-b-2 d-flex align-items-center">' +
                                        '<a href="' + BASE_APP_URL + '/job/' + job.slug + '" target="_blank" title="' + HtmlEncode(job.jobname ?? job.title) + '" class="m-r-2">' +
                                        jobName +
                                        '</a>' +
                                        cityHtml +
                                        '<div id="remarks" class="rounded-circle-avatar m-r-5 tooltip m-l-5" title=\"' + ((assignedJob.remark != null && assignedJob.remark != '') ? HtmlEncode(assignedJob.remark) : 'No Remark') + '\">' +
                                        '<span class="rounded-circle-avatar-title">' +
                                        '<i class="mdi mdi-message-text"></i>' +
                                        '</span>' +
                                        '</div>' +
                                        '</div>' +
                                        '<div class="m-t-2 d-flex align-items-center">' +
                                        companyHtml +
                                        '<p title="' + HtmlEncode(assignedJob.candidatestatus ?? 'Not Available') + '">' +
                                        '<a class="rcrm-tag hiring-tooltip-popup m-l-5" title="' + HtmlEncode(assignedJob.candidatestatus ?? "Not Available") + '" id="h_p_' + job.id + '" data-tooltip-content="#update_hiring_stage_tooltip" data-jobid="' + job.id + '" >' +
                                        stageName +
                                        '</a>' +
                                        '</p>' +
                                        '</div>' +
                                        '<div>' +
                                        '</div>' +
                                        '</li>';

                                }
                            });
                        }
                    });
                    const jobsAssignIdsKey = "jobs_assign_ids"+candidate?.id;
                    localStorage.setItem(jobsAssignIdsKey, jobidArr);
                    $('.assign_to_job_followup_presigned').toggleClass('d-none', false).toggleClass('d-block', true);
                    $('.presigned-jobs-list').html(jobsLi);
                    // Since the tooltipster removes all the html in template, the actual html is maintained in a shadow element
                    // Copy that to template before initiializing
                    $('#h_s_tooltip_template').html($('#h_s_tooltip_template_shadow').html());
                    $('#h_s_tooltip_template [data-role="shadow"]').each((i, e) => {
                        e.id = $(e).attr('data-id')
                    });

                    $('#assign_to_job_followup a.close-modal').click(function () {
                        $('#update_hiring_stage_tooltip .h-p-close').click();
                    });

                    $('.hiring-tooltip-popup tooltipstered').tooltipster('destroy');
                    setTimeout(() => {
                        $('.hiring-tooltip-popup').tooltipster({
                            theme: 'tooltipster-shadow',
                            animation: 'fade',
                            interactive: true,
                            trigger: 'click',
                            autoClose: 'false',
                            trigger: 'custom',
                            // new function here
                            functionReady: function () {
                                $("textarea#remark").on('input', function () {
                                    $('span#remarksLendth').html($('textarea#remark')[1].value.length);
                                });

                                // register all events here after the tooltip popup is ready
                                fnsetUpFollowupControls("#update_hiring_stage_tooltip", {}, true);
                                $('.h-p-close').click(function () {
                                    $('.hiring-tooltip-popup').tooltipster('hide');
                                });
                                $("#update_hiring_stage_tooltip #candidatestatusid")
                                    .empty()
                                var selectedAssignedJob = assignedJobs.filter((asJob) => asJob.jobid == selectedJobId)[0]
                                selectedAssignmentId = selectedAssignedJob.id
                                hiringStages.forEach(stage => {
                                    var seleceted = (stage.id == selectedAssignedJob.candidatestatusid) ? "selected" : "";
                                    if (stage.id == selectedAssignedJob.candidatestatusid) {
                                        setEmailTriggerInputWhileChangeInHiringStage(stage.id);
                                    }
                                    var optHrml = '<option value="' + stage.id + '" ' + seleceted + '>' + HtmlEncode(stage.label) + '</option>'
                                    $("#update_hiring_stage_tooltip #candidatestatusid").append(optHrml)
                                });

                                $("#update_hiring_stage_tooltip #candidatestatusid").on("change", function (e) {
                                    setEmailTriggerInputWhileChangeInHiringStage($('#update_hiring_stage_tooltip #candidatestatusid')[0].value);
                                });

                                $('#update_hiring_stage_tooltip #update_hiring_stage_from').on('submit', function (e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    setIsProcessing('#update_hiring_stage_from button[type=submit]');
                                    var formData = $("#update_hiring_stage_from").serializeArray();
                                    updatedStage = {};
                                    Object.keys(formData).forEach(key => {
                                        updatedStage[formData[key].name] = formData[key].value;
                                    });
                                    updatedStage.id = selectedAssignmentId
                                    updatedStage.stagedate = parseInt(new Date(updatedStage.stagedate).getTime() / 1000)
                                    sendMessageToParent({
                                        "message": "updateHiringStage",
                                        "payload": updatedStage
                                    });
                                });
                            }
                        });
                        $('.hiring-tooltip-popup').on('click', (function () {
                            selectedJobId = $(this).data('jobid')
                            $('.hiring-tooltip-popup').tooltipster('hide');//Close all hiring stage popups
                            $("#h_p_" + selectedJobId).tooltipster('show');
                            if (user.is_multiple_hiring_pipeline == 1) {
                                sendMessageToParent({
                                    "message": "getCustomPipelineHiringStagesByJob",
                                    "payload": { 'job_id': selectedJobId }
                                });
                            }

                        }))
                    }, 0);
                } else {
                    $('.assign_to_job_followup_preigned_empty').toggleClass('d-none', false).toggleClass('d-block', true);
                }
                fnsetUpFollowupControls('#assign_to_job_followup', presetEntity, true);
                setEventListners()
                break;
            case "getHotlistsBeforeGetAssignedHotlistsFinished":
                sendMessageToParent({ 'message': 'geAssignedtHotlists', "entity": message.data.entity, 'data': { 'relatedtoid': window[message.data.entity]['id'], 'pagename': message.data.entity == 'company' ? 'companies' : message.data.entity + 's' } });
                break;
            case "geAssignedtHotlistsFinished":
                response = JSON.parse(message.data.response);
                if (response.status == "success") {
                    var presetEntity = {};
                    presetEntity.candidate = window['candidate'];
                    var options = $('#add_to_hot_list_followup option');
                    if (options.length) {
                        options.removeAttr('disabled');
                    }
                    $('.add_to_hot_list_followup_presigned').toggleClass('d-none', true).toggleClass('d-block', false);
                    $('.add_to_hot_list_followup_preigned_empty').toggleClass('d-none', true).toggleClass('d-block', false);
                    if (response.status == 'success' && response.data.hotlists.length) {
                        var hotlistsLi = ''
                        response.data.hotlists.forEach(assignedHL => {
                            if (hotlists[message.data.entity].length) {
                                hotlists[message.data.entity].forEach(hotlist => {
                                    if (hotlist.id == assignedHL.id) {
                                        $('#add_to_hot_list_followup option[value="' + hotlist.id + '"]').attr('disabled', 'disabled');
                                    }
                                });
                            }

                            hotlistsLi += '<li>' + assignedHL.name + '</li>';
                        });
                        $('.add_to_hot_list_followup_head').css('display', 'block');
                        $('.add_to_hot_list_followup_presigned').toggleClass('d-none', false).toggleClass('d-block', true);
                        $('.presigned-hotlists-list').html(hotlistsLi);
                    } else {
                        $('.add_to_hot_list_followup_head').css('display', 'none');
                        $('.add_to_hot_list_followup_preigned_empty').toggleClass('d-none', false).toggleClass('d-block', true);
                    }
                    fnsetUpFollowupControls('#add_to_hot_list_followup', presetEntity, true);
                }

                break;
            case "updateHiringStageCheckForEmailTrigger":
                if ($('#update_hiring_stage_tooltip #trigger_hiring_update_email')) {
                    if ($('#update_hiring_stage_tooltip #trigger_hiring_update_email').is(":checked")) {
                        sendEmailTrigger(
                            'updateHiringStageEmailTrigger',
                            1,
                            $('#update_hiring_stage_tooltip #candidatestatusid')[0].value,
                            {
                                candidateslug: window['candidate']['slug'],
                                emailid: window['candidate']['emailid'],
                                ...assignedJobs.find((job) => job.jobid == selectedJobId)
                            },
                            5,
                            null,
                            message.data.response,
                            null,
                            'single'
                        );
                    } else {
                        this.window.postMessage({ "message": "updateHiringStageFinished", 'isDataObj': true, "response": message.data.response });
                    }
                } else {
                    this.window.postMessage({ "message": "updateHiringStageFinished", 'isDataObj': true, "response": message.data.response });
                }
                break;
            case "updateHiringStageFinished":
                response = JSON.parse(message.data.response);
                if (response.status == "success") {
                    toastr.success(response.message);
                    sendMessageToParent({ 'message': 'getAssignedJobs', 'data': { 'id': candidate.id } });
                    //Add mixpannel eventtrack for Update Hiring Stage
                    if (document.domain === 'www.linkedin.com') {
                        Domains[document.domain]?.checkURL();
                    }
                    var dataObject = {
                        [actionSource]: chromeExtension,
                        [platformName]: Domains[document.domain]?.name || manuallyAdded,
                        [remarkLength]: response.data.updatedAssignedCandidate.remark.length === 0 ? 'No' : response.data.updatedAssignedCandidate.remark.length,
                        [emailTriggerCheck]: $('#update_hiring_stage_tooltip #trigger_hiring_update_email') && ($('#update_hiring_stage_tooltip #trigger_hiring_update_email').is(":checked")) ? 'Yes' : 'No'
                    }
                    sendMessageToParent({ "message": "mixpanelEventHandler", "event": 'Update Hiring Stage', "payload": dataObject });
                }
                break;
            case "linkingFinished":
                entityTypeId = null;
                candidateSlug = null;
                contactSlug = null;
                break;
            case "updateJobData":
                jobs = message.data.response;
                break;
            case "addGMeetFinished":
                stopProcessing('#add_g_meet');
                break;
            case "getUserWithTeamsFinished":
                BASE_IMAGES_URL = message.data.baseImageUrl;
                userWithTeamData = JSON.parse(message.data.response);
                collaboratorDataUser = userWithTeamData.data.users;
                collaboratorDataTeam = userWithTeamData.data.teams;
                candidateNotesCollaborator();
                contactNotesCollaborator();
                companyNotesCollaborator();
                taskCollaborator();
                meetingCollaborator();
                break;
            case "addG-MeetFinished":
                stopProcessing('#choose_meet');
                break;
            case "add_team_meetFinished":
            case "add_zoom_meetFinished":
                var microsoftTeamLink = JSON.parse(message.data.response);
                if (microsoftTeamLink.message_type == "is-danger") {
                    toastr.error(microsoftTeamLink.message);
                } 
                stopProcessing('#choose_meet');
                break;
            case "getNestedCustomFieldsFinished":
                entityTypeId = message.data.entityTypeId;
                let data = JSON.parse(message.data.response);
                if (data.status == "success") {
                    nestedCustomFieldEntities[0][entityTypeId].nestedFields = data.data;
                }
                getDefaultOptionsForEntity(entityTypeId);
                break;
            case "getDefaultOptionsFinished":
                let optionsEntityTypeId = message.data.entityTypeId;
                let optionsData = JSON.parse(message.data.response);
                if (optionsData.status == "success") {
                    nestedCustomFieldEntities[0][optionsEntityTypeId].defaultOptions = optionsData.data;
                } 
                if(optionsEntityTypeId == candidateEntityTypeId){
                    get_user();
                }
                break;
        }
    });
    //-----------------------------------------------EventListnersSectionEnd----------------------------------------------//

    function toggleTabs(evt, tab, sub = false) {
        var contentClass = ".tabcontent"; var linkClass = ".tablinks"; var contentID = "#" + tab;
        if (sub) {
            contentClass = ".subtabcontent"; linkClass = ".subtablinks";
        }
        $(contentClass).each(function () { $(this).toggleClass('d-none', true).toggleClass('d-block', false); });
        $(linkClass).each(function () { $(this).toggleClass("active", false); })
        $(contentID).toggleClass('d-block', true).toggleClass('d-none', false);
        $(evt.currentTarget).toggleClass("active", true);
        if (!sub) {
            if ($(contentID).find(".subtablinks").length) {
                $(contentID).find(".subtablinks")[0].click();
            }
        }
    }


    function checkCompanyDynamicFieldsRequired() {
        // check for dynamic fields for contact
        if (companyColumns != undefined) {
            let requiredFieldsNotFilled = false;
            for (let companyFieldKey in companyColumns) {
                if (companyColumns[companyFieldKey]?.show_on_extension && companyColumns[companyFieldKey]?.required_on_form == true && !defaultExtensionFieldsForCompany.includes(companyFieldKey)) {
                    if (companyFieldKey == 'industry') {
                        console.log('industryid from if checkCompanyDynamicFieldsRequired', fieldsVisibleOnExtensionForCompany[companyFieldKey + 'id']);
                        if (fieldsVisibleOnExtensionForCompany[companyFieldKey + 'id'] == undefined 
                            || fieldsVisibleOnExtensionForCompany[companyFieldKey + 'id'] == null 
                            || fieldsVisibleOnExtensionForCompany[companyFieldKey + 'id'] == ''
                            || fieldsVisibleOnExtensionForCompany[companyFieldKey + 'id'] == 0) {
                            const errorElement = document.getElementById(`${companyFieldKey}CompanyLabelId`);
                            const errorMessage = document.getElementById(`${companyFieldKey}CompanyErrorMessage`);
                            requiredFieldsNotFilled = true;

                            if (errorElement) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                            }
                        }
                    }
                    else if (companyColumns[companyFieldKey]['type'] == 'checkbox') {
                        if (fieldsVisibleOnExtensionForCompany[companyFieldKey] == undefined 
                            || fieldsVisibleOnExtensionForCompany[companyFieldKey] == null 
                            || fieldsVisibleOnExtensionForCompany[companyFieldKey] == '' 
                            || fieldsVisibleOnExtensionForCompany[companyFieldKey] == 0
                            || fieldsVisibleOnExtensionForCompany[companyFieldKey] == '0') {

                            const errorElement = document.getElementById(`${companyFieldKey}CompanyLabelId`);
                            const errorMessage = document.getElementById(`${companyFieldKey}CompanyErrorMessage`);
                            if (errorElement && errorMessage) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                                requiredFieldsNotFilled = true;
                                console.log('required checkCompanyDynamicFieldsRequired', companyFieldKey);
                            }
                        }
                    }   

                    else if (companyColumns[companyFieldKey]['type'] == 'file') {
                        if (fileDataForCompany[companyFieldKey] == undefined
                            || fileDataForCompany[companyFieldKey] == null
                            || fileDataForCompany[companyFieldKey] == ''
                            || fileDataForCompany[companyFieldKey] == 0) {

                            const errorElement = document.getElementById(`${companyFieldKey}CompanyLabelId`);
                            const errorMessage = document.getElementById(`${companyFieldKey}CompanyErrorMessage`);
                            if (errorElement && errorMessage) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                                requiredFieldsNotFilled = true;
                                console.log('required checkCompanyDynamicFieldsRequired', companyFieldKey);
                            }
                        }
                    } 

                    else if (isEntityTypeField(companyColumns[companyFieldKey]['type'])){
                        let entity = getEntityByEntityTypeId(companyEntityTypeId);
                        let entityTypeOptionsContainerId = companyFieldKey + entity + 'ForEntityRecordOptions';
                        if(Object.keys(entityTypeFieldColumnValues[entityTypeOptionsContainerId]).length == 0){
                            const errorElement = document.getElementById(`${companyFieldKey}CompanyLabelId`);
                            const errorMessage = document.getElementById(`${companyFieldKey}CompanyErrorMessage`);
                            console.log('required checkCompanyDynamicFieldsRequired', companyFieldKey);
                            if (errorElement && errorMessage) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                                requiredFieldsNotFilled = true;
                            }
                        }
                    }
                    else if (companyFieldKey == 'contactid') {
                        if (flagForCompanyContacts && fieldsVisibleOnExtensionForCompany['existingContacts'] == '') {
                            const errorElement = document.getElementById('companyContactsSearch');
                            const errorMessage = document.getElementById('companyExistingContactsErrorMessage');
                            if (errorElement && errorMessage) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                                requiredFieldsNotFilled = true;
                                console.log('required checkCompanyDynamicFieldsRequired', companyFieldKey);
                            }
                        }
                    }
                    else if (fieldsVisibleOnExtensionForCompany[companyFieldKey] == undefined || fieldsVisibleOnExtensionForCompany[companyFieldKey] == null || fieldsVisibleOnExtensionForCompany[companyFieldKey] == '') {
                        const errorElement = document.getElementById(`${companyFieldKey}CompanyLabelId`);
                        const errorMessage = document.getElementById(`${companyFieldKey}CompanyErrorMessage`);
                        if (errorElement && errorMessage) {
                            errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            errorMessage.style.display = 'block';
                            requiredFieldsNotFilled = true;
                            console.log('required checkCompanyDynamicFieldsRequired', companyFieldKey);
                        }
                    }
                }
            }
            if (requiredFieldsNotFilled) {
                stopProcessing('#company_form button[type=submit]');
                return true;
            }
            return false;
        }
    }


    function checkCompanyContactDynamicFieldsRequired() {
        // check for dynamic fields for contact
        if (companyContactColumns != undefined) {
            let requiredFieldsNotFilled = false;
            for (let contactFieldKey in companyContactColumns) {
                if (companyContactColumns[contactFieldKey]?.show_on_extension && companyContactColumns[contactFieldKey]?.required_on_form == true && !defaultExtensionFieldsForContact.includes(contactFieldKey)) {
                    if (contactFieldKey == 'stageid') {
                        console.log('stageid', fieldsVisibleOnExtensionForCompanyContact[contactFieldKey]);
                        if (fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == undefined 
                            || fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == null 
                            || fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == ''
                            || fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == 0) {
                            const errorElement = document.getElementById(`${contactFieldKey}CompanyContactLabelId`);
                            const errorMessage = document.getElementById(`${contactFieldKey}CompanyContactErrorMessage`);
                            requiredFieldsNotFilled = true;

                            if (errorElement) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                            }
                        }
                    }
                    else if (companyContactColumns[contactFieldKey]['type'] == 'checkbox') {
                        if (fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == undefined 
                            || fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == null 
                            || fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == '' 
                            || fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == 0
                            || fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == '0') {

                            const errorElement = document.getElementById(`${contactFieldKey}CompanyContactLabelId`);
                            const errorMessage = document.getElementById(`${contactFieldKey}CompanyContactErrorMessage`);
                            errorMessage.style.display = 'block';
                            requiredFieldsNotFilled = true;
                            console.log('required', contactFieldKey);
                            if (errorElement) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                            }
                        }
                    }
                    else if (companyContactColumns[contactFieldKey]['type'] == 'file') {
                        if (fileDataForCompanyContact[contactFieldKey] == undefined
                            || fileDataForCompanyContact[contactFieldKey] == null
                            || fileDataForCompanyContact[contactFieldKey] == ''
                            || fileDataForCompanyContact[contactFieldKey] == 0) {
                            
                            const errorElement = document.getElementById(`${contactFieldKey}CompanyContactLabelId`);
                            const errorMessage = document.getElementById(`${contactFieldKey}CompanyContactErrorMessage`);
                            errorMessage.style.display = 'block';
                            requiredFieldsNotFilled = true;
                            console.log('required', contactFieldKey);
                            if (errorElement) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                            }
                        }
                    }   
                    else if (fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == undefined || fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == null || fieldsVisibleOnExtensionForCompanyContact[contactFieldKey] == '') {
                        const errorElement = document.getElementById(`${contactFieldKey}CompanyContactLabelId`);
                        const errorMessage = document.getElementById(`${contactFieldKey}CompanyContactErrorMessage`);
                        requiredFieldsNotFilled = true;
                        console.log('required', contactFieldKey, fieldsVisibleOnExtensionForCompanyContact[contactFieldKey]);
                        if (errorElement) {
                            errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            errorMessage.style.display = 'block';
                        }
                    }
                }
            }
            if (requiredFieldsNotFilled) {
                stopProcessing('#company_form button[type=submit]');
                return true;
            }
            return false;
        }
    }


    const debounce = (func, delay) => {
        let debounceTimer
        return function () {
            const context = this
            const args = arguments
            clearTimeout(debounceTimer)
            debounceTimer
                = setTimeout(() => func.apply(context, args), delay)
        }
    }
    function HtmlEncode(s) {
        var el = document.createElement("div");
        el.innerHTML = s;
        const sLocal = el.textContent || el.innerText || "";
        el.remove();
        return sLocal;
    }
    const fieldsToWatch = ["#candidate_email", "#candidate_phone", "#profilelinkedin", "#profilexing",
        "#contact_email", "#contact_contactnumber", "#profilelinkedinForContact", "#profilexingForContact",
        "#profilelinkedinForCompany", "#company_website"
    ];
    const previousValues = {};
    const currentVal = {};
    function setEventListners() {
        fieldsToWatch.forEach(function (selector) {
            if (EventListnsers.indexOf(selector) === -1 && $(selector).length > 0) {
                // Initialize previous value
                previousValues[selector] = $(selector).val().trim();
                $(selector).on("blur paste change", function (e) {
                    const delay = e.type === "paste" ? 0 : undefined;

                    setTimeout(() => {
                        currentVal[selector] = $(this).val().trim();

                        if (currentVal[selector] !== previousValues[selector]) {
                            previousValues[selector] = currentVal[selector];
                            checkDuplicate();
                        }
                    }, delay);
                });

                EventListnsers.push(selector);
            }
        });

        if (EventListnsers.indexOf("#candidate_link") == -1 && ("#candidate_link").length > 0) {
            $("#candidate_link").on("click", function (event) {
                $("#save_linked_in_profile_pdf").prop("checked", extSettings.autoPdf)
                toggleTabs(event, $(this).attr("data-entity"))
            });
            EventListnsers.push("#candidate_link");
        }
        if (EventListnsers.indexOf("#contact_link") == -1 && ("#contact_link").length > 0) {
            $("#contact_link").on("click", function (event) {

                toggleTabs(event, $(this).attr("data-entity"))
            });
            EventListnsers.push("#contact_link");
        }
        if (EventListnsers.indexOf("#company_link") == -1 && ("#company_link").length > 0) {

            $("#company_link").on("click", function (event) {

                toggleTabs(event, $(this).attr("data-entity"))
            });
            EventListnsers.push("#company_link");
        }
        if (EventListnsers.indexOf("#settings_link") == -1 && ("#settings_link").length > 0) {

            $("#settings_link").on("click", function (event) {

                // Apply settings on setting form
                // Click to parse
                var ctpChecked = true // By default keep click to parse on
                if (extSettings.ctp != undefined && extSettings.ctp === false) {
                    ctpChecked = false
                }
                $("#settings_ctp").prop("checked", ctpChecked)

                // Auto profile pdf upload
                var autoPdf = true // By default keep click to parse on
                if (extSettings.autoPdf != undefined && extSettings.autoPdf === false) {
                    autoPdf = false
                }
                $("#settings_auto_pdf").prop("checked", autoPdf)

                //Override Data
                var overrideData = true // By default keep click to override data on
                if (extSettings.overrideData != undefined && extSettings.overrideData === false) {
                    overrideData = false
                }
                $("#settings_override_data").prop("checked", overrideData)

                 //ToggleToSaveCurrentOrganisation Data
                 var toggleToSaveCurrentOrganisation = true // By default keep click to ToggleToSaveCurrentOrganisation data on
                 if (extSettings.toggleToSaveCurrentOrganisation != undefined && extSettings.toggleToSaveCurrentOrganisation === false) {
                    toggleToSaveCurrentOrganisation = false
                 }
                 $("#settings_toggle_to_save_current_organisation").prop("checked", toggleToSaveCurrentOrganisation)

                toggleTabs(event, $(this).attr("data-entity"))
                $('.setting-tooltip-span:not(.tooltipstered)').tooltipster({
                    theme: 'tooltipster-shadow',
                    animation: 'fade',
                    interactive: true,
                    trigger: 'hover',
                    // new function here
                    functionReady: function () {
                        // $("#ctp_setting_tooltip iframe")[0].src = $("#ctp_setting_tooltip iframe").attr("data-src")
                    }
                });
            });
            EventListnsers.push("#settings_link");
        }
        if (EventListnsers.indexOf("#settings_ctp") == -1 && ("#settings_ctp").length > 0) {
            $("#settings_ctp").on("change", function (e) {
                var ctp = e.currentTarget.checked
                storeInLocalStorage("ctp", ctp)
                extSettings = getFromLocalStorage();
                if (!ctp) {
                    stopLinkedInObserver()
                } else {
                    startLinkedInObserver()
                }
                //Add mixpannel eventtrack for Click to parse
                if (document.domain === 'www.linkedin.com') {
                    Domains[document.domain]?.checkURL();
                }
                var dataObject = {
                    'Click To Parse': ctp,
                    'Platform': Domains[document.domain]?.name || manuallyAdded
                }
                sendMessageToParent({ "message": "mixpanelEventHandler", "event": 'Click To Parse', "payload": dataObject });
            })
            EventListnsers.push("#settings_ctp");
        }
        if (EventListnsers.indexOf("#settings_auto_pdf") == -1 && ("#settings_auto_pdf").length > 0) {
            $("#settings_auto_pdf").on("change", function (e) {
                var autoPdf = e.currentTarget.checked
                storeInLocalStorage("autoPdf", autoPdf)
                extSettings = getFromLocalStorage();
                //Add mixpannel eventtrack for Upload PDF By Default (For LinkedIn)
                if (document.domain === 'www.linkedin.com') {
                    Domains[document.domain]?.checkURL();
                }
                var dataObject = {
                    'Upload PDF By Default': autoPdf,
                    'Platform': Domains[document.domain]?.name || manuallyAdded
                }
                sendMessageToParent({ "message": "mixpanelEventHandler", "event": 'Upload PDF By Default', "payload": dataObject });
            })
            EventListnsers.push("#settings_auto_pdf");
        }

        // Override Data
        if (EventListnsers.indexOf("#settings_override_data") == -1 && ("#settings_override_data").length > 0) {
            $("#settings_override_data").on("change", function (e) {
                var overrideData = e.currentTarget.checked
                storeInLocalStorage("overrideData", overrideData)
                extSettings = getFromLocalStorage();
                //Add mixpannel eventtrack for OverrideData
                if (document.domain === 'www.linkedin.com') {
                    Domains[document.domain]?.checkURL();
                }
                var dataObject = {
                    'Overried Data': overrideData,
                    'Platform': Domains[document.domain]?.name || manuallyAdded
                }
                sendMessageToParent({ "message": "mixpanelEventHandler", "event": 'Overried Data', "payload": dataObject });
            })
            EventListnsers.push("#settings_override_data");
        }

         // Toggle to save current organisation
         if (EventListnsers.indexOf("#settings_toggle_to_save_current_organisation") == -1 && ("#settings_toggle_to_save_current_organisation").length > 0) {
            $("#settings_toggle_to_save_current_organisation").on("change", function (e) {
                var toggleToSaveCurrentOrganisation = e.currentTarget.checked
                storeInLocalStorage("toggleToSaveCurrentOrganisation", toggleToSaveCurrentOrganisation)
                extSettings = getFromLocalStorage();
            })
            EventListnsers.push("#settings_toggle_to_save_current_organisation");
        }

        if (EventListnsers.indexOf("#candidate_details_link") == -1 && ("#candidate_details_link").length > 0) {
            $("#candidate_details_link").on("click", function (event) {

                toggleTabs(event, $(this).attr("data-entity"), true)
            });
            EventListnsers.push("#candidate_details_link");
        }
        if (EventListnsers.indexOf("#contact_details_link") == -1 && ("#contact_details_link").length > 0) {
            $("#contact_details_link").on("click", function (event) {

                toggleTabs(event, $(this).attr("data-entity"), true)
            });
            EventListnsers.push("#contact_details_link");
        }
        if (EventListnsers.indexOf("#company_details_link") == -1 && ("#company_details_link").length > 0) {
            $("#company_details_link").on("click", function (event) {

                toggleTabs(event, $(this).attr("data-entity"), true)
            });
            EventListnsers.push("#company_details_link");
        }
        if (EventListnsers.indexOf("#candidate_notes_link") == -1 && ("#candidate_notes_link").length > 0) {
            $("#candidate_notes_link").on("click", function (event) {

                toggleTabs(event, $(this).attr("data-entity"), true)
            });
            EventListnsers.push("#candidate_notes_link");
        }
        if (EventListnsers.indexOf("#contact_notes_link") == -1 && ("#contact_notes_link").length > 0) {
            $("#contact_notes_link").on("click", function (event) {

                toggleTabs(event, $(this).attr("data-entity"), true)
            });
            EventListnsers.push("#contact_notes_link");
        }
        if (EventListnsers.indexOf("#company_notes_link") == -1 && ("#company_notes_link").length > 0) {
            $("#company_notes_link").on("click", function (event) {

                toggleTabs(event, $(this).attr("data-entity"), true)
            });
            EventListnsers.push("#company_notes_link");
        }
        if (EventListnsers.indexOf("#btn_login") == -1 && ("#btn_login").length > 0) {
            $("#btn_login").on("click", function () {
                newWindow = window.open($(this).attr("data-link"), '_blank', 'location=yes,height=570,width=520,scrollbars=yes,status=yes');
                newWindow.addEventListener('message', function (message) {
                    if (message.data == "rcrm_loggedin") {
                        newWindow.close();
                        get_user();
                    }
                });
            });
            EventListnsers.push("#btn_login");
        }
        if (EventListnsers.indexOf("#btn_google_login") == -1 && ("#btn_google_login").length > 0) {
            $("#btn_google_login").on("click", function () {
                newWindow = window.open($(this).attr("data-link"), '_blank', 'location=yes,height=570,width=520,scrollbars=yes,status=yes');
                newWindow.addEventListener('message', function (message) {
                    if (message.data == "rcrm_loggedin") {
                        newWindow.close();
                        get_user();
                    }
                });
            });
            EventListnsers.push("#btn_google_login");
        }
        if (EventListnsers.indexOf("#btn_sso_login") == -1 && ("#btn_sso_login").length > 0) {
            $("#btn_sso_login").on("click", function () {
                newWindow = window.open($(this).attr("data-link"), '_blank', 'location=yes,height=570,width=520,scrollbars=yes,status=yes');
                newWindow.addEventListener('message', function (message) {
                    if (message.data == "rcrm_loggedin") {
                        newWindow.close();
                        get_user();
                    }
                });
            });
            EventListnsers.push("#btn_sso_login");
        }
        document.getElementById('sso_beta').style.display = 'none';
        if (EventListnsers.indexOf(".candidate_resume_drag") == -1 && (".candidate_resume_drag").length > 0) {
            $(".candidate_resume_drag").on("dragover", function (event) {
                event.preventDefault();
            });
            EventListnsers.push(".candidate_resume_drag");
        }

        if (EventListnsers.indexOf(".candidate_resume_drop") == -1 && (".candidate_resume_drop").length > 0) {
            $(document).on("drop", ".candidate_resume_drop", function (event) {
                event.preventDefault();
                eventdataTransfer = event.originalEvent.dataTransfer;
                if (event.originalEvent.dataTransfer.items) {
                    for (var i = 0; i < event.originalEvent.dataTransfer.items.length; i++) {
                        if (event.originalEvent.dataTransfer.items[i].kind === 'file') {
                            var file = event.originalEvent.dataTransfer.items[i].getAsFile();
                            $('.candidate_resume_p').text(file.name);
                            $('#candidate_resume')[0].files = event.originalEvent.dataTransfer.files;
                            $('.candidate_resume_p').addClass('color-primary');
                        }
                    }
                } else {
                    for (var i = 0; i < event.originalEvent.dataTransfer.files.length; i++) {
                        $('.candidate_resume_p').text(file.name);
                        $('#candidate_resume')[0].files = event.originalEvent.dataTransfer.files;
                        $('.candidate_resume_p').addClass('color-primary');
                    }
                }
                if (document.domain === 'www.linkedin.com') {
                    Domains[document.domain]?.checkURL();
                }
                var dataObject = {
                    [actionSource]: chromeExtension,
                    [fileType]: event.currentTarget.innerText.split('.').pop(),
                    [platformName]: Domains[document.domain]?.name || manuallyAdded,
                    [methodResume]: 'Drag and Drop'
                }
                sendMessageToParent({ "message": "mixpanelEventHandler", "event": resumeUploaded, "payload": dataObject });
            });
            EventListnsers.push(".candidate_resume_drop");
        }
        if (EventListnsers.indexOf("#candidate_resume") == -1 && ("#candidate_resume").length > 0) {

            $(document).on("change", "#candidate_resume", function (event) {
                event.preventDefault();
                if (document.domain === 'www.linkedin.com') {
                    Domains[document.domain]?.checkURL();
                }
                var dataObject = {
                    [actionSource]: chromeExtension,
                    [fileType]: event.currentTarget.files[0].name.split('.').pop(),
                    [platformName]: Domains[document.domain]?.name || manuallyAdded,
                    [methodResume]: 'Browse'
                }
                sendMessageToParent({ "message": "mixpanelEventHandler", "event": resumeUploaded, "payload": dataObject });
                $('.candidate_resume_p').text($('#candidate_resume')[0].files[0].name);
                $('.candidate_resume_p').addClass('color-primary');
            });
            EventListnsers.push("#candidate_resume");
        }
        if (EventListnsers.indexOf(".drop_zone") == -1 && (".drop_zone").length > 0) {

            $(document).on("click", ".drop_zone", function (event) {
                event.preventDefault();
                event.stopPropagation();
                $('#candidate_resume').click();
            });
            EventListnsers.push(".drop_zone");
        }
        if (EventListnsers.indexOf(".submit-screen-ok") == -1 && (".submit-screen-ok").length > 0) {
            $('.submit-screen-ok').on("click", function (event) {
                resetProfileUI();
                showSection('in-ext');
                $(".tablinks.active").click();
            });
            EventListnsers.push(".submit-screen-ok");
        }

        //Event to close the alert modal on button click
        if (EventListnsers.indexOf(".close-click-alert") == -1 && (".close-click-alert").length > 0) {
            $('.close-click-alert').on("click", function (event) {
                $('#click-alert-modal .close-modal').click();
            });
            EventListnsers.push(".close-click-alert");
        }

        if (EventListnsers.indexOf("#candidate_form") == -1 && ("#candidate_form").length > 0) {
            $('#candidate_form').on('submit', function (e) {
                e.preventDefault();
                e.stopPropagation();
                if (!checkAccess('candidates')) return;
                setIsProcessing('#candidate_form button[type=submit]');
                versionTag = $("#pdf_version_tag").val()
                if (versionTag && versionTag != "" && $("#save_linked_in_profile_pdf").is(":checked")) {
                    var messageData = {};
                    if (currentUrlObj.toString().indexOf("linkedin.com/recruiter/profile") > -1) {
                        var linkedin = fromTopJQcontext('#topcard div.module-footer ul li.public-profile.searchable a').attr('href');
                        linkedInslug = linkedin.split('/')[4];
                    } else if (currentUrlObj.toString().indexOf("linkedin.com/talent/profile") > -1) {
                        //var linkedin = fromTopJQcontext('[data-test-personal-info-profile-link]')[0]?.href;
                        //linkedInslug = linkedin?.split('/')[4];
                    } else if (currentUrlObj.toString().indexOf("linkedin.com/talent/hire") > -1 || currentUrlObj.toString().indexOf("linkedin.com/talent/search") > -1) {
                        var linkedin = fromTopJQcontext('[data-test-public-profile-link]').attr('href');
                        linkedInslug = linkedin.split('/')[4];
                    } else if (currentUrlObj.toString().indexOf("linkedin.com/talent/inbox") > -1) {
                        var linkedin = fromTopJQcontext('[data-test-personal-info-profile-link]')[0].href;
                        linkedInslug = linkedin.split('/')[4];
                    } else if (currentUrlObj.toString().indexOf("linkedin.com/sales/people") > -1 ||
                    currentUrlObj.toString().indexOf("linkedin.com/sales/search/people") > -1) {
                        linkedInslug = copiedLinkedinUrl?.split('/')[4];

                        messageData.message = "getLinkedInPersonProfilePdf";
                        messageData.type = "5";
                        messageData.slug = linkedInslug;
                        messageData.versionTag = versionTag;
                        sendMessageToParent(messageData);

                        return;
                    } else if (currentUrlObj.toString().indexOf("linkedin.com/sales/lead") > -1) {
                        linkedInslug = copiedLinkedinUrl?.split('/')[4];

                        messageData.message = "getLinkedInPersonProfilePdf";
                        messageData.type = "5";
                        messageData.slug = linkedInslug;
                        messageData.versionTag = versionTag;
                        sendMessageToParent(messageData);

                        return;
                    } else {
                        linkedInslug = $(currentUrlObj).attr('pathname');
                        linkedInslug = linkedInslug.split("/")[2];
                    }

                    messageData.message = "getLinkedInPersonProfilePdf";
                    messageData.type = "5";
                    messageData.slug = linkedInslug;
                    messageData.versionTag = versionTag;
                    sendMessageToParent(messageData);
                } else {
                    createCandidateRecord(true, true);
                    //Setting entity type id
                    entityTypeId = 5;
                }
            });
            EventListnsers.push("#candidate_form");
        }

        if (EventListnsers.indexOf("#contact_form") == -1 && ("#contact_form").length > 0) {
            $('#contact_form').on('submit', function (e) {
                e.preventDefault();
                e.stopPropagation();
                if (!checkAccess('contacts')) return;
                setIsProcessing('#contact_form button[type=submit]');
                createContactRecord(true, true);
                // Setting Entity Type Id
                entityTypeId = 2;
            });
            EventListnsers.push("#contact_form");
        }

        if (EventListnsers.indexOf("#company_form") == -1 && ("#company_form").length > 0) {
            $('#company_form').on('submit', function (e) {
                e.preventDefault();
                e.stopPropagation();
                if (!checkAccess('companies')) return;
                setIsProcessing('#company_form button[type=submit]');
                company = {};
                contact = {};
                var formData = $("#company_form").serializeArray();
                var addToObject = true;
                var companynote = "";

                if(flagForCompanyContacts && companyColumns['contactid'].show_on_extension == true && selectedCompanyContacts.length > 0){
                    let contactSlugs = selectedCompanyContacts.map(contact => contact.slug).join(',');
                    fieldsVisibleOnExtensionForCompany['existingContacts'] = contactSlugs;
                } else {
                    delete fieldsVisibleOnExtensionForCompany['existingContacts'];
                }

                if (enforceRequiredFieldsOnExtension?.company == true && flagForEnforceRequiredFieldsOnExtension) {
                    const enforcedRequiredFields = checkCompanyDynamicFieldsRequired();
                    if (enforcedRequiredFields) {
                        return;
                    }
                }

                if (companyContactColumns['profilelinkedin']?.show_on_extension == true &&
                    currentUrlObj?.href?.includes('linkedin.com') &&
                    (fieldsVisibleOnExtensionForCompanyContact['profilelinkedin'] == undefined
                        || fieldsVisibleOnExtensionForCompanyContact['profilelinkedin'] == null
                        || fieldsVisibleOnExtensionForCompanyContact['profilelinkedin'] == '')) {

                    fieldsVisibleOnExtensionForCompanyContact['profilelinkedin'] = currentUrlObj.href?.split('?')[0]?.replace(/\/$/, '');
                }

                if (companyContactColumns['profilexing']?.show_on_extension == true &&
                    currentUrlObj?.href?.includes('xing.com') &&
                    (fieldsVisibleOnExtensionForCompanyContact['profilexing'] == undefined
                        || fieldsVisibleOnExtensionForCompanyContact['profilexing'] == null
                        || fieldsVisibleOnExtensionForCompanyContact['profilexing'] == '')) {

                    fieldsVisibleOnExtensionForCompanyContact['profilexing'] = profileXing;
                }

                if (companyColumns['profilelinkedin']?.show_on_extension == true &&
                    currentUrlObj?.href?.includes('linkedin.com') &&
                    (fieldsVisibleOnExtensionForCompany['profilelinkedin'] == undefined
                        || fieldsVisibleOnExtensionForCompany['profilelinkedin'] == null
                        || fieldsVisibleOnExtensionForCompany['profilelinkedin'] == '')) {

                    fieldsVisibleOnExtensionForCompany['profilelinkedin'] = currentUrlObj.href?.split('?')[0]?.replace(/\/$/, '');
                }

                Object.keys(formData).forEach(key => {
                    addToObject = true
                    var _key = formData[key].name.substr(formData[key].name.indexOf("company_") + 8);
                    if (formData[key].name == "extra_data_comp_notes") {
                        addToObject = false;
                        companynote = formData[key].value.trim();

                        delete formData[key];
                    }
                    if (addToObject) {
                        if (_key.indexOf('contact_') !== -1) {
                            contact[_key.substr(formData[key].name.indexOf("contact_"))] = formData[key].value;
                        } else {
                            company[_key] = formData[key].value;
                        }
                    }
                });
                var logo = $('#company_logo').attr('src');
                if (logo != undefined && logo !== '' && logo.indexOf('chrome-extension:') == -1) {
                    company.logo = logo;
                }
                var photo = $('#company_contact_photo').attr('src');
                if (photo != undefined && photo !== '' && photo.indexOf('chrome-extension:') == -1) {
                    contact.photo = photo;
                }
                contact.locality = $('#contact_locality').val();
                // 4. convert multiselect values saved in list to comma separated string 
                for(let column in listofmultiselectcolumnForCompany){
                    let fieldKey = column;
                    let tagName = listofmultiselectcolumnForCompany[fieldKey];
                    let list = document.getElementById(tagName).getElementsByTagName('li');
                    let fieldValues = [];
                    for (let j = 0; j < list.length; j++) {
                        const valueUnderLItag = list[j].textContent;
                        const lengthOfvalue = valueUnderLItag.length;
                        fieldValues.push(valueUnderLItag.substring(0,lengthOfvalue-1));// remove X from the end
                    }
                    if (fieldValues != '' && Array.isArray(fieldValues)){
                        if (fieldValues.length == 0){
                            fieldsVisibleOnExtensionForCompany[fieldKey] = '';
                        }
                        else{
                            const commaSeparatedString = fieldValues.join(",");
                            fieldsVisibleOnExtensionForCompany[fieldKey] = commaSeparatedString;
                        }
                    }
                }
                for(let column in listofmultiselectcolumnForCompanyContact){
                    let fieldKey = column;
                    let tagName = listofmultiselectcolumnForCompanyContact[fieldKey];
                    let list = document.getElementById(tagName).getElementsByTagName('li');
                    let fieldValues = [];
                    for (let j = 0; j < list.length; j++) {
                        const valueUnderLItag = list[j].textContent;
                        const lengthOfvalue = valueUnderLItag.length;
                        fieldValues.push(valueUnderLItag.substring(0,lengthOfvalue-1));// remove X from the end
                    }
                    if (fieldValues != '' && Array.isArray(fieldValues)){
                        if (fieldValues.length == 0){
                            fieldsVisibleOnExtensionForCompanyContact[fieldKey] = '';
                        }
                        else{
                            const commaSeparatedString = fieldValues.join(",");
                            fieldsVisibleOnExtensionForCompanyContact[fieldKey] = commaSeparatedString;
                        }
                    }
                }
                for (let i = 0; i < dropdownCustomFieldsForCompany.length; i++) {
                    let fieldName = dropdownCustomFieldsForCompany[i];
                    let fieldValues = fieldsVisibleOnExtensionForCompany[fieldName];
                    if (fieldValues != '' && Array.isArray(fieldValues)) {
                        if (fieldValues.length == 0){
                            fieldsVisibleOnExtensionForCompany[fieldName] = '';
                        }
                        else{
                            const commaSeparatedString = fieldValues[0];
                            fieldsVisibleOnExtensionForCompany[fieldName] = commaSeparatedString;
                        }
                    }
                }
                for (let i = 0; i < dropdownCustomFieldsForCompanyContact.length; i++) {
                    let fieldName = dropdownCustomFieldsForCompanyContact[i];
                    let fieldValues = fieldsVisibleOnExtensionForCompanyContact[fieldName];
                    if (fieldValues != '' && Array.isArray(fieldValues)) {
                        if (fieldValues.length == 0){
                            fieldsVisibleOnExtensionForCompanyContact[fieldName] = '';
                        }
                        else{
                            const commaSeparatedString = fieldValues[0];
                            fieldsVisibleOnExtensionForCompanyContact[fieldName] = commaSeparatedString;
                        }
                    }
                }

                Object.keys(entityTypeFieldsForEntities[companyEntityTypeId]).forEach(key => {
                    if(entityTypeFieldsForEntities[companyEntityTypeId][key].length > 0){
                        setEntityTypeFieldValuesForEntities(key, companyEntityTypeId, entityTypeFieldsForEntities[companyEntityTypeId][key]);
                    }
                });

                Object.keys(entityTypeFieldsForEntities[contactEntityTypeId]).forEach(key => {
                    if(entityTypeFieldsForEntities[contactEntityTypeId][key].length > 0){
                        setEntityTypeFieldValuesForEntities(key, companyContactEntityTypeId, entityTypeFieldsForEntities[contactEntityTypeId][key]);
                    }
                });

                multiselectCustomFieldsForCompany = [];
                dropdownCustomFieldsForCompany = [];
                multiselectCustomFieldsForCompanyContact = [];
                dropdownCustomFieldsForCompanyContact = [];
                var message = {};
                if(flagForShowOnExtension){
                    message = { "message": "companyContactSubmit", "payload": { "company": company, "contact": contact, 'fieldsVisibleOnExtensionForCompany': fieldsVisibleOnExtensionForCompany , 'fieldsVisibleOnExtensionForCompanyContact': fieldsVisibleOnExtensionForCompanyContact, 'extension_request': true, 'overrideData': extSettings.overrideData,'fileTypeCustomFieldsForCompany':fileDataForCompany,'fileTypeCustomFieldsForCompanyContact':fileDataForCompanyContact } };
                }else{
                    message = { "message": "companyContactSubmit", "payload": { "company": company, "contact": contact, 'extension_request': true, 'overrideData': extSettings.overrideData } };
                }
                // var message = { "message": "companyContactSubmit", "payload": { "company": company, "contact": contact, 'extension_request': true, 'overrideData': extSettings.overrideData } };
                if (companynote != '') {
                    message.payload.companynote = companynote;
                    message.payload.collaborator_user_ids = JSON.stringify(collaboratorCompanyNotesUserIds);
                    message.payload.collaborator_team_ids = JSON.stringify(collaboratorCompanyNotesTeamIds);
                    if(flagForNoteTypeOnExtension) {
                        message.payload.note_type_id = selectedCompanyNoteType;
                    }
                    
                }
                sendMessageToParent(message);
            });
            EventListnsers.push("#company_form");
        }

        if (EventListnsers.indexOf("#appointment_form") == -1 && ("#appointment_form").length > 0) {
            $('#appointment_form').on('submit', function (e) {
                e.preventDefault();
                e.stopPropagation();
                setIsProcessing('#appointment_form button[type=submit]');
                appointment = {};
                var formData = $("#appointment_form").serializeArray();
                var addTodAppointment = true;
                extraData = {};

                Object.keys(formData).forEach(key => {

                    var _key = formData[key].name.substr(formData[key].name.indexOf("appointment_") + 12);
                    if (_key == 'starttime' || _key == 'endtime') {
                        extraData[_key] = formData[key].value;
                        addTodAppointment = false;
                    }
                    if (addTodAppointment) {
                        appointment[_key] = formData[key].value;
                    }
                });

                appointment.reminderdate = $('#appointment_reminderdate').val();
                if(flagForCalendarInvite){
                appointment.no_cal_invites = $('#appointment_no_cal_invites')?.prop('checked') ? 1 : 0;
                }
                appointment.startdate = parseInt(new Date(appointment.startdate).getTime() / 1000)
                appointment.enddate = appointment.startdate + parseInt(extraData.endtime);
                appointment.startdate += parseInt(extraData.starttime);
                extraData.collaborators = $('#appointment_attendees').val();
                extraData.collaboratorUserIds = collaboratorMeetingUserIds;
                extraData.collaboratorTeamIds = collaboratorMeetingTeamIds;
                appointment.relatedto = $('#appointment_relatedto').val();
                appointment.accountid = user.accountid;
                appointment.allday = 1;
                appointment.creatorname = user.name;
                appointment.emailbatchid = null;
                appointment.eventid = "";
                appointment.ownerid = $('#appointment_ownerid').val();
                appointment.type = 2;
                appointment.status = 0;
                appointment.description = $('#appointment_description').val();
                appointment.meetingtype = selectedMeetingType  ? selectedMeetingType : null;
                if(appointment.startdate >= appointment.enddate) {
                    toastr.error("End Time should be greater than Start Time.");
                    stopProcessing('#appointment_form button[type=submit]');
                    return;
                }
                sendMessageToParent({ "message": "appointmentSubmit", "payload": { "appointment": appointment, "extraData": extraData } });
            });

            renderTimeOptions('appointment_starttime', 50400, user.time_format_type); // default: 2:00 PM
	        renderTimeOptions('appointment_endtime', 52200, user.time_format_type); // default: 2:30 PM

            EventListnsers.push("#appointment_form");
        }
        if (EventListnsers.indexOf("#task_form") == -1 && ("#task_form").length > 0) {
            $('#task_form').on('submit', function (e) {
                e.preventDefault();
                e.stopPropagation();
                setIsProcessing('#task_form button[type=submit]');
                task = {};
                var formData = $("#task_form").serializeArray();
                var addTodTask = true;
                extraData = {};

                Object.keys(formData).forEach(key => {

                    var _key = formData[key].name.substr(formData[key].name.indexOf("task_") + 5);
                    if (_key == 'starttime' || _key == 'endtime') {
                        extraData[_key] = formData[key].value;
                        addTodTask = false;
                    }
                    if (addTodTask) {
                        task[_key] = formData[key].value;
                    }
                });
                task.accountid = user.accountid;
                task.address = "";
                task.allday = 0;
                task.creatorname = user.name;
                task.emailbatchid = null;
                task.enddate = undefined;
                task.eventid = 1;
                
                task.ownerid = $('#task_ownerid').val();
                extraData.collaborators = $('#task_collaborators').val();
                extraData.collaboratorUserIds = collaboratorTaskUserIds;
                extraData.collaboratorTeamIds = collaboratorTaskTeamIds;
                task.relatedto = $('#task_relatedto').val();
                task.reminderdate = $('#task_reminderdate').val();
                task.startdate = parseInt(new Date(task.startdate).getTime() / 1000)
                task.startdate += parseInt(extraData.starttime);
                task.status = "";
                task.description = $('#task_description').val();
                task.task_type = selectedTaskType  ? selectedTaskType : null;
                task.type = 1;
                sendMessageToParent({ "message": "taskSubmit", "payload": { "task": task, "extraData": extraData } });     
            });
            renderTimeOptions('task_starttime', 50400, user.time_format_type); // default: 2:00 PM
            EventListnsers.push("#task_form");
        }

        if (EventListnsers.indexOf("#contact_companyid") == -1 && ("#contact_companyid").length > 0) {
            $("#contact_companyid").on("keyup", debounce(function (e) {
                if (e.key !== undefined) {
                    var q = $("#contact_companyid").val();
                    if (_comapnyid != q) {
                        _comapnyid = q;
                        sendMessageToParent({ 'message': 'getCompanies', 'q': q });
                        $(".search-company-loader").removeClass("d-none").addClass("d-block");
                    }
                }
            }, 500));
            EventListnsers.push("#contact_companyid");
        }

        if (EventListnsers.indexOf("#companyContactsSearch") == -1 && ("#companyContactsSearch").length > 0) {
            $("#companyContactsSearch").on("keyup", debounce(function (e) {
                if (e.key !== undefined) {
                    let contactSearch = $("#companyContactsSearch").val().trim();
                    if (contactSearch != "") {
                        sendMessageToParent({ 'message': 'getContacts', 'search': contactSearch });
                        $(".search-company-loader").removeClass("d-none").addClass("d-block");
                    }else{
                        createContactOptions([]);
                    }
                }
            }, 500));
            EventListnsers.push("#companyContactsSearch");
        }

        if (EventListnsers.indexOf("#companyContactsSearchField") == -1 && ("#companyContactsSearchField").length > 0) {
            $("#companyContactsSearchField").on("click", debounce(function (e) {
                let dropDown = document.getElementById("companyContactsSearchField");
                let contactSearch = $("#companyContactsSearch").val().trim();
                dropDown.classList.toggle('active');
                if(contactSearch == ""){
                    createContactOptions([]);
                }
            }, 500));
            EventListnsers.push("#companyContactsSearchField");
        }

        if (EventListnsers.indexOf("#companyContactsDropdownOptions") == -1 && ("#companyContactsDropdownOptions").length > 0) {
            $("#companyContactsDropdownOptions").on("click", debounce(function (event) {
                event.stopPropagation();
                let clickedContactId = event.target.id;
                handleSelectedCompanyContacts(clickedContactId);
                let dropDown = document.getElementById("companyContactsSearchField");
                dropDown.classList.toggle('active');
            }, 500));
            EventListnsers.push("#companyContactsDropdownOptions");
        }

        if (EventListnsers.indexOf("#companySelectedContacts") == -1 && ("#companySelectedContacts").length > 0) {
            $("#companySelectedContacts").on("click", debounce(function (event) {
                event.stopPropagation();
                let clickedContactId = event.target.id;
                handleSelectedCompanyContacts(clickedContactId);
            }, 500));
            EventListnsers.push("#companySelectedContacts");
        }

        // if (EventListnsers.indexOf("#search_job") == -1 && ("#search_job").length > 0) {
        //     $("#search_job").on("keyup", debounce(function (e) {
        //         if (e.key !== undefined) {
        //             var q = $("#search_job").val();
        //             if (_jobid != q) {
        //                 _jobid = q;
        //                 sendMessageToParent({ 'message': 'getJobsToAssignCandidate', 'q': q });
        //                 $(".search-company-loader").removeClass("d-none").addClass("d-block");
        //             }
        //         }
        //     }, 500));
        //     EventListnsers.push("#search_job");
        // }

        if (EventListnsers.indexOf("#noti_Button") == -1 && ("#noti_Button").length > 0) {
            $('#noti_Button').on('click', function () {
                $('.notification-count-span').toggleClass('d-none', true).toggleClass('d-block', false);
                localStorage.new_notification_count = 0;
                $('.notification-count-span').text('');
                // TOGGLE (SHOW OR HIDE) NOTIFICATION WINDOW.
                $('#notifications').fadeToggle('fast', 'linear', function () {
                });
                $('#noti_Counter').fadeOut('slow'); // HIDE THE COUNTER.
                return false;
            });
            // HIDE NOTIFICATIONS WHEN CLICKED ANYWHERE ON THE PAGE.
            $(document).click(function (e) {
                if (!e.target.id == 'notifications' && !$(e.target).closest('#notifications').length) {
                    $('#notifications').hide();
                    // CHECK IF NOTIFICATION COUNTER IS HIDDEN.
                    if ($('#noti_Counter').is(':hidden')) {
                        // CHANGE BACKGROUND COLOR OF THE BUTTON.
                        $('#noti_Button').css('background-color', '#2E467C');
                    }
                }
            });

            EventListnsers.push("#noti_Button");
        }

        if (EventListnsers.indexOf(".entity-action-btns") == -1 && (".entity-action-btns").length > 0) {
            $('.entity-action-btns').on('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                var link = document.createElement('a');
                var _href = $(this).attr('data-href');
                if (_href) {
                    var presetEntity = {};
                    link.href = $(this).attr('data-href');
                    var entity = $(this).attr('data-entity');
                    presetEntity[entity] = window[entity];
                    fnsetUpFollowupControls($(this).attr('data-href'), presetEntity);
                } else {
                    link.href = $(this).attr('href');
                }

                link.rel = $(this).attr('data-rel');
                document.body.appendChild(link);
                link.click();
            });

            EventListnsers.push(".entity-action-btns");
        }
        if (EventListnsers.indexOf(".assign_to_job_followup_link") == -1 && (".assign_to_job_followup_link").length > 0) {
            $('.assign_to_job_followup_link').on('click', function (e) {
                var entity = 'candidate';
                var profileLink = BASE_APP_URL + '/' + entity + '/' + window[entity].slug;
                $('#assign_to_job_followup .details-link').attr('href', profileLink);
                var name = window[entity]['name'] ? window[entity]['name'] : window[entity]['candidatename'];
                $('#assign_to_job_followup .success-name').text(name?.trim());
                assignedJobs = []
                sendMessageToParent({ 'message': 'getAssignedJobs', 'data': { 'id': candidate.id } });
                if (hiringStages.length < 1) {
                    sendMessageToParent({ 'message': 'getHiringStages', 'data': {} });
                    sendMessageToParent({ 'message': 'getHiringStagesEmailTrigger', 'data': {} });
                }
            });

            EventListnsers.push(".assign_to_job_followup_link");
        }
        if (EventListnsers.indexOf(".notes_list_link") == -1 && (".notes_list_link").length > 0) {
            $('.notes_list_link').on('click', function (e) {
                var entity = $(this).attr('data-entity');
                var notes = window[entity + "Notes"]
                notesHtml = ""
                $(".note-li").remove()
                if (notes.length) {
                    notes.forEach(note => {
                        notesHtml = $($(".note-li-shadow")[0]).html()
                        var noteType = false;
                        if(flagForNoteTypeOnExtension) {
                            noteType = noteTypeList.find(noteType => noteType.id == note.notetype);
                        }
                        var li = document.createElement('li');
                        li.innerHTML = notesHtml
                        $(li).removeClass("note-li-shadow").removeClass("d-none").addClass("note-li")
                        $("#notes-list").append(li);
                        $(".note-contents", $(li)).html(note.description)
                        if(noteType && flagForNoteTypeOnExtension) {
                            $(".note-type", $(li)).text(noteType.label).addClass('display-block');
                            $(".note-type", $(li)).addClass('dynamic-truncate-text');
                        }
                        $(".note-created-by", $(li)).text(note.creatorname)
                        var date = new Date(note.createdon * 1000);
                        $(".note-created-on", $(li)).text(formatDateTime(date, user.time_format_type))

                    });
                } else {
                    var li = document.createElement('li');
                    li.innerHTML = "<br><h3 style='text-align: center'>You’ll See Notes You Add Here :)</h3>";
                    $(li).removeClass("note-li-shadow").removeClass("d-none").addClass("note-li");
                    $("#notes-list").append(li);
                    $('#note_empty_state_img').show();
                }
            });

            EventListnsers.push(".notes_list_link");
        }
        if (EventListnsers.indexOf(".add_to_hot_list_followup_link") == -1 && (".add_to_hot_list_followup_link").length > 0) {
            $('.add_to_hot_list_followup_link').on('click', function (e) {
                var entity = $(this).attr('data-entity');
                $('#add_to_hot_list_followup').attr('data-entity', entity);
                var profileLink = BASE_APP_URL + '/' + entity + '/' + window[entity].slug
                $('#add_to_hot_list_followup .details-link').attr('href', profileLink);
                var name = window[entity]['name'] ? window[entity]['name'] : window[entity][entity + 'name'];
                $('#add_to_hot_list_followup .success-name').text(name.trim());

                $('#add_to_hot_list_followup #add_to_hot_list_followup_or_div').css('display', 'flex');
                $('#add_to_hot_list_followup #add_to_hot_list_followup_new_hotlist_div').css('display', 'block');
                if (document.domain === 'www.linkedin.com') {
                    Domains[document.domain]?.checkURL();
                }
                var dataObject = {
                    [actionSource]: chromeExtension,
                    [entityName]: entity,
                    [platformName]: Domains[document.domain]?.name || manuallyAdded,
                    [extensionPage]: e.delegateTarget.className.includes('tooltipstered') ? 'Already Exists Page' : 'Success Page'
                }
                setHotListSelectOptions(entity);
                sendMessageToParent({ 'message': 'getHotlistsBeforeGetAssignedHotlists', "data": { "entity_name": entity == 'company' ? 'companies' : entity + 's' }, "entity": entity });
                sendMessageToParent({ "message": "mixpanelEventHandler", "event": hotlistBtnClick, "payload": dataObject });
            });
            EventListnsers.push(".add_to_hot_list_followup_link");
        }

        if (EventListnsers.indexOf(".add_appointment_followup_link") == -1 && (".add_appointment_followup_link").length > 0) {
            $('.add_appointment_followup_link').on('click', function (e) {
                var entity = $(this).attr('data-entity');
                $('#appointment_form').attr('data-entity', entity);
                if (document.domain === 'www.linkedin.com') {
                    Domains[document.domain]?.checkURL();
                }
                var dataObject = {
                    [actionSource]: chromeExtension,
                    [entityName]: entity,
                    [platformName]: Domains[document.domain]?.name || manuallyAdded,
                    [extensionPage]: e.delegateTarget.className.includes('tooltipstered') ? 'Already Exists Page' : 'Success Page'
                }
               sendMessageToParent({ "message": "mixpanelEventHandler", "event": meetingBtnClick, "payload": dataObject });
            });
            EventListnsers.push(".add_appointment_followup_link");
        }

        if (EventListnsers.indexOf(".add_task_followup_link") == -1 && (".add_task_followup_link").length > 0) {
            $('.add_task_followup_link').on('click', function (e) {
                var entity = $(this).attr('data-entity');
                $('#task_form').attr('data-entity', entity);
                if (document.domain === 'www.linkedin.com') {
                    Domains[document.domain]?.checkURL();
                }
                var TaskType = false;
                TaskType = taskTypeList.find(taskType => taskType.id == 1);
                var dataObject = {
                    [actionSource]: chromeExtension,
                    [entityName]: entity,
                    [platformName]: Domains[document.domain]?.name || manuallyAdded,
                    [extensionPage]: e.delegateTarget.className.includes('tooltipstered') ? 'Already Exists Page' : 'Success Page'
                }
               sendMessageToParent({ "message": "mixpanelEventHandler", "event": taskBtnClick, "payload": dataObject });
            });
            EventListnsers.push(".add_task_followup_link");
        }

        let setMinimise = false;
        if (EventListnsers.indexOf(".minimise-notification") == -1 && (".minimise-notification").length > 0) {
            $('.minimise-notification').on('click', function (e) {
                const mainElements = window.top.document.getElementsByClassName('rcrm-ext-container');
                mainElements[0].style.height = '40px';
                mainElements[0].style.width = '45px';
                mainElements[0].style.marginTop = '70px';
                mainElements[0].style.backgroundColor = 'transparent';
                const elements = window.document.getElementsByClassName('main-ext-section');                
                elements[0].style.display = 'none'; // Apply 'display: none'
                const iFrameElements = window.top.document.getElementsByClassName('rcrm-ext-iframe');
                iFrameElements[0].style.borderRadius = '10px';
                const navBarElements = document.getElementsByClassName('rcrm-nav');
                navBarElements[0].style.backgroundColor = 'white';
                setMinimise = !setMinimise;
            });
            EventListnsers.push(".minimise-notification");
        }

        if (EventListnsers.indexOf(".show-extension") == -1 && (".show-extension").length > 0) {
            $('.show-extension').on('click', function (e) {
                if (setMinimise) {
                    const mainElements = window.top.document.getElementsByClassName('rcrm-ext-container');
                    mainElements[0].style.removeProperty('height');
                    mainElements[0].style.removeProperty('width');
                    mainElements[0].style.removeProperty('margin-top');
                    mainElements[0].style.removeProperty('background-color');
                    const elements = window.document.getElementsByClassName('main-ext-section');
                    elements[0].style.display = 'block';
                    const iFrameElements = window.top.document.getElementsByClassName('rcrm-ext-iframe');
                    iFrameElements[0].style.removeProperty('border-radius');
                    const navBarElements = document.getElementsByClassName('rcrm-nav');
                    navBarElements[0].style.removeProperty('background-color');
                    setMinimise = !setMinimise;
                }
            });
            EventListnsers.push(".show-extension");
        }

        if (EventListnsers.indexOf(".hide-notification") == -1 && (".hide-notification").length > 0) {
            $('.hide-notification').on('click', function (e) {
                sendMessageToParent({ 'message': 'setExtenstion' });
            });
            EventListnsers.push(".hide-notification");
        }

        // saveContact check Data
        if (EventListnsers.indexOf("#save_contact") == -1 && ("#save_contact").length > 0) {
            $("#save_contact").on("change", function (e) {
                var saveContact = e.currentTarget.checked
                storeInLocalStorage("saveContact", saveContact)
                extSettings = getFromLocalStorage();
            })
            EventListnsers.push("#saveContact");
        }

        //saveContact checkbox
        var saveContact = true // By default keep click to save as contact data on
        if (extSettings.saveContact != undefined && extSettings.saveContact === false) {
            saveContact = false
        }
        $("#save_contact").prop("checked", saveContact)

        // saveCandidate check Data
        if (EventListnsers.indexOf("#save_candidate") == -1 && ("#save_candidate").length > 0) {
            $("#save_candidate").on("change", function (e) {
                var saveCandidate = e.currentTarget.checked
                storeInLocalStorage("saveCandidate", saveCandidate)
                extSettings = getFromLocalStorage();
            })
            EventListnsers.push("#saveCandidate");
        }

        //saveCandidate checkbox
        var saveCandidate = true // By default keep click to save as contact data on
        if (extSettings.saveCandidate != undefined && extSettings.saveCandidate === false) {
            saveCandidate = false
        }
        $("#save_candidate").prop("checked", saveCandidate)

        // saveCandidateFromCompany from company check Data
        if (EventListnsers.indexOf("#save_candidate_company") == -1 && ("#save_candidate_company").length > 0) {
            $("#save_candidate_company").on("change", function (e) {
                let saveCandidateFromCompany = e.currentTarget.checked
                storeInLocalStorage("saveCandidateFromCompany", saveCandidateFromCompany)
                extSettings = getFromLocalStorage();
            })
            EventListnsers.push("#saveCandidateFromCompany");
        }
        //saveCandidateFromCompany checkbox
        let saveCandidateFromCompany = false // By default keepingsaveCandidateFromCompany false
        if (extSettings.saveCandidateFromCompany != undefined && extSettings.saveCandidateFromCompany === true) {
            saveCandidateFromCompany = true
        }
        $("#save_candidate_company").prop("checked", saveCandidateFromCompany)
    }
    function checkEverytingLoaded() {
        if ($ !== undefined) {
            if (userCallFinished) {
                setTimeout(() => {
                    document.getElementById('main').style.visibility = 'visible';
                    document.getElementById('notification-placeholder').style.visibility = 'visible';
                    document.getElementById('out-ext').style.visibility = 'visible';
                }, 100);


                clearInterval(checkEverytingLoadedInterval);
                setEventListners();
                setUserLoadedState();
            }
            setTimeout(() => {
                initControls();
            }, 1000);
        }
    }
    function loadFolloUpActionsData(entity) {
        if (jobs == undefined || jobs.length < 1) {
            sendMessageToParent({ 'message': 'getJobsToAssignCandidate' });
        }
        if (hotlists.entity == undefined || hotlists.entity.length < 1) {
            if (($("#contact_link.tablinks.active").length == 1)) {
                entity = 'contact';
            }
            sendMessageToParent({ 'message': 'getHotlists', "data": { "entity_name": entity == 'company' ? 'companies' : entity + 's' }, "entity": entity });
        } else {
            setHotListSelectOptions(entity);
        }
    }
    function setIsProcessing(Identifier) {
        $(Identifier).addClass("button is-loading");
    }
    function stopProcessing(Identifier) {
        $(Identifier).removeClass("button is-loading");
    }
    // ---
    // To be called when user is reloaded (eg: after loggin in)
    function setFrameLoadingState() {
        $(".main").toggleClass('d-none', true).toggleClass('d-block', false);
        $(".is-loading").toggleClass('d-block', true).toggleClass('d-none', false);
    }
    function setFrameLoadedState() {
        $(".is-loading").toggleClass('d-none', true).toggleClass('d-block', false);
        $(".main").toggleClass('d-block', true).toggleClass('d-none', false);
        if (user.id === undefined) {
            // show loin page
            showSection('out-ext');
            return;
        }
    }
    function setUserLoadedState() {
        $(".is-loading").toggleClass('d-none', true).toggleClass('d-block', false);
        $(".main").toggleClass('d-block', true).toggleClass('d-none', false);
        if (user.id === undefined) {
            // show loin page
            showSection('out-ext');
            return;
        }
        showSection('in-ext');
        setEventListners();
        startMonitors();
        fullResumeText = undefined;
        $(".tablinks.active").click();
    }
    function showSection(sectionClass, callBack = function () { }) {
        $(".ext-section").toggleClass('d-none', true).toggleClass('d-block', false);//hide all ext sections
        $("." + sectionClass).toggleClass('d-block', true).toggleClass('d-none', false);//show the ext section
        setTimeout(() => {
            callBack();
        }, 0);
    }
    async function get_user() {
        sendMessageToParent({
            "message": "getUser",
        });
        setFrameLoadingState();
    }
    var checkEverytingLoadedInterval = setInterval(checkEverytingLoaded, 100);
    function sendMessageToParent(message) {
        window.top.postMessage(message, '*');
    }
    function submitSuccessHandler(message, entity) {
        response = JSON.parse(message.data.response);
        var extraMessage = "";
        switch (entity) {
            case "candidate":
                candidate = response.data.candidate;
                if ((($("#contact_link.tablinks.active").length == 1 || $("#company_link.tablinks.active").length == 1) && entity == 'candidate')) {
                    break;
                }
                $('.assign-to-job-foolowup-link').removeClass("d-none").addClass("d-block");
                $('.add_task_followup_link').attr("data-entity", "candidate");
                $('.add_appointment_followup_link').attr("data-entity", "candidate");
                $('.rcrm-action-box .add_to_hot_list_followup_link').attr("data-entity", "candidate");
                document.getElementById('workHistoryHeader').style.display = 'none';
                document.getElementById('educationHistoryHeader').style.display = 'none';
                document.getElementById('workHistoryHeaderEmpty').style.display = 'block';
                document.getElementById('educationHistoryHeaderEmpty').style.display = 'block';
                break;
            case "company":
                $('.assign-to-job-foolowup-link').removeClass("d-block").addClass("d-none");
                if (response.action_name.indexOf('Update Duplicate Contact') != -1) {
                    if (response.action_name == 'Update Duplicate Contact And No Company Created') {
                        stopProcessing('#' + entity + '_form button[type=submit]');
                        entity = 'contact';
                        contact = response.data.contact;
                        response.data.duplicate_updated = true;
                        extraMessage = response.message;
                        $('.add_task_followup_link').attr("data-entity", "contact");
                        $('.add_appointment_followup_link').attr("data-entity", "contact");
                        $('.rcrm-action-box .add_to_hot_list_followup_link').attr("data-entity", "contact");
                    } else {
                        company = response.data.company;
                        $('.add_task_followup_link').attr("data-entity", "company");
                        $('.add_appointment_followup_link').attr("data-entity", "company");
                        $('.rcrm-action-box .add_to_hot_list_followup_link').attr("data-entity", "company");
                    }
                } else if (response.action_name == 'Duplicate Company Updated') {
                    stopProcessing('#' + entity + '_form button[type=submit]');
                    entity = 'company';
                    company = response.data.company;
                    response.data.duplicate_updated = true;
                    extraMessage = response.message;
                    $('.add_task_followup_link').attr("data-entity", "company");
                    $('.add_appointment_followup_link').attr("data-entity", "company");
                    $('.rcrm-action-box .add_to_hot_list_followup_link').attr("data-entity", "company");
                } else if (response.action_name == 'Updated Company And Contact') {
                    stopProcessing('#' + entity + '_form button[type=submit]');
                    entity = 'company';
                    company = response.data.company;
                    response.data.duplicate_updated = true;
                    extraMessage = response.message;
                    $('.add_task_followup_link').attr("data-entity", "company");
                    $('.add_appointment_followup_link').attr("data-entity", "company");
                    $('.rcrm-action-box .add_to_hot_list_followup_link').attr("data-entity", "company");
                } else {
                    company = response.data.company;
                    $('.add_task_followup_link').attr("data-entity", "company");
                    $('.add_appointment_followup_link').attr("data-entity", "company");
                    $('.rcrm-action-box .add_to_hot_list_followup_link').attr("data-entity", "company");
                }
                break;
            case "contact":
                contact = response.data.contact;
                if (($("#candidate_link.tablinks.active").length == 1 && entity == 'contact')) {
                    break;
                }
                $('.assign-to-job-foolowup-link').removeClass("d-block").addClass("d-none");
                $('.add_task_followup_link').attr("data-entity", "contact");
                $('.add_appointment_followup_link').attr("data-entity", "contact");
                $('.rcrm-action-box .add_to_hot_list_followup_link').attr("data-entity", "contact");
                document.getElementById('workHistoryHeader').style.display = 'none';
                document.getElementById('educationHistoryHeader').style.display = 'none';
                document.getElementById('workHistoryHeaderEmpty').style.display = 'block';
                document.getElementById('educationHistoryHeaderEmpty').style.display = 'block';

                break;
            default:
                break;
        }
        if (response.status == "success") {
            submitedEntity = entity;
            if (!(($("#candidate_link.tablinks.active").length == 1 && entity == 'contact') || (($("#contact_link.tablinks.active").length == 1 || $("#company_link.tablinks.active").length == 1) && entity == 'candidate'))) {
                $('.rcrm-message-partial').each(function (index, element) { $(element).toggleClass('d-none', true).toggleClass('d-block', false) });
                showSection('submit-ext', function () {
                    $('#rcrm-success-' + entity + '-message').toggleClass('d-block', true).toggleClass('d-none', false);
                    // Initialization of follow up section tools
                    fnsetUpFollowupControls();
                });
                var profileLink = BASE_APP_URL + '/' + entity + '/' + response.data[entity].slug
                $('.details-link').attr('href', profileLink);
                var name = entity == 'contact' ? response.data[entity].name : response.data[entity][entity + 'name'];
                $('.success-name').text(name.trim());
                $('#rcrm-success-' + entity + '-added-updated').text('Has Been Added To ');

                if (response.data.duplicate_updated !== undefined && response.data.duplicate_updated == true) {
                    $('#rcrm-success-' + entity + '-message .details-link .success-name').text(name);
                    $('#rcrm-success-' + entity + '-added-updated').html("'s Profile Was <b>Updated</b> On ");
                }
                $('.extramessage').remove();
                if (extraMessage) {
                    $('#rcrm-success-' + entity + '-message .rcrm-success-body').html($('#rcrm-success-' + entity + '-message .rcrm-success-body').html() + '<div class="rcrm-info-message m-t-5 m-b-0 extramessage" role="alert">' + extraMessage + '</div>');
                }
            }
        }
        loadFolloUpActionsData(entity);
        stopProcessing('#' + entity + '_form button[type=submit]');
        const parentElements = document.querySelectorAll('.rcrm-fixed-bottom');
        parentElements.forEach(parent => {
            const targetElement = parent.querySelector('.rcrm-success-button');
            //  Remove "d-none" class from target element if it exists
            if (targetElement) {
                targetElement.classList.remove('d-none');
            }
        });
    }
    function setHotListSelectOptions(entity) {
        var options = '';
        if (hotlists[entity] != undefined) {
            hotlists[entity].forEach(function (hotlist) {
                options += '<option value =""></option><option value = ' + hotlist.id + '>' + hotlist.name + '</option>';
            });
        }
        $('#add_to_hot_list_select').empty().append(options);
        $('#add_to_hot_list_select').trigger("change");
        if (EventListnsers.indexOf("#btn_add_to_hot_list") == -1 && ("#btn_add_to_hot_list").length > 0) {
            $("#btn_add_to_hot_list").on("click", function () {
                // Either selscted hotlist or new hostlist
                if ($('#add_new_hotlist').val() || ($('#add_to_hot_list_select').val() && $('#add_to_hot_list_select').val().length)) {
                    addToHotList($('#add_to_hot_list_followup').attr('data-entity'));
                }
                else {
                    toastr.info("At Least one Hotlist Must Be Selected")
                }
            });
            EventListnsers.push("#btn_add_to_hot_list");
        }
    }
    function assignToJob() {
        setIsProcessing('#btn_assign_to_job');
        var selectedJobs = $(jobSelectId).val();
        if (selectedJobs.length) {
            jobs.forEach(job => {
                job.checked = false;
                if (selectedJobs.indexOf(job.id.toString()) != -1) {
                    job.checked = true;
                }
            });

            let jobsForResponse = jobs.filter((job) => {
                if (selectedJobs.indexOf(job.id.toString()) != -1) {
                    return true;
                }
                return false;
            });

            sendMessageToParent({ "message": "assignCandidateToJob", "payload": { "jobs": jobsForResponse, "candidates": [candidate.id], "selectedJobs": selectedJobs } });
        }
    }
    function sendEmailTrigger(eventMessage, trigger, triggervalue, entity, relatedtype, jobs = null, originalResponse, failedRecords = null, action = 'bulk', bypasNylas = false) {
        sendMessageToParent({
            "message": eventMessage,
            "originalResponse": originalResponse,
            "payload": {
                trigger: trigger,
                triggervalue: triggervalue,
                entity: entity,
                relatedtype: relatedtype,
                action: action,
                jobs: jobs,
                failedrecords: failedRecords,
                bypassNylas: true
            }
        });
    }
    function setEmailTriggerInputWhileChangeInHiringStage(stageId) {
        if (hiringStageTriggers.length > 0) {
            const trigger = hiringStageTriggers.find((trigger) => {
                return trigger.value == stageId;
            });

            if (trigger) {
                $('#update_hiring_stage_tooltip #trigger_hiring_update_email_div').show();
                $('#update_hiring_stage_tooltip #trigger_hiring_update_email').show();
                $('#update_hiring_stage_tooltip #trigger_hiring_update_email').prop('checked', true);
                $('#update_hiring_stage_tooltip #trigger_hiring_update_email_label').html('Send ' + trigger.name + ' Email');
            } else {
                $('#update_hiring_stage_tooltip #trigger_hiring_update_email_div').hide();
                $('#update_hiring_stage_tooltip #trigger_hiring_update_email').hide();
            }
        } else {
            $('#update_hiring_stage_tooltip #trigger_hiring_update_email_div').hide();
            $('#update_hiring_stage_tooltip #trigger_hiring_update_email').hide();
        }
    }
    function addToHotList(entity) {
        setIsProcessing('#btn_add_to_hot_list');
        var selectedHotlist = $("#add_to_hot_list_select").val();
        var payload = {};
        payload.selectedrows = [];
        if (selectedHotlist && selectedHotlist != "") {
            hotlists[entity].forEach(hotlist => {
                if (selectedHotlist == hotlist.id) {
                    payload["entity_name"] = entity == 'company' ? 'companies' : entity + 's';
                    payload.selectedrows.push(window[entity].id);
                    payload.shared = hotlist.shared == "1" ? true : false;
                    payload.name = hotlist.name;
                }
            });
        } else {
            var newHOtlist = $("#add_new_hotlist").val()
            if (newHOtlist && newHOtlist != "") {
                payload["entity_name"] = entity == 'company' ? 'companies' : entity + 's';
                payload.selectedrows.push(window[entity].id);
                payload.shared = $("#add_new_hotlist_shared")[0].checked ? true : false;
                payload.name = newHOtlist;
            }
        }
        sendMessageToParent({ "message": "addToHotList", "payload": payload, "entity": entity });
    }
    function reset_appointment_form() {
        appointment = {};
        $('#appointment_title').val('');
        $('#appointment_address').val('');
        $('#appointment_description').trigger('reset');
        $('#appointment_starttime').val('50400');
        $('#appointment_endtime').val('52200');
        $('#appointment_reminderdate').val('1800');
        selectedMeetingType = meetingTypeList.find(meetingType => meetingType.default == 1)?.id || 0;
        updateSelectedMeetingType();
        if(flagForCalendarInvite){
        $('#appointment_no_cal_invites')?.prop('checked', false);
        }
        initializeGmeet(flagForGoogleMeet, conferenceData, flagForTeamMeet, flagForZoomMeet);
        fnsetUpFollowupControls('#add_appointment_followup');
    }
    function reset_task_form() {
        appointment = {};
        $('#task_title').val('');
        $('#task_description').trigger('reset');
        $('#task_starttime').val('50400');
        $('#task_reminderdate').val('1800');
        selectedTaskType = taskTypeList.find(taskType => taskType.default == 1)?.id || 0;
        updateSelectedTaskType(); 
        fnsetUpFollowupControls('#add_task_followup');
    }
    function fnsetUpFollowupControls(section = "", presetEntity = {}, reinit = false) {
        var today = new Date();
        today = today.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
        var _section = section ? section + ' ' : '';
        $(_section + '.rcrm-datepicker').each(function () {
            $(this).datepicker({
                minDate: new Date(),
                autoClose: true,
                dateFormat: 'M dd, yy',
            })
            $(this).data('datepicker')
            $(this).val(today);
        })
        if (Object.keys(presetEntity).length < 1) {
            presetEntity[submitedEntity] = window[submitedEntity];
        }
        sendMessageToParent({ "message": 'setUpFollowupControls', "presetEntity": presetEntity, "user": user, "section": section, 'reinit': reinit });
    }

    function get_entity_link(entity_type) {
        switch (entity_type) {
            case '1': //Account
                return 'account-management';
                break;
            case '2': //Contact
                return 'contact';
                break;
            case '3': // Company
                return 'company';
                break;
            case '4': // Job
                return 'job';
                break;
            case '5': // Candidate
                return 'candidate';
                break;
            case '6': // User
                return 'user-list';
                break;
            case '7': // Appointment
                return 'task-and-appointments';
                break;
            case '8': // CallLog
                return 'mailbox/calllog';
                break;
            case '9': // Email
                return 'mailbox/inbox';
                break;
            case '10': // Email
                return 'mailbox/sent';
                break;
            default:
                return '';
                break;
        }
    }
    var groupBy = function (arr, criteria) {
        return arr.reduce(function (obj, item) {

            // Check if the criteria is a function to run on the item or a property of it
            var key = typeof criteria === 'function' ? criteria(item) : item[criteria];

            // If the key doesn't exist yet, create it
            if (!obj.hasOwnProperty(key)) {
                obj[key] = [];
            }

            // Push the value to the object
            obj[key].push(item);

            // Return the object to the next item in the loop
            return obj;

        }, {});
    };
    function populateNotifications(_notifications) {
        if (localStorage.last_notification_id == undefined) {
            localStorage.last_notification_id = 0;
        }
        $('.notification-count-span').toggleClass('d-none', true).toggleClass('d-block', false);
        _notifications.forEach(notification => {
            if (!notification_ids.includes(notification.id)) {
                notifications.unshift(notification);
                notification_ids.push(notification.id);
                notification.id = parseInt(notification.id);
                if (notification.id > localStorage.last_notification_id) {
                    localStorage.new_notification_count = parseInt(localStorage.new_notification_count) + 1;
                    localStorage.last_notification_id = notification.id;
                }
                localStorage.last_notification_id_2 = notification.id
                //document.cookie = "last_notification_id=" + notification.id + ';path=/';
            }
        });
        if (localStorage.new_notification_count > 0) {
            $('.notification-count-span').text(localStorage.new_notification_count);
            $('.notification-count-span').toggleClass('d-none', false).toggleClass('d-block', true);
        }
    }
    function setNotificationUi() {
        if (notifications.length < 1) {
            return;
        }
        var notificationUi = '';
        clubbedNotifications = groupBy(notifications, 'notificationtitle');
        Object.values(clubbedNotifications).forEach(function (notification) {
            notificationObj = notification[notification.length - 1];
            if (notification.length == 1) {
                var n_icon = notificationObj.notificationicon ? notificationObj.notificationicon : '';
                var n_title =
                    `<a id="sTest-emailSettingsInAppBtn"
                    class="dropdown-item" target="_blank" href="`+ BASE_APP_URL + `/` + get_entity_link(notificationObj.relatedtotype) + `/` + notificationObj.relatedto + `">
                    <h5>`+ notificationObj.notificationtitle + `</h5>
                 </a>`;
            } else {
                var n_title =
                    `<h5>` + notificationObj.notificationtitle + `</h5>`;
            }
            if (notification.length > 1) {
                var groupedNotifications = notification.reverse();
                var groupedNotificationUi = ``;
                var n_icon = '';
                groupedNotifications.forEach(groupedNotification => {
                    n_icon = groupedNotification.notificationicon ? groupedNotification.notificationicon : '';
                    groupedNotificationUi +=
                        `<li>
                        <a  target="_blank" href="`+ BASE_APP_URL + `/` + get_entity_link(groupedNotification.relatedtotype) + `/` + groupedNotification.relatedto + `" class="tooltip"  title="` + groupedNotification.notification + `">
                            <div id="sTest-emailSettingsInAppBtn" class="notification-avatar-list">
                            `+ groupedNotification.notificationicon + `
                            </div>
                        </a>
                    </li>`;
                });
                var n_message =
                    `<ul class="noti-avatar-list">` + groupedNotificationUi + `</ul>`;
            } else {
                var n_message = `<p>` + notificationObj.notification + `</p>`;
            }
            notificationUi +=
                `<li class="notification-list-item">
                <div class="media">
                    <div class="media-left mr-10">` + n_icon + `
                    </div>
                    <div class="media-content">`
                + n_title +
                ``
                + n_message +
                `</div>
                </div>
            </li>`;
        });
        $('#notificationsList').html(notificationUi);
        $('.tooltip').tooltipster({
            theme: 'tooltipster-shadow',
            animation: 'fade',
            interactive: true,
            delay: 1500
        });
    }
    function finishParsing(reset) {
        var profileParsed = false;
        if ((profile.email != undefined && profile.email.value) ||
            (profile.phone != undefined && profile.phone.value) ||
            (profile.linkedin != undefined && profile.linkedin.value) ||
            (profile.clinkedin != undefined && profile.clinkedin.value) ||
            (profile.website != undefined && profile.website.value) ||
            (profileXing != null)) {
            profileParsed = true;
        }

        if (profile.website != undefined && profile.website.value) {
            company['website'] = profile.website.value;
        }else if(profile.website == undefined){
            company['website'] = '';
            company['slug'] = undefined;
        }
        if (profile.clinkedin != undefined && profile.clinkedin.value) {
            company['profilelinkedin'] = profile.clinkedin.value;
            if(companyColumns['profilelinkedin']?.show_on_extension == true){
                fieldsVisibleOnExtensionForCompany['profilelinkedin'] = profile.clinkedin.value;
            }
        }
        if (profile.cname != undefined && profile.cname.value) {
            company['companyname'] = profile.cname.value;
        }

        updateProfileUI(reset);
        if (profileParsed) {
            fetchCandidateExtraFields();
            checkDuplicate();
        }
        setFrameLoadedState();
    }

    //This is to check email verified, account limit and access control
    function checkAccess(entity) {
        let limitMessage = "You have exhausted the limit. Please upgrade to the premium plan to add more records.";
        let accessMessage = `Hey! You don't have permission to perform this action on your \"${user.role}\" user role. To get permission to perform this action, please contact one of your Admins and ask them to change your user role.`;

        //Check for is email is verified or not
        if (user.verifiedemail === 0) {
            toastr.error("Verify Your Email To Get Started");
            return false;
        }

        // Action called from Candidate Form
        if (entity === 'candidates') {
            if (user.can_add_candidate === 0 || !user.can_add_candidate) {
                toastr.error(limitMessage);
                return false;
            }
            if (user.user_access_control[entity].canadd === 'No') {
                toastr.error(accessMessage);
                return false;
            }
            if (candidate.ownerid) {
                if (!checkEditAccess(entity, candidate.ownerid)) {
                    toastr.error(accessMessage);
                    return false;
                }
            }
        }

        // Action called from Contact Form
        if (entity === 'contacts') {
            if (user.can_add_contact === 0 || !user.can_add_contact) {
                toastr.error(limitMessage);
                return false;
            }
            if (user.user_access_control[entity].canadd === 'No') {
                toastr.error(accessMessage);
                return false;
            }
            if (contact.ownerid) {
                if (!checkEditAccess(entity, contact.ownerid)) {
                    toastr.error(accessMessage);
                    return false;
                }
            }
        }

        // Action called from Company Form
        if (entity === 'companies') {
            if (user.can_add_company === 0 || user.can_add_contact === 0
                || !user.can_add_company || !user.can_add_contact) {
                toastr.error(limitMessage);
                return false;
            }
            if (user.user_access_control[entity].canadd === 'No') {
                toastr.error(accessMessage);
                return false;
            }
            if (company.ownerid) {
                if (!checkEditAccess(entity, company.ownerid)) {
                    toastr.error(accessMessage);
                    return false;
                }
            }
        }
        return true;
    }

    function checkEditAccess(entity, ownerid) {
        if (user.user_access_control[entity].canedit == 'Team Only') {
            if (user.userids) {
                return user.userids.split(',').includes(JSON.stringify(ownerid));
            } else if (ownerid == user.id) {
                return true;
            }
        } else if (user.user_access_control[entity].canedit == 'Owned Only') {
            if (ownerid == user.id) {
                return true;
            }
        } else if (user.user_access_control[entity].canedit == 'Everything') {
            return true;
        }
        return false
    }

    function fetchCandidateExtraFields(){
        sendMessageToParent({
            "message": "fetchCandidateFieldsData",
        });
    }

    function getGenderData(){
        sendMessageToParent({
            "message": "getGenderData",
        });
    }

    function getCurrencyType(){
        sendMessageToParent({
            "message": "getCurrencyType",
        });
    }


    function getUserDate() {
        // Create a new Date object to represent the current date and time
        const currentDate = new Date();

        // Define options for formatting the date
        const options = {
        year: 'numeric', // Numeric year (e.g., 2024)
        month: 'short', // Short month name (e.g., 'Apr')
        day: '2-digit' // Two-digit day of the month (e.g., '02')
        };

        // Format the date as "Apr 2, 2024"
        const formattedDate = currentDate.toLocaleDateString('en-US', options);

        return formattedDate;
    }

    function checkDuplicate() {
        // Removing data from local storage
        removeItemsFromLocalStorageByPattern("jobs_assign_ids");
        createCandidateRecord(false);
        createContactRecord(false);
        $('.exists-message-container').toggleClass('slidedown', true).toggleClass('d-block', true).toggleClass('d-none', false);
        $('.exists-message-container').children('div').toggleClass('d-block', false).toggleClass('d-none', true);
        $('.exists-message-container .exists-loading').toggleClass('d-block', true).toggleClass('d-none', false);
        $('.form-container').toggleClass('slidedown', true);
        var name = candidate.firstname + ' ' + candidate.lastname;
        var cname = company.companyname;

        if ($("#profilelinkedin").length && $("#profilelinkedin").val().trim() !== "") {
            candidate.profilelinkedin = $("#profilelinkedin").val().trim();
        }
        if ($("#profilexing").length && $("#profilexing").val().trim() !== "") {
            candidate.profilexing = $("#profilexing").val().trim();
        }
        if ($("#profilelinkedinForContact").length && $("#profilelinkedinForContact").val().trim() !== "") {
            contact.profilelinkedin = $("#profilelinkedinForContact").val().trim();
        }
        if ($("#profilexingForContact").length && $("#profilexingForContact").val().trim() !== "") {
            contact.profilexing = $("#profilexingForContact").val().trim();
        }
        if ($("#profilelinkedinForCompany").length && $("#profilelinkedinForCompany").val().trim() !== "") {
            company.profilelinkedin = $("#profilelinkedinForCompany").val().trim();
        }
        if ($("#company_website").length && $("#company_website").val().trim() !== "") {
            company.website = $("#company_website").val().trim();
        }
        
        $('.exists-message-container .exists-name').text(name != undefined && name != '' ? name : '');
        $('.exists-message-container .exists-cname').text(cname != undefined && cname != '' ? cname : '');
        sendMessageToParent({
            "message": "checkDuplicate",
            "payload": {
                "candidate": candidate,
                "contact": contact,
                "company": company
            }
        });
    }


    function checkCandidateRequiredFields(extraData) {
        if (base64Text) {
            extraData.base64Profile = base64Text;
        }


        // validation on default fields of candidate -> resume and skill
        if ($('#candidate_resume')[0].files.length == 0 && candidateColumns.resumefilename.required_on_form == true) {
            // check if the checkbox of id save_linked_in_profile_pdf is checked or not 
            const isChecked = document.getElementById('save_linked_in_profile_pdf').checked;

            if (isChecked == false){
                console.log('Is checked is false');
                // get element by ID resumefilenameRequiredErrorMessage and scroll it into view
                document.getElementById('resumefilenameRequiredErrorMessage').style.display = 'block';
                document.getElementById('resumefilenameRequiredErrorMessage').scrollIntoView({ behavior: 'smooth', block: 'center' });
                stopProcessing('#candidate_form button[type=submit]');
                return true;  
            }
            if (extraData.base64Profile == '' || extraData.base64Profile == undefined || extraData.base64Profile == null) {
                console.log('Resume is required');
                // get element by ID resumefilenameRequiredErrorMessage and scroll it into view
                document.getElementById('resumefilenameRequiredErrorMessage').style.display = 'block';
                document.getElementById('resumefilenameRequiredErrorMessage').scrollIntoView({ behavior: 'smooth', block: 'center' });
                stopProcessing('#candidate_form button[type=submit]');
                return true;   
            }
        }
        else {
            document.getElementById('resumefilenameRequiredErrorMessage').style.display = 'none';
        }

        if ($('#candidate_skill').val().length == 0 && candidateColumns.skill.required_on_form == true) {
            // get element by ID skillRequiredErrorMessage and scroll it into view
            document.getElementById('skillRequiredErrorMessage').style.display = 'block';
            document.getElementById('skillRequiredErrorMessage').scrollIntoView({ behavior: 'smooth', block: 'center' });
            stopProcessing('#candidate_form button[type=submit]');
            return true;
        }
        else {
            document.getElementById('skillRequiredErrorMessage').style.display = 'none';
        }


        // check for dynamic fields for candidate
        if (candidateColumns != undefined) {
            let requiredFieldsNotFilled = false;
            for (let candidateFieldKey in candidateColumns) {
                if (candidateColumns[candidateFieldKey]?.show_on_extension && candidateColumns[candidateFieldKey]?.required_on_form == true && !defaultExtensionFields.includes(candidateFieldKey)) {
                    if (candidateDefaultDataFields.includes(candidateFieldKey)) {
                        continue;
                    }
                    else if (candidateFieldKey == 'resumefilename' || candidateFieldKey == 'skill') {
                        continue;
                    }
                    else if (candidateFieldKey == 'languageskills') {
                        let listOfLanguageValues = [];
                        for (const key in selectedValues) {
                            let stringOfLanguageValues = '';
                            stringOfLanguageValues += selectedValues[key]['value1'];
                            stringOfLanguageValues += '(';
                            stringOfLanguageValues += selectedValues[key]['value2'];
                            stringOfLanguageValues += ')';
                            listOfLanguageValues.push(stringOfLanguageValues);
                        }
                        if (listOfLanguageValues.length == 0) {
                            const errorElement = document.getElementById(`languageskillsLabelId`);
                            const errorMessage = document.getElementById(`languageskillsErrorMessage`);
                            errorMessage.style.display = 'block';
                            requiredFieldsNotFilled = true;
                            console.log('required', candidateFieldKey);
                            if (errorElement) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                            }
                        }
                    }
                    else if (candidateColumns[candidateFieldKey]['type'] == 'checkbox' || candidateFieldKey == 'willingtorelocate') {
                        if (fieldsVisibleOnExtension[candidateFieldKey] == undefined || fieldsVisibleOnExtension[candidateFieldKey] == null || fieldsVisibleOnExtension[candidateFieldKey] == '' || fieldsVisibleOnExtension[candidateFieldKey] == 0) {
                            const errorElement = document.getElementById(`${candidateFieldKey}LabelId`);
                            const errorMessage = document.getElementById(`${candidateFieldKey}ErrorMessage`);
                            if (errorElement && errorMessage) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                                requiredFieldsNotFilled = true;
                                console.log('required', candidateFieldKey);
                            }
                        }
                    }   
                    else if (fieldsVisibleOnExtension[candidateFieldKey] == undefined || fieldsVisibleOnExtension[candidateFieldKey] == null || fieldsVisibleOnExtension[candidateFieldKey] == '') {
                        const errorElement = document.getElementById(`${candidateFieldKey}LabelId`);
                        const errorMessage = document.getElementById(`${candidateFieldKey}ErrorMessage`);
                        if (errorElement && errorMessage) {
                            errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            errorMessage.style.display = 'block';
                            requiredFieldsNotFilled = true;
                            console.log('required', candidateFieldKey);
                        }
                    }
                }
            }
            if (requiredFieldsNotFilled) {
                stopProcessing('#candidate_form button[type=submit]');
                return true;
            }
            return false;
        }
        return false;
    }

    function createCandidateRecord(submit = true, createContact = false, contact = null, prefilledData = true, companySlug = null) {
        candidateSlug = null;
        candidate = {};
        var formData = $("#candidate_form").serializeArray();
        // console.log(formData, 'formData');
        var extraData = {};
        var addTodCandidate = true;

        if ($('#candidate_resume')[0].files.length) {
            candidate.resume = $('#candidate_resume')[0].files[0];
        }

        // console.log(base64Text, 'base64Text');

        if ($("#candidate_link.tablinks.active").length == 1 && submit == true && enforceRequiredFieldsOnExtension?.candidate == true && flagForEnforceRequiredFieldsOnExtension) {
            const isRequiredFieldsNotFilled = checkCandidateRequiredFields(extraData);
            if (isRequiredFieldsNotFilled) {
                return;
            }
        }

        if (submit == true) {
            setIsProcessing('#candidate_form button[type=submit]');
        }

        if (candidateColumns['profilelinkedin']?.show_on_extension == true && submit &&
            currentUrlObj?.href?.includes('linkedin.com') &&
            (fieldsVisibleOnExtension['profilelinkedin'] == undefined
                || fieldsVisibleOnExtension['profilelinkedin'] == null
                || fieldsVisibleOnExtension['profilelinkedin'] == '')) {

            fieldsVisibleOnExtension['profilelinkedin'] = currentUrlObj.href?.split('?')[0]?.replace(/\/$/, '');
        }
        if (candidateColumns['profilexing']?.show_on_extension == true && submit &&
            currentUrlObj?.href?.includes('xing.com') &&
            (fieldsVisibleOnExtension['profilexing'] == undefined
                || fieldsVisibleOnExtension['profilexing'] == null
                || fieldsVisibleOnExtension['profilexing'] == '')) {

            fieldsVisibleOnExtension['profilexing'] = profileXing;
        }


        if (contactColumns['profilelinkedin']?.show_on_extension == true && submit &&
            currentUrlObj?.href?.includes('linkedin.com') &&
            (fieldsVisibleOnExtensionForContact['profilelinkedin'] == undefined
                || fieldsVisibleOnExtensionForContact['profilelinkedin'] == null
                || fieldsVisibleOnExtensionForContact['profilelinkedin'] == '')) {

            fieldsVisibleOnExtensionForContact['profilelinkedin'] = currentUrlObj.href?.split('?')[0]?.replace(/\/$/, '');
        }

        if (contactColumns['profilexing']?.show_on_extension == true && submit &&
            currentUrlObj?.href?.includes('xing.com') &&
            (fieldsVisibleOnExtensionForContact['profilexing'] == undefined
                || fieldsVisibleOnExtensionForContact['profilexing'] == null
                || fieldsVisibleOnExtensionForContact['profilexing'] == '')) {

            fieldsVisibleOnExtensionForContact['profilexing'] = profileXing;
        }

        Object.keys(formData).forEach(key => {
            addTodCandidate = true
            if (formData[key].name == "pdf_version_tag") {
                return
            }
            var _key = formData[key].name.substr(formData[key].name.indexOf("candidate_") + 10);
            if (formData[key].name.indexOf("extra_data_cand_") > -1) {
                addTodCandidate = false;
                switch (formData[key].name) {
                    case 'extra_data_cand_notes':
                        extraData.note = formData[key].value.trim();
                        extraData.collaboratorUserIds = collaboratorCandidateNotesUserIds;
                        extraData.collaboratorTeamIds = collaboratorCandidateNotesTeamIds;
                        if(flagForNoteTypeOnExtension) {
                            extraData.noteTypeId = selectedCandidateNoteType;
                        }
                        break;
                    case 'extra_data_cand_base64_profile':
                        extraData.base64Profile = formData[key].value.trim();
                        break;
                    default:
                        break;
                }

                delete formData[key];
            }
            if (addTodCandidate) {
                switch (_key) {
                    case 'skill':
                        if ($('#candidate_skill').val().length) {
                            candidate[_key] = JSON.parse($('#candidate_skill').val()).map(c => c.value).join(',')
                        }
                        break;

                    default:
                        if (!_key.startsWith('n')){
                            candidate[_key] = formData[key].value;
                            break;
                        }
                }
            }
        });

        var profilepic = $('#candidate_profilepic').attr('src');
        if (profilepic != undefined && profilepic !== '' && profilepic.indexOf('chrome-extension:') == -1) {
            candidate.profilepic = profilepic;
        }
        // candidate.availablefrom = Math.floor(Date.now() / 1000);
        candidate.currencyid = user.currencyid;

        // Checking if domain is Xing
        if (Domains[document.domain]?.name && (Domains[document.domain]?.name).toString() === 'Xing') {
            candidate.profilexing = profileXing ? profileXing : currentUrlObj.href;
        }
        candidate.sourceadded = '{"source": "Chrome Extensions", "referrer": ' + currentUrlObj.href + '}';
        if (!candidate.id) {
            if (Domains[document.domain] && Domains[document.domain].name) {
                candidate.source = `${Domains[document.domain].name} (Added by ${user.name})`;
            }
        }
        if (fullResumeText) {
            candidate.resumetext = fullResumeText;
        }
        if (base64Text) {
            extraData.base64Profile = base64Text;
        }

        if (candidateAddress) {
            candidate.address = candidateAddress;
        }
        if (experianceInYear && experianceInYear !== 99) {
            candidate.workexpyr = experianceInYear;
        }
        if (specialization) {
            candidate.specialization = specialization;
        }
        // adding 'listOfEducation' & 'listOfExperience' to candidate object
        if (flagForWorkAndEducation){
            candidate.educationhistory = listOfEducation;
            candidate.workhistory = listOfExperience;
        }

        //Checking if user is opted for saveAsCandidate option
        if (extSettings.saveCandidate || extSettings.saveCandidateFromCompany) {
            //Assign values to candiate which is added on Contact Form
            if (contact) {
                candidate['firstname'] = contact['firstname'];
                candidate['lastname'] = contact['lastname'];
                candidate['position'] = contact['designation'];
                candidate['emailid'] = contact['email'];
                candidate['contactnumber'] = contact['contactnumber'];
                candidate['locality'] = contact['locality'];
            }
        }

        // 1. change currency value to its corresponding id 
        if (fieldsVisibleOnExtension['currencyid'] != undefined){
            currencyTypes.forEach((currency) => {
                if (currency.country == fieldsVisibleOnExtension['currencyid'][0]){
                    fieldsVisibleOnExtension['currencyid'] = currency.id;
                }
            });
        }

        // 2. dropdown value is saved as list. Change it to comma separated string 
        for (let i = 0; i < dropdownCustomFields.length; i++) {
            let fieldName = dropdownCustomFields[i];
            let fieldValues = fieldsVisibleOnExtension[fieldName];
            if (fieldValues != '' && Array.isArray(fieldValues)) {
                if (fieldValues.length == 0){
                    fieldsVisibleOnExtension[fieldName] = '';
                }
                else{
                    const commaSeparatedString = fieldValues[0];
                    fieldsVisibleOnExtension[fieldName] = commaSeparatedString;
                }
            }
        }

        // 3. convert gender value to its id 
        if (fieldsVisibleOnExtension['genderid'] != undefined){
            genderData.forEach((gender) => {
                if (gender.label == fieldsVisibleOnExtension['genderid'][0]){
                    fieldsVisibleOnExtension['genderid'] = gender.id;
                }
            });
        }

        if (fieldsVisibleOnExtension['workexpyr'] != undefined){
            if (fieldsVisibleOnExtension['workexpyr'] == '0 Year'){
                fieldsVisibleOnExtension['workexpyr'] = 0;
            }
            else {
                candidateColumns['workexpyr']['data'].forEach((workexp) => {
                    if (workexp.label == fieldsVisibleOnExtension['workexpyr'][0]){
                        fieldsVisibleOnExtension['workexpyr'] = workexp.id;
                    }
                });
            }
        }

        if (fieldsVisibleOnExtension['relevantexperience'] != undefined){
            if (fieldsVisibleOnExtension['relevantexperience'] == '0 Year'){
                fieldsVisibleOnExtension['relevantexperience'] = 0;
            }
            else {
                candidateColumns['relevantexperience']['data'].forEach((workexp) => {
                    if (workexp.label == fieldsVisibleOnExtension['relevantexperience'][0]){
                        fieldsVisibleOnExtension['relevantexperience'] = workexp.id;
                    }
                });
            }
        }

        if (fieldsVisibleOnExtension['salarytype'] != undefined){
            candidateColumns['salarytype']['data'].forEach((saltype) => {
                if (saltype.label == fieldsVisibleOnExtension['salarytype'][0]){
                    fieldsVisibleOnExtension['salarytype'] = saltype.id;
                }
            });
        }

        // 4. convert multiselect values saved in list to comma separated string 
        for (let i = 0; i < multiselectCustomFields.length; i++) {
            let fieldName = multiselectCustomFields[i];
            let fieldValues = fieldsVisibleOnExtension[fieldName];
            if (fieldValues != '' && Array.isArray(fieldValues)){
                if (fieldValues.length == 0){
                    fieldsVisibleOnExtension[fieldName] = null;
                }
                else{
                    const commaSeparatedString = fieldValues.join(",");
                    fieldsVisibleOnExtension[fieldName] = commaSeparatedString;
                }
            }
        }

        // 5. language value is saved in "selectedValues" as an object of object. Change it to comma separated values and keep it inside the object 
        if (fieldsVisibleOnExtension['languageskills'] != undefined){
            let listOfLanguageValues = [];
            for (const key in selectedValues) {
                let stringOfLanguageValues = '';
                stringOfLanguageValues += selectedValues[key]['value1'];
                stringOfLanguageValues += '(';
                stringOfLanguageValues += selectedValues[key]['value2'];
                stringOfLanguageValues += ')';
                listOfLanguageValues.push(stringOfLanguageValues);
            }
            fieldsVisibleOnExtension['languageskills'] = listOfLanguageValues.join(',');
        }
        
        if (submit) {
            let payloadData = {};
            multiselectCustomFields = [];
            dropdownCustomFields = [];
            if(flagForCandidateWorkingAtACompany){
                candidate.lastorganisation = candidate.lastorganisation.trim();
            }
            if (flagForWorkAndEducation){
                payloadData = { "candidate": candidate, "extraData": extraData, "overrideData": extSettings.overrideData, "educationhistory": listOfEducation, "workhistory": listOfExperience };
                if (flagForShowOnExtension){
                    payloadData = { "candidate": candidate, "extraData": extraData, "overrideData": extSettings.overrideData, "educationhistory": listOfEducation, "workhistory": listOfExperience, "fieldsVisibleOnExtension": fieldsVisibleOnExtension, "fileTypeCustomFields": fileTypeCustomFields };
                }
            }
            else{
                payloadData = { "candidate": candidate, "extraData": extraData, "overrideData": extSettings.overrideData };
            }
            if(flagForCandidateWorkingAtACompany && company.slug == undefined && user.user_access_control['companies'].canadd === 'Yes' && companySlug == null){
                company = {};
                contact = {};
                var formData = $("#company_form").serializeArray();
                var addToObject = true;
                var companynote = "";
                Object.keys(formData).forEach(key => {
                    addToObject = true
                    var _key = formData[key].name.substr(formData[key].name.indexOf("company_") + 8);
                    if (formData[key].name == "extra_data_comp_notes") {
                        addToObject = false;
                        companynote = formData[key].value.trim();
                        delete formData[key];
                    }
                    if (addToObject) {
                        if (_key.indexOf('contact_') !== -1) {
                            contact[_key.substr(formData[key].name.indexOf("contact_"))] = formData[key].value;
                        } else {
                            company[_key] = formData[key].value;
                        }
                    }
                });
                var logo = $('#company_logo').attr('src');
                if (logo != undefined && logo !== '' && logo.indexOf('chrome-extension:') == -1) {
                    company.logo = logo;
                }
                // 4. convert multiselect values saved in list to comma separated string 
                for(let column in listofmultiselectcolumnForCompany){
                    let fieldKey = column;
                    let tagName = listofmultiselectcolumnForCompany[fieldKey];
                    let list = document.getElementById(tagName).getElementsByTagName('li');
                    let fieldValues = [];
                    for (let j = 0; j < list.length; j++) {
                        const valueUnderLItag = list[j].textContent;
                        const lengthOfvalue = valueUnderLItag.length;
                        fieldValues.push(valueUnderLItag.substring(0,lengthOfvalue-1));// remove X from the end
                    }
                    if (fieldValues != '' && Array.isArray(fieldValues)){
                        if (fieldValues.length == 0){
                            fieldsVisibleOnExtensionForCompany[fieldKey] = '';
                        }
                        else{
                            const commaSeparatedString = fieldValues.join(",");
                            fieldsVisibleOnExtensionForCompany[fieldKey] = commaSeparatedString;
                        }
                    }
                }
                for (let i = 0; i < dropdownCustomFieldsForCompany.length; i++) {
                    let fieldName = dropdownCustomFieldsForCompany[i];
                    let fieldValues = fieldsVisibleOnExtensionForCompany[fieldName];
                    if (fieldValues != '' && Array.isArray(fieldValues)) {
                        if (fieldValues.length == 0){
                            fieldsVisibleOnExtensionForCompany[fieldName] = '';
                        }
                        else{
                            const commaSeparatedString = fieldValues[0];
                            fieldsVisibleOnExtensionForCompany[fieldName] = commaSeparatedString;
                        }
                    }
                }
                multiselectCustomFieldsForCompany = [];
                dropdownCustomFieldsForCompany = [];
                multiselectCustomFieldsForCompanyContact = [];
                dropdownCustomFieldsForCompanyContact = [];
                company.companyname = candidate.lastorganisation;
                if(company.companyname != ""){
                    payloadData.company = company;
                }
            } else if(companySlug != null){
                payloadData.candidate.candidate_company_slug = companySlug;
            }
            
            if(candidate.firstname != "" || candidate.lastname != ""){
                sendMessageToParent({ "message": "candidateSubmit", "payload": payloadData });
            }
            if (extSettings.saveContact && createContact) {
                createContactRecord(true, false, candidate, false);
            }


            // manipulate the UI according to Candidate Email and Phone 
            if ((differentEmailValueForCandidate || differentPhoneValueForCandidate) && prefilledData && document.getElementById('containerCandidateSavedNote')) {
                document.getElementById('containerCandidateSavedNote').style.display = 'block';

                if (differentEmailValueForCandidate) {
                    countOfDuplicateFound += 1;
                    document.getElementById('updatedCandidateEmail').innerHTML = oldValueForEmailCandidate;
                }
                else {
                    document.getElementById('updatedCandidateEmail').style.display = 'none';
                }
    
                if (differentPhoneValueForCandidate) {
                    countOfDuplicateFound += 1;
                    document.getElementById('updatedCandidatePhone').innerHTML = oldValueForPhoneCandidate;
                }
                else {
                    document.getElementById('updatedCandidatePhone').style.display = 'none';
                }

                // attaching event listener
                const updateLink = document.getElementById('updateContactDetailsAfterSave');
                if (differentEmailValueForCandidate) {
                    const payload = {
                        id: holdCandidateObject['id'],
                        key: 'emailid',
                        tableFlag: 'candidate',
                        type: 'text',
                        value: oldValueForEmailCandidate
                    }

                    updateLink.addEventListener('click', function() {
                        updateEmailInline('candidate', payload);
                    });
                }
                
                if (differentPhoneValueForCandidate) {
                    const payload = {
                        id: holdCandidateObject['id'],
                        key: 'contactnumber',
                        tableFlag: 'candidate',
                        type: 'text',
                        value: oldValueForPhoneCandidate
                    }

                    updateLink.addEventListener('click', function() {
                        updatePhoneInline('candidate', payload);
                    });
                    
                }
            }


            let toDoNoteType;
            // iterate through noteTypeList and get the id where label is To Do 
            for(let i=0; i < noteTypeList.length; i++){
                if (noteTypeList[i].label == 'To Do'){
                    toDoNoteType = noteTypeList[i].id;
                    break;
                }
            }

            let relatedToName = candidate['firstname'] + ' ' + candidate['lastname'];


            const noteAPIPayload = {
                associated_data: {
                    "2": [],
                    "3": [],
                    "4": [],
                    "5": [],
                    "11": []
                },
                collaborator_team_ids: [],
                collaborator_user_ids: [],
                description: '',
                notetype: toDoNoteType,
                relatedto: duplicateCandidateSlug,
                relatedtocompany: null,
                relatedtoname: relatedToName,
                relatedtotypeid: 5,
                userInNote: {},
                defaultFromExtension: true
            }

            let noteDescription = 'New contact details found from LinkedIn as of ' + getUserDate() + ': <br /> \n';


            if (duplicateCandidateSlug != null && prefilledData && document.getElementById('containerCandidateSavedNote') && (differentEmailValueForCandidate || differentPhoneValueForCandidate)) {
                let oldNote = '--------------------------<br />\n';

                // we need to create a note for candidate
                if (differentEmailValueForCandidate) {
                    noteDescription += 'New Email: ' + oldValueForEmailCandidate + '<br /> \n';
                    oldNote += 'Old Email: ' + holdCandidateObject['emailid'] + '<br /> \n';
                }

                if (differentPhoneValueForCandidate) {
                    noteDescription += 'New Phone: ' + oldValueForPhoneCandidate + '<br /> \n';
                    oldNote += 'Old Phone: ' + holdCandidateObject['contactnumber'] + '<br /> \n';
                }

                noteDescription += oldNote;

                noteAPIPayload.description = noteDescription;

                sendMessageToParent({"message": "addDefaultNote", "payload": {noteAPIPayload: noteAPIPayload, 'entity': 'candidate'} });
            }

        }
    }

    function updateOrderingData(updatedOrder){
        sendMessageToParent({"message": "updateOrderingData", "payload": updatedOrder });
    }


    function checkContactDynamicFieldsRequired() {
        // check for dynamic fields for contact
        if (contactColumns != undefined) {
            let requiredFieldsNotFilled = false;
            for (let contactFieldKey in contactColumns) {
                if (contactColumns[contactFieldKey]?.show_on_extension && contactColumns[contactFieldKey]?.required_on_form == true && !defaultExtensionFieldsForContact.includes(contactFieldKey)) {
                    if (contactFieldKey == 'stageid') {
                        console.log('stageid', fieldsVisibleOnExtensionForContact[contactFieldKey]);
                        if (fieldsVisibleOnExtensionForContact[contactFieldKey] == undefined 
                            || fieldsVisibleOnExtensionForContact[contactFieldKey] == null 
                            || fieldsVisibleOnExtensionForContact[contactFieldKey] == ''
                            || fieldsVisibleOnExtensionForContact[contactFieldKey] == 0) {
                            const errorElement = document.getElementById(`${contactFieldKey}ContactLabelId`);
                            const errorMessage = document.getElementById(`${contactFieldKey}ContactErrorMessage`);
                            requiredFieldsNotFilled = true;

                            if (errorElement) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                            }
                        }
                    }
                    else if (contactColumns[contactFieldKey]['type'] == 'checkbox') {
                        if (fieldsVisibleOnExtensionForContact[contactFieldKey] == undefined 
                            || fieldsVisibleOnExtensionForContact[contactFieldKey] == null 
                            || fieldsVisibleOnExtensionForContact[contactFieldKey] == '' 
                            || fieldsVisibleOnExtensionForContact[contactFieldKey] == 0
                            || fieldsVisibleOnExtensionForContact[contactFieldKey] == '0') {

                            const errorElement = document.getElementById(`${contactFieldKey}ContactLabelId`);
                            const errorMessage = document.getElementById(`${contactFieldKey}ContactErrorMessage`);
                            if (errorElement && errorMessage) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                                requiredFieldsNotFilled = true;
                                console.log('required', contactFieldKey);
                            }
                        }
                    } 
                    else if (isEntityTypeField(contactColumns[contactFieldKey]['type'])){
                        let entity = getEntityByEntityTypeId(contactEntityTypeId);
                        let entityTypeOptionsContainerId = contactFieldKey + entity + 'ForEntityRecordOptions';
                        if(Object.keys(entityTypeFieldColumnValues[entityTypeOptionsContainerId]).length == 0){
                            const errorElement = document.getElementById(`${contactFieldKey}ContactLabelId`);
                            const errorMessage = document.getElementById(`${contactFieldKey}ContactErrorMessage`);
                            console.log('required', contactFieldKey);
                            if (errorElement && errorMessage) {
                                errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                errorMessage.style.display = 'block';
                                requiredFieldsNotFilled = true;
                            }
                        }
                    }   
                    else if (fieldsVisibleOnExtensionForContact[contactFieldKey] == undefined || fieldsVisibleOnExtensionForContact[contactFieldKey] == null || fieldsVisibleOnExtensionForContact[contactFieldKey] == '') {
                        const errorElement = document.getElementById(`${contactFieldKey}ContactLabelId`);
                        const errorMessage = document.getElementById(`${contactFieldKey}ContactErrorMessage`);
                        if (errorElement && errorMessage) {
                            errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            errorMessage.style.display = 'block';
                            requiredFieldsNotFilled = true;
                            console.log('required', contactFieldKey);
                        }
                    }
                }
            }
            if (requiredFieldsNotFilled) {
                stopProcessing('#contact_form button[type=submit]');
                return true;
            }
            return false;
        }
    }

    function updateEmailInline(entity, payload) {
        if (document.getElementById('containerCandidateSavedNote')) {
            document.getElementById('containerCandidateSavedNote').style.display = 'none';
        }
        sendMessageToParent({"message": "inlineEditEmail", "payload": payload });
    }


    function updatePhoneInline(entity, payload) {
        if (document.getElementById('containerCandidateSavedNote')) {
            document.getElementById('containerCandidateSavedNote').style.display = 'none';
        }
        sendMessageToParent({"message": "inlineEditPhone", "payload": payload });
    }



    function createContactRecord(submit = true, createCandidateFlag = false, candidate = null, prefilledData = true) {
        contactSlug = null;
        createCandidate = createCandidateFlag;
        contact = {};
        var formData = $("#contact_form").serializeArray();
        var extraData = {};
        var addTodContact = true;
        Object.keys(formData).forEach(key => {
            addTodContact = true
            var _key = formData[key].name.substr(formData[key].name.indexOf("contact_") + 8);
            if (_key == "name") {
                addTodContact = false;
                var nameParts = formData[key].value.trim().split(' ');
                if (nameParts.length > 1) {
                    contact['lastname'] = nameParts[nameParts.length - 1];
                    nameParts[nameParts.length - 1] = "*" + nameParts[nameParts.length - 1] + "*";
                    contact['firstname'] = nameParts.join(' ').replace(nameParts[nameParts.length - 1], '').trim();
                } else {
                    contact['firstname'] = nameParts[0];
                    contact['lastname'] = "";
                }
            }
            //Checking if user is opted for saveAsContact option
            if (extSettings.saveContact) {
                //Assign values to contact which is added on Candidate Form
                if (candidate) {
                    contact['firstname'] = candidate['firstname'];
                    contact['lastname'] = candidate['lastname'];
                    contact['designation'] = candidate['position'];
                    contact['email'] = candidate['emailid'];
                    contact['contactnumber'] = candidate['contactnumber'];
                    contact['locality'] = candidate['locality'];
                }
            }
            if (formData[key].name == "extra_data_cont_notes") {
                addTodContact = false;
                extraData = { 
                    "note": formData[key].value.trim(),
                    "collaboratorUserIds": collaboratorContactNotesUserIds,
                    "collaboratorTeamIds": collaboratorContactNotesTeamIds
                };
                if (flagForNoteTypeOnExtension) {
                    extraData.noteTypeId = selectedContactNoteType;
                }
                delete formData[key];
            }
            if (_key == "companyid") {
                addTodContact = false;
                var companyid = '';
                if (formData[key].value !== undefined && formData[key].value !== '') {
                    if ($("#companies_list option[value='" + $.escapeSelector(formData[key].value) + "']").length) {
                        companyid = $("#companies_list option[value='" + $.escapeSelector(formData[key].value) + "']")[0].dataset.id;
                    }
                    contact[_key] = companyid !== "" && companyid !== "" ? companyid : '';
                }
            }
            if (_key == "add_company") {
                addTodContact = false;
            }
            if (addTodContact) {
                contact[_key] = formData[key].value;
            }
        });
        var photo = $('#contact_photo').attr('src');
        if (photo != undefined && photo !== '' && photo.indexOf('chrome-extension:') == -1) {
            contact.photo = photo;
        }


        // check for dynamic fields for contact
        if ($("#contact_link.tablinks.active").length == 1 && submit == true && enforceRequiredFieldsOnExtension?.contact == true && flagForEnforceRequiredFieldsOnExtension) {
            const requiredFields = checkContactDynamicFieldsRequired();
            if (requiredFields) {
                return;
            }
        }
        
        if (candidateColumns['profilelinkedin']?.show_on_extension == true && submit &&
            currentUrlObj.href.includes('linkedin') &&
            (fieldsVisibleOnExtension['profilelinkedin'] == undefined
                || fieldsVisibleOnExtension['profilelinkedin'] == null
                || fieldsVisibleOnExtension['profilelinkedin'] == '')) {

            fieldsVisibleOnExtension['profilelinkedin'] = currentUrlObj.href?.split('?')[0]?.replace(/\/$/, '');
        }

        if (candidateColumns['profilexing']?.show_on_extension == true && submit &&
            currentUrlObj.href.includes('xing') &&
            (fieldsVisibleOnExtension['profilexing'] == undefined
                || fieldsVisibleOnExtension['profilexing'] == null
                || fieldsVisibleOnExtension['profilexing'] == '')) {

            fieldsVisibleOnExtension['profilexing'] = profileXing;
        }

        if (contactColumns['profilelinkedin']?.show_on_extension == true && submit &&
            currentUrlObj.href.includes('linkedin') &&
            (fieldsVisibleOnExtensionForContact['profilelinkedin'] == undefined
                || fieldsVisibleOnExtensionForContact['profilelinkedin'] == null
                || fieldsVisibleOnExtensionForContact['profilelinkedin'] == '')) {

            fieldsVisibleOnExtensionForContact['profilelinkedin'] = currentUrlObj.href?.split('?')[0]?.replace(/\/$/, '');
        }

        if (contactColumns['profilexing']?.show_on_extension == true && submit &&
            currentUrlObj.href.includes('xing') &&
            (fieldsVisibleOnExtensionForContact['profilexing'] == undefined
                || fieldsVisibleOnExtensionForContact['profilexing'] == null
                || fieldsVisibleOnExtensionForContact['profilexing'] == '')) {

            fieldsVisibleOnExtensionForContact['profilexing'] = profileXing;
        }

        // Checking if domain is Xing
        if (Domains[document.domain]?.name && (Domains[document.domain]?.name).toString() === 'Xing') {
            contact.profilexing = profileXing ? profileXing : currentUrlObj.href;
        }
        for (let i = 0; i < dropdownCustomFieldsForContact.length; i++) {
            let fieldName = dropdownCustomFieldsForContact[i];
            let fieldValues = fieldsVisibleOnExtensionForContact[fieldName];
            if (fieldValues != '' && Array.isArray(fieldValues)) {
                if (fieldValues.length == 0){
                    fieldsVisibleOnExtensionForContact[fieldName] = '';
                }
                else{
                    const commaSeparatedString = fieldValues[0];
                    fieldsVisibleOnExtensionForContact[fieldName] = commaSeparatedString;
                }
            }
        }
        //here we are building all multiselect field and string them in fieldvisibleonextension
        for(let column in listofmultiselectcolumnForContact){
            let fieldKey = column;
            let tagName = listofmultiselectcolumnForContact[fieldKey];
            let list = document.getElementById(tagName).getElementsByTagName('li');
            let fieldValues = [];
            for (let j = 0; j < list.length; j++) {
                const valueUnderLItag = list[j].textContent;
                const lengthOfvalue = valueUnderLItag.length;
                fieldValues.push(valueUnderLItag.substring(0,lengthOfvalue-1));// remove X from the end
            }
            if (fieldValues != '' && Array.isArray(fieldValues)){
                if (fieldValues.length == 0){
                    fieldsVisibleOnExtensionForContact[fieldKey] = '';
                }
                else{
                    const commaSeparatedString = fieldValues.join(",");
                    fieldsVisibleOnExtensionForContact[fieldKey] = commaSeparatedString;
                }
            }
        }

        Object.keys(entityTypeFieldsForEntities[contactEntityTypeId]).forEach(key => {
            if(entityTypeFieldsForEntities[contactEntityTypeId][key].length > 0){
                setEntityTypeFieldValuesForEntities(key, contactEntityTypeId, entityTypeFieldsForEntities[contactEntityTypeId][key]);
            }
        });

        if (submit) {
            let payload = {};
            dropdownCustomFieldsForContact = [];
            multiselectCustomFieldsForContact = [];
            if (flagForShowOnExtension){
                payload = { "contact": contact, "extraData": extraData, "overrideData": extSettings.overrideData, "fieldsVisibleOnExtensionForContact": fieldsVisibleOnExtensionForContact, "fileTypeCustomFieldsForContact":fileTypeCustomFieldsForContact };
            }else{
                payload = { "contact": contact, "extraData": extraData, "overrideData": extSettings.overrideData };
            }
            //saving company while saving contact when company does not exists
            let companyNameInContact = $('#contact_companyid').val().trim();
            if(flagForExtensionEnhancement && companyNameInContact != '' && (contact['companyid'] == undefined || contact['companyid'] == '') && company.slug == undefined && user.user_access_control['companies'].canadd === 'Yes' && candidate == null){
                contactsCompany = {};
                removeContactFromcontactsCompany = {};
                var companyFormData = $("#company_form").serializeArray();
                var companynote = "";
                var addToObject = true;
                Object.keys(companyFormData).forEach(companyKey => {
                    addToObject = true;
                    var _companyKey = companyFormData[companyKey].name.substr(companyFormData[companyKey].name.indexOf("company_") + 8);
                    if (companyFormData[companyKey].name == "extra_data_comp_notes") {
                        addToObject = false;
                        companynote = companyFormData[companyKey].value.trim();
                        delete companyFormData[companyKey];
                    }
                    if (addToObject) {
                        if (_companyKey.indexOf('contact_') !== -1) {
                            removeContactFromcontactsCompany[_companyKey.substr(companyFormData[companyKey].name.indexOf("contact_"))] = companyFormData[companyKey].value;
                        } else {
                            contactsCompany[_companyKey] = companyFormData[companyKey].value;
                        }
                    }
                });
                var logo = $('#company_logo').attr('src');
                if (logo != undefined && logo !== '' && logo.indexOf('chrome-extension:') == -1) {
                    contactsCompany.logo = logo;
                }
                if(companyNameInContact.toLowerCase() == contactsCompany.companyname.trim().toLowerCase()){
                    payload.company = contactsCompany;
                }
            } else if (companyNameInContact != '' && (contact['companyid'] == undefined || contact['companyid'] == '') && company.slug != undefined){
                contact['companyid'] = company.id !== "" ? company.id : '';
            }

            // var payload = { "contact": contact, "extraData": extraData, "overrideData": extSettings.overrideData };
            sendMessageToParent({ "message": "contactSubmit", "payload": payload });
            if (extSettings.saveCandidate && createCandidateFlag) {
                if (versionTag && versionTag != "" && $("#save_linked_in_profile_pdf").is(":checked")) {
                    var messageData = {};
                    messageData.message = "getLinkedInPersonProfilePdf";
                    messageData.type = "5";
                    messageData.slug = linkedInslug;
                    messageData.versionTag = versionTag;
                    sendMessageToParent(messageData);
                } else {
                    createCandidateRecord(true, false, contact, false);
                }
            }


            // manipulate the UI according to Contact Email and Phone 
            if (duplicateContactSlug != null && prefilledData && document.getElementById('containerCandidateSavedNote') && (differentEmailValueForContact || differentPhoneValueForContact)) {
                document.getElementById('containerCandidateSavedNote').style.display = 'block';

                if (differentEmailValueForContact) {
                    countOfDuplicateFound += 1;
                    document.getElementById('updatedCandidateEmail').innerHTML = oldValueForEmailContact;
                }
                else {
                    document.getElementById('updatedCandidateEmail').style.display = 'none';
                }
    
                if (differentPhoneValueForContact) {
                    countOfDuplicateFound += 1;
                    document.getElementById('updatedCandidatePhone').innerHTML = oldValueForPhoneContact;
                }
                else {
                    document.getElementById('updatedCandidatePhone').style.display = 'none';
                }


                // attaching event listener
                const updateLink = document.getElementById('updateContactDetailsAfterSave');
                if (differentEmailValueForContact) {
                    const payload = {
                        id: holdContactObject['id'],
                        key: 'email',
                        tableFlag: 'contact',
                        type: 'text',
                        value: oldValueForEmailContact
                    }

                    updateLink.addEventListener('click', function() {
                        updateEmailInline('contact', payload);
                    });
                }
                
                if (differentPhoneValueForContact) {
                    const payload = {
                        id: holdContactObject['id'],
                        key: 'contactnumber',
                        tableFlag: 'contact',
                        type: 'text',
                        value: oldValueForPhoneContact
                    }

                    updateLink.addEventListener('click', function() {
                        updatePhoneInline('contact', payload);
                    });
                    
                }
            }


            let toDoNoteType;
            // iterate through noteTypeList and get the id where label is To Do 
            for(let i=0; i < noteTypeList.length; i++){
                if (noteTypeList[i].label == 'To Do'){
                    toDoNoteType = noteTypeList[i].id;
                    break;
                }
            }

            let relatedToName = contact['firstname'] + ' ' + contact['lastname'];


            const noteAPIPayload = {
                associated_data: {
                    "2": [],
                    "3": [],
                    "4": [],
                    "5": [],
                    "11": []
                },
                collaborator_team_ids: [],
                collaborator_user_ids: [],
                description: '',
                notetype: toDoNoteType,
                relatedto: duplicateContactSlug,
                relatedtocompany: null,
                relatedtoname: relatedToName,
                relatedtotypeid: 2,
                userInNote: {},
                defaultFromExtension: true
            }


            let noteDescription = 'New contact details found from LinkedIn as of ' + getUserDate() + ': <br /> \n';


            if (duplicateContactSlug != null && prefilledData && document.getElementById('containerCandidateSavedNote') && (differentEmailValueForContact || differentPhoneValueForContact)) {
                let oldNote = '--------------------------<br />\n';

                // we need to create a note for candidate
                if (differentEmailValueForContact) {
                    noteDescription += 'New Email: ' + oldValueForEmailContact + '<br /> \n';
                    oldNote += 'Old Email: ' + holdContactObject['email'] + '<br /> \n';
                }

                if (differentPhoneValueForContact) {
                    noteDescription += 'New Phone: ' + oldValueForPhoneContact + '<br /> \n';
                    oldNote += 'Old Phone: ' + holdContactObject['contactnumber'] + '<br /> \n';
                }

                noteDescription += oldNote;

                noteAPIPayload.description = noteDescription;

                sendMessageToParent({"message": "addDefaultNote", "payload": {noteAPIPayload: noteAPIPayload, 'entity': 'contact'} });
            }
        }
    }
    function setSplitName(name) {
        if (!name || !name.length) {
            return
        }
        var nameParts = name.trim().split(' ');
        if (nameParts.length > 1) {
            //var fname = nameParts.join(' ').replace(nameParts[nameParts.length - 1], '').trim();
            var fname = nameParts[0].trim();
            profile.fname = {
                "value": fname,
                "type": "input"
            };
            //var lname = nameParts[nameParts.length - 1].trim();
            var lname = nameParts.join(' ').replace(nameParts[0], '').trim();
            profile.lname = {
                "value": lname,
                "type": "input"
            };
        } else {
            var fname = nameParts[0];
            profile.fname = {
                "value": fname,
                "type": "input"
            };
            var lname = "";
            profile.lname = {
                "value": lname,
                "type": "input"
            };
        }
    }
    // Init Controls
    function initControls() {
        if ($('.tooltipstered').length < 1) {
            $('.tooltip').tooltipster({
                theme: 'tooltipster-shadow',
                animation: 'fade',
                interactive: true,
                delay: 300
            });
        }
        if ($('.tagified').length < 1) {
            var inputElms = document.querySelectorAll('.tagify');
            if (inputElms.length) {
                inputElms.forEach(inputElm => {
                    tagInputs[inputElm.name] = new Tagify(inputElm);
                    $(inputElm).removeClass('tagify').addClass('tagified')
                });
            }
        }
    }

    function storeInLocalStorage(key, value) {
        if (user && user.id) {
            var rcrm = JSON.parse(localStorage.getItem("rcrm"));
            if (!rcrm) {
                rcrm = initLocalStorage()
            }
            rcrm[user.id][key] = value;
            localStorage.setItem('rcrm', JSON.stringify(rcrm));
        } else {
            throw 'Local storage cannot be accessed without a logged in user';
        }
    }

    function getFromLocalStorage(key = null) {
        if (user && user.id) {
            var rcrm = JSON.parse(localStorage.getItem("rcrm"));
            if (!rcrm) {
                rcrm = initLocalStorage()
            }

            if (!rcrm[user.id]) {
                rcrm = initLocalStorage()
            }

            if (key) {
                if (!rcrm[user.id][key]) {
                    rcrm = initLocalStorage()
                }
            }

            if (key) {
                return JSON.parse(localStorage.getItem('rcrm'))[user.id][key];
            } else {
                return JSON.parse(localStorage.getItem('rcrm'))[user.id];
            }
        } else {
            throw 'Local storage cannot be accessed without a logged in user';
        }
    }

    function initLocalStorage() {
        var rcrm = {};
        rcrm[user.id] = {
            "ctp": true,
            "autoPdf": true,
            "overrideData": true,
            "saveContact": false,
            "saveCandidate": false,
            "saveCandidateFromCompany": false
        };
        localStorage.setItem('rcrm', JSON.stringify(rcrm));
        return JSON.parse(localStorage.getItem('rcrm'));
    }

    // This function is used to parse the profile from Xing Talent Manager
    function parseXingTalentManagerProfile(slugPosition = 3) {
        var cookieData = Object.fromEntries(document.cookie.split('; ').map(v => v.split('=').map(decodeURIComponent)));
        var myHeaders = new Headers();
        myHeaders.append("Accept", "application/json");
        myHeaders.append("Cookie", JSON.stringify(cookieData).slice(1, -1));

        var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
        };

        let Base_URL = "https://www.xing.com/xtm/profiles/"
        fetch(`${Base_URL}/${currentUrlObj.pathname.split('/')[slugPosition]}`, requestOptions)
            .then(response => response.text())
            .then(result => {

                var profileData = JSON.parse(result);

                //Image
                var profilePic = profileData?.photoUrl;
                if (profilePic && profilePic != '' && profilePic != "/assets/images/company_placeholder.jpg") {
                    profile.image = { "value": profilePic + '.128x128.jpg', "type": "image" };
                }

                //Name
                var name = profileData?.fullName;
                setSplitName(name);

                //Position
                var position = profileData?.companyTitle;
                profile.position = { "value": !position?.includes('undefined') ? position : '', "type": "input" };

                //Email
                let email = "";
                if (profileData?.jobSeeker?.emailAddress != null) {
                    email = profileData.jobSeeker?.emailAddress;
                }
                if (email?.length && !email?.includes('undefined')) {
                    profile.email = { "value": email ? email.replace('-', "") : "", "type": "input" };
                }

                //Phone
                let phone = "";
                if (profileData?.jobSeeker?.phoneNumber != null) {
                    phone = profileData.jobSeeker?.phoneNumber;
                }
                if (phone?.length && !phone?.includes('undefined')) {
                    profile.phone = { "value": phone ? phone.replace('-', "") : "", "type": "input" };
                }

                //Locality
                var location = profileData?.businessCity;
                if (location?.length && !location?.includes('undefined')) {
                    profile.location = { "value": !location.includes('undefined') ? location : '', "type": "input" };
                }

                //Organization
                var organisation = profileData?.companyName;
                profile.organisation = { "value": !organisation?.includes('undefined') ? organisation : '', "type": "input" };


                //Company Name
                var cname = profileData?.companyName;;
                profile.cname = { "value": !cname?.includes('undefined') ? cname : '', "type": "input" };

                //Xing Profile
                profileXing = 'https://www.xing.com/profile/' + profileData?.pageName + '/cv';

                getProfileSkillsFromXingTalentManager(cookieData, profileData?.scrambledId, false);
            })
            .catch(error => {
                console.log('error', error)
                finishParsing(true);
            });
    }

    function getProfileSkillsFromXingTalentManager(cookiesData, profileId, comesFromXing = false) {

        fetch("https://www.xing.com/xing-one/api", {
            "headers": {
                "accept": "*/*",
                "cookie": JSON.stringify(cookiesData).slice(1, -1),
                "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
                "cache-control": "no-cache",
                "content-type": "application/json",
                "x-requested-with": "XMLHttpRequest",
                "xing-one-preview": "true"
            },
            "body": `{\"operationName\":\"getProfile\",\"variables\":{\"id\":\"${profileId}\"},\"query\":\"query getProfile($id: SlugOrID!) {\\n  viewer {\\n    contactDistance(ids: [$id]) {\\n      userId\\n      distance\\n      __typename\\n    }\\n    __typename\\n  }\\n  xingId(id: $id) {\\n    id\\n    globalId\\n    academicTitle\\n    firstName\\n    gender\\n    lastName\\n    pageName\\n    profileImage(size: SQUARE_128) {\\n      url\\n      __typename\\n    }\\n    networkRelationship {\\n      relationship\\n      __typename\\n    }\\n    __typename\\n  }\\n  profileModules(id: $id) {\\n    timelineModule {\\n      buckets {\\n        entries {\\n          title\\n          organization {\\n            ... on ProfileCompany {\\n              name\\n              industry {\\n                id\\n                __typename\\n              }\\n              company {\\n                industry {\\n                  id\\n                  __typename\\n                }\\n                id\\n                __typename\\n              }\\n              __typename\\n            }\\n            __typename\\n          }\\n          additionalData {\\n            projobsData {\\n              ... on ProJobsWorkExperience {\\n                responsibility\\n                formattedResponsibilityTeamSize\\n                budget\\n                budgetAmount\\n                revenue\\n                revenueAmount\\n                resultsAndAchievements\\n                tasksAndActions\\n                topicsAndProjects\\n                __typename\\n              }\\n              __typename\\n            }\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  profileWorkExperience(profileId: $id) {\\n    collection {\\n      company {\\n        id\\n        urn\\n        companySizeId\\n        logos {\\n          logo128px\\n          __typename\\n        }\\n        industry {\\n          id\\n          __typename\\n        }\\n        address {\\n          city\\n          country {\\n            countryCode\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      jobTitle\\n      workExperienceStatus {\\n        id\\n        __typename\\n      }\\n      currentCompany\\n      primaryJob\\n      companyName\\n      normalizedName\\n      companyUrl\\n      companyNotes\\n      beginDate\\n      endDate\\n      duration {\\n        months\\n        years\\n        __typename\\n      }\\n      careerLevel {\\n        id\\n        __typename\\n      }\\n      discipline {\\n        id\\n        localizationValue\\n        __typename\\n      }\\n      orgTypeId\\n      companyNotes\\n      __typename\\n    }\\n    __typename\\n  }\\n  profileEducation(profileId: $id) {\\n    education {\\n      primarySchool\\n      subject\\n      degree\\n      schoolName\\n      beginDate\\n      endDate\\n      schoolNotes\\n      __typename\\n    }\\n    __typename\\n  }\\n  profileInterests(profileId: $id) {\\n    interests\\n    __typename\\n  }\\n  profileWants(profileId: $id) {\\n    wants\\n    __typename\\n  }\\n  profileSkills(userId: $id) {\\n    skills\\n    topSkills\\n    __typename\\n  }\\n  profileLanguageSkills(profileId: $id) {\\n    ... on LoggedInProfileLanguageCollection {\\n      languageSkills {\\n        languages {\\n          language\\n          skillLevelId\\n          __typename\\n        }\\n        additionalLanguages\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"}`,
            "method": "POST"
        }).then(response => response.text())
            .then(result => {
                var skillData = JSON.parse(result);
                listOfExperience = convertXingWorkExperiences(skillData?.data?.profileWorkExperience?.collection);

                if (skillData.data.profileSkills?.skills) {
                    profile.skill = {
                        'value': skillData.data.profileSkills?.skills,
                        'type': "tags"
                    }
                }

                if (comesFromXing && skillData?.data?.profileWorkExperience && skillData?.data?.profileWorkExperience?.collection?.length > 0) {
                    var workExperience = skillData?.data?.profileWorkExperience?.collection;

                    //Position
                    var position = workExperience[0]?.jobTitle;
                    profile.position = { "value": !position?.includes('undefined') ? position : '', "type": "input" };

                    //Organization
                    var organisation = workExperience[0]?.companyName;
                    profile.organisation = { "value": !organisation?.includes('undefined') ? organisation : '', "type": "input" };

                    //Company Name
                    var cname = organisation;
                    profile.cname = { "value": !cname?.includes('undefined') ? cname : '', "type": "input" };
                }

                finishParsing(true);
            })
            .catch(error => {
                console.log('error', error)
                finishParsing(true);
            });
    }

    function setDisplayForIds(ids, displayValue) {
        if (Array.isArray(ids)) {
            // Handle an array of IDs
            ids.forEach(function (id) {
              var element = document.getElementById(id);
              if (element) {
                element.style.display = displayValue;
              }
            });
          } else if (typeof ids === 'string') {
            // Handle a single ID as a string
            var element = document.getElementById(ids);
            if (element) {
              element.style.display = displayValue;
            }
          }
    }
    function initializeGmeet(flagForGoogleMeet, conferenceData, flagForTeamMeet, flagForZoomMeet) {
        if (flagForGoogleMeet && document.getElementById('googleMeetSection') && !flagForTeamMeet) {
            if (conferenceData?.hasOwnProperty('1')) {
                setDisplayForIds('add_g_meet', 'flex');
                setDisplayForIds('connect_g_meet', 'none');
            } else {
                setDisplayForIds('add_g_meet', 'none');
                setDisplayForIds('connect_g_meet', 'flex');
            }
            setDisplayForIds(['join_g_meet', 'gmeet_expired'], 'none');
            setDisplayForIds('teamMeetSection', 'none');
        } else if (flagForTeamMeet && document.getElementById('teamMeetSection') && !flagForZoomMeet) {
            setDisplayForIds('teamMeetSection', 'block');
            setDisplayForIds('choose-team-meet', 'block');
            setDisplayForIds(['choose-meeting-dropdown', 'choose_meet'], 'flex');
            setDisplayForIds(['add_gmeet_btn', 'add_team_btn','add_zoom_btn','choose-meet-menu-up'], 'none');
            if (conferenceData?.hasOwnProperty('1') && conferenceData?.hasOwnProperty('2')) {
                setDisplayForIds(['add_gmeet', 'add_team_meet'], 'flex');
                setDisplayForIds(['connect_gmeet', 'connect_team_meet'], 'none');
            } else if (conferenceData?.hasOwnProperty('1')) {
                setDisplayForIds('add_gmeet', 'flex');
                setDisplayForIds('connect_team_meet', 'flex');
                setDisplayForIds(['connect_gmeet', 'add_team_meet'], 'none');
            } else if (conferenceData?.hasOwnProperty('2')) {
                setDisplayForIds('add_team_meet', 'flex');
                setDisplayForIds('connect_gmeet', 'flex');
                setDisplayForIds(['connect_team_meet', 'add_gmeet'], 'none');
            } else {
               setDisplayForIds('connect_gmeet', 'flex');
               setDisplayForIds('connect_team_meet', 'flex');
               setDisplayForIds('add_gmeet', 'none');
               setDisplayForIds('add_team_meet', 'none');
            }
            setDisplayForIds(['join_gmeet', 'gmeet_expired','add_zoom_meet','connect_zoom_meet'], 'none');
            setDisplayForIds(['join_team_meet','join_zoom_meet'], 'none');
            setDisplayForIds('googleMeetSection', 'none');
            setDisplayForIds('g_meet_expired', 'none');
        } else if (flagForZoomMeet && document.getElementById('teamMeetSection')) {
            setDisplayForIds(['teamMeetSection','choose-team-meet'], 'block');
            setDisplayForIds(['choose-meeting-dropdown', 'choose_meet'], 'flex');
            setDisplayForIds(['add_gmeet_btn', 'add_team_btn','add_zoom_btn','choose-meet-menu-up'], 'none');
            if (conferenceData?.hasOwnProperty('1') && conferenceData?.hasOwnProperty('2') && conferenceData?.hasOwnProperty('3') ) {
                setDisplayForIds(['add_gmeet', 'add_team_meet','add_zoom_meet'], 'flex');
                setDisplayForIds(['connect_gmeet', 'connect_team_meet','connect_zoom_meet'], 'none');
            } else if (conferenceData?.hasOwnProperty('1') && conferenceData?.hasOwnProperty('2') && !conferenceData?.hasOwnProperty('3')) {
                setDisplayForIds(['add_gmeet', 'add_team_meet','connect_zoom_meet'], 'flex');
                setDisplayForIds(['connect_gmeet', 'connect_team_meet', 'add_zoom_meet'], 'none');
            } else if (conferenceData?.hasOwnProperty('1') && conferenceData?.hasOwnProperty('3') && !conferenceData?.hasOwnProperty('2')) {
                setDisplayForIds(['add_gmeet', 'add_zoom_meet','connect_team_meet'], 'flex');
                setDisplayForIds(['connect_gmeet', 'connect_zoom_meet', 'add_team_meet'], 'none');
            } else if (conferenceData?.hasOwnProperty('2') && conferenceData?.hasOwnProperty('3') && !conferenceData?.hasOwnProperty('1')) {
                setDisplayForIds(['add_team_meet', 'add_zoom_meet','connect_gmeet'], 'flex');
                setDisplayForIds(['connect_team_meet', 'connect_zoom_meet', 'add_gmeet'], 'none');
            } else if (conferenceData?.hasOwnProperty('1')) {
                setDisplayForIds(['add_gmeet','connect_team_meet','connect_zoom_meet'], 'flex');
                setDisplayForIds(['connect_gmeet', 'add_team_meet', 'add_zoom_meet'], 'none');
            } else if (conferenceData?.hasOwnProperty('2')) {
                setDisplayForIds(['add_team_meet','connect_gmeet','connect_zoom_meet'], 'flex');
                setDisplayForIds(['connect_team_meet', 'add_gmeet','add_zoom_meet'], 'none');
            } else if (conferenceData?.hasOwnProperty('3')) {
                setDisplayForIds(['connect_team_meet','connect_gmeet','add_zoom_meet'], 'flex');
                setDisplayForIds(['add_team_meet', 'add_gmeet','connect_zoom_meet'], 'none');
            } else {
               setDisplayForIds(['connect_gmeet','connect_team_meet','connect_zoom_meet'], 'flex');
               setDisplayForIds(['add_gmeet','add_team_meet','add_zoom_meet'], 'none');
            }
            setDisplayForIds(['join_gmeet', 'gmeet_expired','join_team_meet','join_zoom_meet','googleMeetSection','g_meet_expired'], 'none');
        }
        else {
            setDisplayForIds('googleMeetSection', 'none');
            setDisplayForIds('teamMeetSection', 'none');
        }
    }

    /*
     *Code to be moved to extension in next version update
     */

    document.getElementById('noti_Container').innerHTML = "";
    document.getElementsByClassName('rcrm-nav')[0].classList.add("justify-content-s-b");
    $('.rcrm-add-appointment').siblings('p')[0].textContent = 'Add Meeting';
    $('#appointment_form .rcrm-header').text('Add Meeting')
    $('.btn-exists-add-appointment').each(function (index, element) {
        element.title = "Add Meeting";
    });
    $('#company_form').prepend('<input type="hidden" class="clinkedin" id="company_profilelinkedin" name="company_profilelinkedin">');
    //

    /**
     * Code to move position of extension dynamically:
     * document.getElementsByClassName('rcrm-ext-container')[0].style.left = '0px';
     * document.getElementsByClassName('rcrm-ext-container')[0].style.right = 'calc(100% - 340px)';
     */


/* Tagging for activities */

    /* candidate Notes collaborator */

    const collaboratorCandidateNotesOptionContainer = document.getElementById("candidate_notes_dropdown_options");
    const searchInputCandidateNotes = document.getElementById('candidate_notes_search_collaborators');
    const collaboratorDropdownCandidateNotes = document.getElementById('candidate_notes_collaborators');
    const candidateNotesSelectedCollaboratorsContainer = document.getElementById("candidate_notes_selected_collaborator");


    const collaboratorCandidateNotesSuffix = {
        "user" : "_candidateNotes_user",
        "team": "_candidateNotes_team"
    };

    function candidateNotesCollaborator() {
        userId = user['id'];
        curUserIndex = collaboratorDataUser.findIndex(user => user.id == userId);
        teamIds = collaboratorDataUser[curUserIndex]['teamids'];
        collaboratorCandidateNotesTeamIds = teamIds.map(teamId => parseInt(teamId, 10));

        updateSelectedCollaborator(
            candidateNotesSelectedCollaboratorsContainer,
            collaboratorCandidateNotesUserIds,
            collaboratorCandidateNotesTeamIds,
            collaboratorCandidateNotesSuffix
        );
        checkOptions(
            collaboratorCandidateNotesUserIds,
            collaboratorCandidateNotesTeamIds,
            collaboratorCandidateNotesSuffix,
            candidateNotesSelectedCollaboratorsContainer
        );
    }

    candidateNotesSelectedCollaboratorsContainer.addEventListener('click', function(event) {
        clickedElementId = event.target.id;
        if(clickedElementId.includes(collaboratorCandidateNotesSuffix['user'])) {
            removeCollaboratorUser(clickedElementId, collaboratorCandidateNotesUserIds, new RegExp(`${collaboratorCandidateNotesSuffix['user']}$`));
        } else if(clickedElementId.includes(collaboratorCandidateNotesSuffix['team'])) {
            removeCollaboratorTeam(clickedElementId, collaboratorCandidateNotesTeamIds, new RegExp(`${collaboratorCandidateNotesSuffix['team']}$`));
        }
        updateSelectedCollaborator(
            candidateNotesSelectedCollaboratorsContainer,
            collaboratorCandidateNotesUserIds,
            collaboratorCandidateNotesTeamIds,
            collaboratorCandidateNotesSuffix
        );
        checkOptions(
            collaboratorCandidateNotesUserIds,
            collaboratorCandidateNotesTeamIds,
            collaboratorCandidateNotesSuffix,
            candidateNotesSelectedCollaboratorsContainer
        );
    });

    let hasInputCandidateNotes = false;
    searchInputCandidateNotes.addEventListener('input', function () {
        createOptions(this.value, collaboratorCandidateNotesOptionContainer, collaboratorCandidateNotesSuffix);
        checkOptions(
            collaboratorCandidateNotesUserIds,
            collaboratorCandidateNotesTeamIds,
            collaboratorCandidateNotesSuffix,
            candidateNotesSelectedCollaboratorsContainer
        );
        collaboratorDropdownCandidateNotes.classList.add('active');
        hasInputCandidateNotes = this.value.length>0;
    });
    searchInputCandidateNotes.addEventListener('click', function() {
        toggleCollaboratorDropdown(
            collaboratorDropdownCandidateNotes,
            collaboratorCandidateNotesOptionContainer,
            collaboratorCandidateNotesSuffix,
            hasInputCandidateNotes
        );
    });

    collaboratorCandidateNotesOptionContainer.addEventListener('click', function(event) {
        event.stopPropagation();
        const clickedElement = event.target;
        let parentDiv = clickedElement.closest('.team-option, .user-option, .team-teammate-selectall');
    
        if (parentDiv) {
            if (parentDiv.classList.contains('user-option')) {
                handleUserOption(parentDiv, collaboratorCandidateNotesUserIds, new RegExp(`${collaboratorCandidateNotesSuffix['user']}$`));
            } else if (parentDiv.classList.contains('team-option')) {
                handleTeamOption(parentDiv, collaboratorCandidateNotesTeamIds, new RegExp(`${collaboratorCandidateNotesSuffix['team']}$`));
            }else {
                if(clickedElement.id === 'selectAllTeammate'+collaboratorCandidateNotesSuffix['user']) {
                    filteredOptionsUser.forEach(function (user) {
                        if(!collaboratorCandidateNotesUserIds.includes(user.id)) {
                            collaboratorCandidateNotesUserIds.push(user.id);
                        }
                    });
                } else if (clickedElement.id === 'selectAllTeam'+collaboratorCandidateNotesSuffix['team']) {
                    filteredOptionsTeam.forEach(function (team) {
                        if(!collaboratorCandidateNotesTeamIds.includes(team.id)) {
                            collaboratorCandidateNotesTeamIds.push(team.id);
                        }
                    });
                }
            }
        }
        updateSelectedCollaborator(
            candidateNotesSelectedCollaboratorsContainer,
            collaboratorCandidateNotesUserIds,
            collaboratorCandidateNotesTeamIds,
            collaboratorCandidateNotesSuffix
        );
        checkOptions(
            collaboratorCandidateNotesUserIds,
            collaboratorCandidateNotesTeamIds,
            collaboratorCandidateNotesSuffix,
            candidateNotesSelectedCollaboratorsContainer
        );
    });

    /* Candidate Notes Collaborator end */


    /* Contact Notes Collaborator */

    const collaboratorContactNotesOptionContainer = document.getElementById("contact_notes_dropdown_options");
    const searchInputContactNotes = document.getElementById('contact_notes_search_collaborators');
    const collaboratorDropdownContactNotes = document.getElementById('contact_notes_collaborators');
    const contactNotesSelectedCollaboratorsContainer = document.getElementById("contact_notes_selected_collaborator");

    const collaboratorContactNotesSuffix = {
        "user" : "_contactNotes_user",
        "team" : "_contactNotes_team"
    };

    function contactNotesCollaborator() {
        const userId = user['id'];
        curUserIndex = collaboratorDataUser.findIndex(user => user.id == userId);
        teamIds = collaboratorDataUser[curUserIndex]['teamids'];
        collaboratorContactNotesTeamIds = teamIds.map(teamId => parseInt(teamId, 10));
        updateSelectedCollaborator(
            contactNotesSelectedCollaboratorsContainer,
            collaboratorContactNotesUserIds,
            collaboratorContactNotesTeamIds,
            collaboratorContactNotesSuffix
        );

        checkOptions(
            collaboratorContactNotesUserIds,
            collaboratorContactNotesTeamIds,
            collaboratorContactNotesSuffix,
            contactNotesSelectedCollaboratorsContainer
        );
    }

    contactNotesSelectedCollaboratorsContainer.addEventListener('click', function(event) {
        clickedElementId = event.target.id;
        if(clickedElementId.includes(collaboratorContactNotesSuffix['user'])) {
            removeCollaboratorUser(clickedElementId, collaboratorContactNotesUserIds, new RegExp(`${collaboratorContactNotesSuffix['user']}$`));
        } else if(clickedElementId.includes(collaboratorContactNotesSuffix['team'])) {
            removeCollaboratorTeam(clickedElementId, collaboratorContactNotesTeamIds, new RegExp(`${collaboratorContactNotesSuffix['team']}$`));
        }
        updateSelectedCollaborator(
            contactNotesSelectedCollaboratorsContainer,
            collaboratorContactNotesUserIds,
            collaboratorContactNotesTeamIds,
            collaboratorContactNotesSuffix
        );
        checkOptions(
            collaboratorContactNotesUserIds,
            collaboratorContactNotesTeamIds,
            collaboratorContactNotesSuffix,
            contactNotesSelectedCollaboratorsContainer
        );
    });

    let hasInputContactNotes = false;
        
    searchInputContactNotes.addEventListener('input', function () {
        createOptions(this.value, collaboratorContactNotesOptionContainer, collaboratorContactNotesSuffix);
        checkOptions(
            collaboratorContactNotesUserIds,
            collaboratorContactNotesTeamIds,
            collaboratorContactNotesSuffix,
            contactNotesSelectedCollaboratorsContainer
        );
        collaboratorDropdownContactNotes.classList.add('active');
        hasInputContactNotes = this.value.length>0;
    });
    searchInputContactNotes.addEventListener('click', function() {
        toggleCollaboratorDropdown(
            collaboratorDropdownContactNotes,
            collaboratorContactNotesOptionContainer,
            collaboratorContactNotesSuffix,
            hasInputContactNotes
        );
    });

    collaboratorContactNotesOptionContainer.addEventListener('click', function(event) {
        event.stopPropagation();
        const clickedElement = event.target;
        let parentDiv = clickedElement.closest('.team-option, .user-option, .team-teammate-selectall');
    
        if (parentDiv) {
            if (parentDiv.classList.contains('user-option')) {
                handleUserOption(parentDiv, collaboratorContactNotesUserIds, new RegExp(`${collaboratorContactNotesSuffix['user']}$`));
            } else if (parentDiv.classList.contains('team-option')) {
                handleTeamOption(parentDiv, collaboratorContactNotesTeamIds, new RegExp(`${collaboratorContactNotesSuffix['team']}$`));
            }else {
                if(clickedElement.id === 'selectAllTeammate'+collaboratorContactNotesSuffix['user']) {
                    filteredOptionsUser.forEach(function (user) {
                        if(!collaboratorContactNotesUserIds.includes(user.id)) {
                            collaboratorContactNotesUserIds.push(user.id);
                        }
                    });
                } else if (clickedElement.id === 'selectAllTeam'+collaboratorContactNotesSuffix['team']) {
                    filteredOptionsTeam.forEach(function (team) {
                        if(!collaboratorContactNotesTeamIds.includes(team.id)) {
                            collaboratorContactNotesTeamIds.push(team.id);
                        }
                    });
                }
            }
        }
        
        updateSelectedCollaborator(
            contactNotesSelectedCollaboratorsContainer,
            collaboratorContactNotesUserIds,
            collaboratorContactNotesTeamIds,
            collaboratorContactNotesSuffix
        );
        checkOptions(
            collaboratorContactNotesUserIds,
            collaboratorContactNotesTeamIds,
            collaboratorContactNotesSuffix,
            contactNotesSelectedCollaboratorsContainer
        );
    });

    /* Contact Notes Collaborator end */

    /* company Notes collaborator */
    const collaboratorCompanyNotesOptionContainer = document.getElementById("company_notes_dropdown_options");
    const searchInputCompanyNotes = document.getElementById('company_notes_search_collaborators');
    const collaboratorDropdownCompanyNotes = document.getElementById('company_notes_collaborators');
    const companyNotesSelectedCollaboratorsContainer = document.getElementById("company_notes_selected_collaborator");


    const collaboratorCompanyNotesSuffix = {
        "user" : "_companyNotes_user",
        "team": "_companyNotes_team"
    };

    function companyNotesCollaborator() {
        userId = user['id'];
        curUserIndex = collaboratorDataUser.findIndex(user => user.id == userId);
        teamIds = collaboratorDataUser[curUserIndex]['teamids'];
        collaboratorCompanyNotesTeamIds = teamIds.map(teamId => parseInt(teamId, 10));

        updateSelectedCollaborator(
            companyNotesSelectedCollaboratorsContainer,
            collaboratorCompanyNotesUserIds,
            collaboratorCompanyNotesTeamIds,
            collaboratorCompanyNotesSuffix
        );
        checkOptions(
            collaboratorCompanyNotesUserIds,
            collaboratorCompanyNotesTeamIds,
            collaboratorCompanyNotesSuffix,
            companyNotesSelectedCollaboratorsContainer
        );
    }

    companyNotesSelectedCollaboratorsContainer.addEventListener('click', function(event) {
        clickedElementId = event.target.id;
        if(clickedElementId.includes(collaboratorCompanyNotesSuffix['user'])) {
            removeCollaboratorUser(clickedElementId, collaboratorCompanyNotesUserIds, new RegExp(`${collaboratorCompanyNotesSuffix['user']}$`));
        } else if(clickedElementId.includes(collaboratorCompanyNotesSuffix['team'])) {
            removeCollaboratorTeam(clickedElementId, collaboratorCompanyNotesTeamIds, new RegExp(`${collaboratorCompanyNotesSuffix['team']}$`));
        }
        updateSelectedCollaborator(
            companyNotesSelectedCollaboratorsContainer,
            collaboratorCompanyNotesUserIds,
            collaboratorCompanyNotesTeamIds,
            collaboratorCompanyNotesSuffix
        );
        checkOptions(
            collaboratorCompanyNotesUserIds,
            collaboratorCompanyNotesTeamIds,
            collaboratorCompanyNotesSuffix,
            companyNotesSelectedCollaboratorsContainer
        );
    });

    let hasInputCompanyNotes = false;
    searchInputCompanyNotes.addEventListener('input', function () {
        createOptions(this.value, collaboratorCompanyNotesOptionContainer, collaboratorCompanyNotesSuffix);
        checkOptions(
            collaboratorCompanyNotesUserIds,
            collaboratorCompanyNotesTeamIds,
            collaboratorCompanyNotesSuffix,
            companyNotesSelectedCollaboratorsContainer
        );
        collaboratorDropdownCompanyNotes.classList.add('active');
        hasInputCompanyNotes = this.value.length>0;
    });
    searchInputCompanyNotes.addEventListener('click', function() {
        toggleCollaboratorDropdown(
            collaboratorDropdownCompanyNotes,
            collaboratorCompanyNotesOptionContainer,
            collaboratorCompanyNotesSuffix,
            hasInputCompanyNotes
        );
    });

    collaboratorCompanyNotesOptionContainer.addEventListener('click', function(event) {
        event.stopPropagation();
        const clickedElement = event.target;
        let parentDiv = clickedElement.closest('.team-option, .user-option, .team-teammate-selectall');
    
        if (parentDiv) {
            if (parentDiv.classList.contains('user-option')) {
                handleUserOption(parentDiv, collaboratorCompanyNotesUserIds, new RegExp(`${collaboratorCompanyNotesSuffix['user']}$`));
            } else if (parentDiv.classList.contains('team-option')) {
                handleTeamOption(parentDiv, collaboratorCompanyNotesTeamIds, new RegExp(`${collaboratorCompanyNotesSuffix['team']}$`));
            }else {
                if(clickedElement.id === 'selectAllTeammate'+collaboratorCompanyNotesSuffix['user']) {
                    filteredOptionsUser.forEach(function (user) {
                        if(!collaboratorCompanyNotesUserIds.includes(user.id)) {
                            collaboratorCompanyNotesUserIds.push(user.id);
                        }
                    });
                } else if (clickedElement.id === 'selectAllTeam'+collaboratorCompanyNotesSuffix['team']) {
                    filteredOptionsTeam.forEach(function (team) {
                        if(!collaboratorCompanyNotesTeamIds.includes(team.id)) {
                            collaboratorCompanyNotesTeamIds.push(team.id);
                        }
                    });
                }
            }
        }
        updateSelectedCollaborator(
            companyNotesSelectedCollaboratorsContainer,
            collaboratorCompanyNotesUserIds,
            collaboratorCompanyNotesTeamIds,
            collaboratorCompanyNotesSuffix
        );
        checkOptions(
            collaboratorCompanyNotesUserIds,
            collaboratorCompanyNotesTeamIds,
            collaboratorCompanyNotesSuffix,
            companyNotesSelectedCollaboratorsContainer
        );
    });

    /* Company Notes Collaborator end */

    /* task collaborator */
    const collaboratorTaskOptionContainer = document.getElementById("task_dropdown_options");
    const searchInputTask = document.getElementById('task_search_collaborators');
    const collaboratorDropdownTask = document.getElementById('task_collaborators');
    const taskSelectedCollaboratorsContainer = document.getElementById("task_selected_collaborator");


    const collaboratorTaskSuffix = {
        "user" : "_task_user",
        "team": "_task_team"
    };

    function taskCollaborator() {
        userId = user['id'];
        curUserIndex = collaboratorDataUser.findIndex(user => user.id == userId);
        teamIds = collaboratorDataUser[curUserIndex]['teamids'];
        collaboratorTaskTeamIds = teamIds.map(teamId => parseInt(teamId, 10));

        updateSelectedCollaborator(
            taskSelectedCollaboratorsContainer,
            collaboratorTaskUserIds,
            collaboratorTaskTeamIds,
            collaboratorTaskSuffix
        );
        checkOptions(
            collaboratorTaskUserIds,
            collaboratorTaskTeamIds,
            collaboratorTaskSuffix,
            taskSelectedCollaboratorsContainer
        );
    }

    taskSelectedCollaboratorsContainer.addEventListener('click', function(event) {
        clickedElementId = event.target.id;
        if(clickedElementId.includes(collaboratorTaskSuffix['user'])) {
            removeCollaboratorUser(clickedElementId, collaboratorTaskUserIds, new RegExp(`${collaboratorTaskSuffix['user']}$`));
        } else if(clickedElementId.includes(collaboratorTaskSuffix['team'])) {
            removeCollaboratorTeam(clickedElementId, collaboratorTaskTeamIds, new RegExp(`${collaboratorTaskSuffix['team']}$`));
        }
        updateSelectedCollaborator(
            taskSelectedCollaboratorsContainer,
            collaboratorTaskUserIds,
            collaboratorTaskTeamIds,
            collaboratorTaskSuffix
        );
        checkOptions(
            collaboratorTaskUserIds,
            collaboratorTaskTeamIds,
            collaboratorTaskSuffix,
            taskSelectedCollaboratorsContainer
        );
    });

    let hasInputTask = false;
    searchInputTask.addEventListener('input', function () {
        createOptions(this.value, collaboratorTaskOptionContainer, collaboratorTaskSuffix);
        checkOptions(
            collaboratorTaskUserIds,
            collaboratorTaskTeamIds,
            collaboratorTaskSuffix,
            taskSelectedCollaboratorsContainer
        );
        collaboratorDropdownTask.classList.add('active');
        hasInputTask = this.value.length>0;
    });
    searchInputTask.addEventListener('click', function() {
        toggleCollaboratorDropdown(
            collaboratorDropdownTask,
            collaboratorTaskOptionContainer,
            collaboratorTaskSuffix,
            hasInputTask
        );
    });

    collaboratorTaskOptionContainer.addEventListener('click', function(event) {
        event.stopPropagation();
        const clickedElement = event.target;
        let parentDiv = clickedElement.closest('.team-option, .user-option, .team-teammate-selectall');
    
        if (parentDiv) {
            if (parentDiv.classList.contains('user-option')) {
                handleUserOption(parentDiv, collaboratorTaskUserIds, new RegExp(`${collaboratorTaskSuffix['user']}$`));
            } else if (parentDiv.classList.contains('team-option')) {
                handleTeamOption(parentDiv, collaboratorTaskTeamIds, new RegExp(`${collaboratorTaskSuffix['team']}$`));
            }else {
                if(clickedElement.id === 'selectAllTeammate'+collaboratorTaskSuffix['user']) {
                    filteredOptionsUser.forEach(function (user) {
                        if(!collaboratorTaskUserIds.includes(user.id)) {
                            collaboratorTaskUserIds.push(user.id);
                        }
                    });
                } else if (clickedElement.id === 'selectAllTeam'+collaboratorTaskSuffix['team']) {
                    filteredOptionsTeam.forEach(function (team) {
                        if(!collaboratorTaskTeamIds.includes(team.id)) {
                            collaboratorTaskTeamIds.push(team.id);
                        }
                    });
                }
            }
        }
        updateSelectedCollaborator(
            taskSelectedCollaboratorsContainer,
            collaboratorTaskUserIds,
            collaboratorTaskTeamIds,
            collaboratorTaskSuffix
        );
        checkOptions(
            collaboratorTaskUserIds,
            collaboratorTaskTeamIds,
            collaboratorTaskSuffix,
            taskSelectedCollaboratorsContainer
        );
    });

    /* task collaborator end */

    /* meeting collaborator */
    const collaboratorMeetingOptionContainer = document.getElementById("meeting_dropdown_options");
    const searchInputMeeting = document.getElementById('meeting_search_collaborators');
    const collaboratorDropdownMeeting = document.getElementById('meeting_collaborators');
    const meetingSelectedCollaboratorsContainer = document.getElementById("meeting_selected_collaborator");


    const collaboratorMeetingSuffix = {
        "user" : "_meeting_user",
        "team": "_meeting_team"
    };

    function meetingCollaborator() {
        userId = user['id'];
        curUserIndex = collaboratorDataUser.findIndex(user => user.id == userId);
        teamIds = collaboratorDataUser[curUserIndex]['teamids'];
        collaboratorMeetingTeamIds = teamIds.map(teamId => parseInt(teamId, 10));

        updateSelectedCollaborator(
            meetingSelectedCollaboratorsContainer,
            collaboratorMeetingUserIds,
            collaboratorMeetingTeamIds,
            collaboratorMeetingSuffix
        );
        checkOptions(
            collaboratorMeetingUserIds,
            collaboratorMeetingTeamIds,
            collaboratorMeetingSuffix,
            meetingSelectedCollaboratorsContainer
        );
    }

    meetingSelectedCollaboratorsContainer.addEventListener('click', function(event) {
        clickedElementId = event.target.id;
        if(clickedElementId.includes(collaboratorMeetingSuffix['user'])) {
            removeCollaboratorUser(clickedElementId, collaboratorMeetingUserIds, new RegExp(`${collaboratorMeetingSuffix['user']}$`));
        } else if(clickedElementId.includes(collaboratorMeetingSuffix['team'])) {
            removeCollaboratorTeam(clickedElementId, collaboratorMeetingTeamIds, new RegExp(`${collaboratorMeetingSuffix['team']}$`));
        }
        updateSelectedCollaborator(
            meetingSelectedCollaboratorsContainer,
            collaboratorMeetingUserIds,
            collaboratorMeetingTeamIds,
            collaboratorMeetingSuffix
        );
        checkOptions(
            collaboratorMeetingUserIds,
            collaboratorMeetingTeamIds,
            collaboratorMeetingSuffix,
            meetingSelectedCollaboratorsContainer
        );
    });

    let hasInputMeeting = false;
    searchInputMeeting.addEventListener('input', function () {
        createOptions(this.value, collaboratorMeetingOptionContainer, collaboratorMeetingSuffix);
        checkOptions(
            collaboratorMeetingUserIds,
            collaboratorMeetingTeamIds,
            collaboratorMeetingSuffix,
            meetingSelectedCollaboratorsContainer
        );
        collaboratorDropdownMeeting.classList.add('active');
        hasInputMeeting = this.value.length>0;
    });
    searchInputMeeting.addEventListener('click', function() {
        toggleCollaboratorDropdown(
            collaboratorDropdownMeeting,
            collaboratorMeetingOptionContainer,
            collaboratorMeetingSuffix,
            hasInputMeeting
        );
    });

    collaboratorMeetingOptionContainer.addEventListener('click', function(event) {
        event.stopPropagation();
        const clickedElement = event.target;
        let parentDiv = clickedElement.closest('.team-option, .user-option, .team-teammate-selectall');
    
        if (parentDiv) {
            if (parentDiv.classList.contains('user-option')) {
                handleUserOption(parentDiv, collaboratorMeetingUserIds, new RegExp(`${collaboratorMeetingSuffix['user']}$`));
            } else if (parentDiv.classList.contains('team-option')) {
                handleTeamOption(parentDiv, collaboratorMeetingTeamIds, new RegExp(`${collaboratorMeetingSuffix['team']}$`));
            }else {
                if(clickedElement.id === 'selectAllTeammate'+collaboratorMeetingSuffix['user']) {
                    filteredOptionsUser.forEach(function (user) {
                        if(!collaboratorMeetingUserIds.includes(user.id)) {
                            collaboratorMeetingUserIds.push(user.id);
                        }
                    });
                } else if (clickedElement.id === 'selectAllTeam'+collaboratorMeetingSuffix['team']) {
                    filteredOptionsTeam.forEach(function (team) {
                        if(!collaboratorMeetingTeamIds.includes(team.id)) {
                            collaboratorMeetingTeamIds.push(team.id);
                        }
                    });
                }
            }
        }
        updateSelectedCollaborator(
            meetingSelectedCollaboratorsContainer,
            collaboratorMeetingUserIds,
            collaboratorMeetingTeamIds,
            collaboratorMeetingSuffix
        );
        checkOptions(
            collaboratorMeetingUserIds,
            collaboratorMeetingTeamIds,
            collaboratorMeetingSuffix,
            meetingSelectedCollaboratorsContainer
        );
    });

    /* meeting collaborator end */




    /* Common code for "tagging for activities" */

    function removeCollaboratorUser(clickedElementId, collaboratorArray, regex) {
        const id = parseInt(clickedElementId.replace(regex, ''), 10);
        const index = collaboratorArray.indexOf(id);
        collaboratorArray.splice(index, 1);
    }

    function removeCollaboratorTeam(clickedElementId, collaboratorArray, regex) {
        const id = parseInt(clickedElementId.replace(regex, ''), 10);
        const index = collaboratorArray.indexOf(id);
        collaboratorArray.splice(index, 1);
    }

    function createOptions(searchTerm="", optionContainer, idSuffixes) {
        // Filter options based on search term
        filteredOptionsUser = collaboratorDataUser.filter(function (option) {
            const searchTermLowerCase = searchTerm.toLowerCase();
            const nameMatch = option['name'].toLowerCase().includes(searchTermLowerCase);
        
            // Check if the user has teams and if any of the team names match the search term
            const teamMatch = option['teams'] && option['teams'].some(team => team.toLowerCase().includes(searchTermLowerCase));
            
            const emailMatch = option["email"] && option['email'].toLowerCase().includes(searchTermLowerCase);
        
            return nameMatch || teamMatch || emailMatch;
        }).slice(0, 10);
        
        filteredOptionsTeam = collaboratorDataTeam.filter(function (option) {
            return option['name'].toLowerCase().includes(searchTerm.toLowerCase());
        }).slice(0, 10);

       
        optionContainer.innerHTML = '';
        if(searchTerm.length === 0) {
            optionContainer.innerHTML = '<div class = "collaborators-not-found">Please enter 1 or more characters</div>';
            return;
        }
        const teamContainer = document.createElement('div');
        teamContainer.className = "team-teammate-selectall";

        teamContainer.innerHTML = `
            <span>TEAMS</span>
            <p id="${"selectAllTeam"+idSuffixes['team']}" class="selectAllButton">Select All</p>
        `;

        optionContainer.appendChild(teamContainer);

         filteredOptionsTeam.forEach(function (option) {
            const optionElement = document.createElement('div');
            optionElement.className = 'custom-option team-option';
            optionElement.id = option.id+idSuffixes['team'];
            let nameLength = option.name.length;
            optionElement.innerHTML = `
                <input type="checkbox" class="checkbox">
                <img class="collaborator-dropdown-icon" src="${BASE_IMAGES_URL}/Teams.svg"/>
                ${nameLength>20 ? option.name.substring(0,20)+'...' : option.name}
            `;

            if (nameLength > 20) {
                optionElement.classList.add('tooltip-collaborator', 'tooltip-collaborator--top');
                optionElement.setAttribute('data-tooltip', option.name); // Use data-tooltip attribute to store tooltip content
            }
    
            // Append the option to the container
            optionContainer.appendChild(optionElement); 
        });
        if(filteredOptionsTeam.length==0) {
            document.getElementById('selectAllTeam'+idSuffixes['team']).style.display = "none";
            const notFound = document.createElement('div');
            notFound.className = 'collaborators-not-found';
            notFound.innerText = "No results found"
            optionContainer.appendChild(notFound);
        }
        const teamMateContainer = document.createElement('div');
        teamMateContainer.className = "team-teammate-selectall"

        teamMateContainer.innerHTML = `
            <span>TEAMMATES</span>
            <p id="${"selectAllTeammate"+idSuffixes['user']}" class="selectAllButton">Select All</p>
        `;

        optionContainer.appendChild(teamMateContainer);

        // Create and append options
         filteredOptionsUser.forEach(function (option) {
            const optionElement = document.createElement('div');
            
            optionElement.className = 'custom-option user-option';
            optionElement.id = option.id + idSuffixes['user'];
            let nameLength = option.name.length;
            let emailLength = 0;
            if(option.email) {
                emailLength = option.email.length;
            }
            optionElement.innerHTML = `
                <input type="checkbox" class="checkbox">
                <img class="collaborator-dropdown-icon" src="${BASE_IMAGES_URL}/Teammates.svg"/>
                <div>
                    ${nameLength>20 ? option.name.substring(0,20)+'...' : option.name}
                    ${(option.userstatus && option.userstatus) === 1 ? '(Deactivated)' : ''}
                    <div>
                    ${option.email ? 
                        `<p class="collaborator-email">(${emailLength > 20 ? option.email.substring(0, 20) + '...' : option.email})</p>` : 
                        `<p class="collaborator-email"></p>`}
                    </div>
                </div>
            `;

            if (nameLength > 20 || emailLength > 20) {
                optionElement.classList.add('tooltip-collaborator', 'tooltip-collaborator--top');
                optionElement.setAttribute('data-tooltip', option.name + ' ' + (option.email||'')); // Use data-tooltip attribute to store tooltip content
            }

        
    
            // Append the option to the container
            optionContainer.appendChild(optionElement);
        });

        if(filteredOptionsUser.length==0) {
            document.getElementById('selectAllTeammate'+idSuffixes['user']).style.display = "none";
            const notFound = document.createElement('div');
            notFound.className = 'collaborators-not-found';
            notFound.innerText = "No results found"
            optionContainer.appendChild(notFound);
        }
              
    }

    function toggleCollaboratorDropdown(dropDown, optionContainer, idSuffixes, hasInput) {
        dropDown.classList.toggle('active');
        if(dropDown.classList.contains('active') && !hasInput) {
            createOptions('', optionContainer, idSuffixes);
        }
    }

    function handleUserOption(parentDiv, userArray, regex) {
        if (parentDiv) {
            const divId = parentDiv.id;
            const userId = parseInt(divId.replace(regex, ''), 10);
            checkbox = parentDiv.querySelector(".checkbox");
            if (userArray.includes(userId)) {
                checkbox.checked = false;
                const index = userArray.indexOf(userId);
                userArray.splice(index, 1);
            } else {
                userArray.push(userId);
                checkbox.checked = true;
            }
        }
    }

    function handleTeamOption(parentDiv, teamArray, regex) {
        if (parentDiv) {
            const divId = parentDiv.id;
            const TeamId = parseInt(divId.replace(regex, ''), 10);
            checkbox = parentDiv.querySelector(".checkbox");

            if (teamArray.includes(TeamId)) {
                checkbox.checked = false;
                const index = teamArray.indexOf(TeamId);
                teamArray.splice(index, 1);
            } else {
                teamArray.push(TeamId);
                checkbox.checked = true;
            }
                 
        }
    }

    function updateSelectedCollaborator(collaboratorSelectedContainer, userArray, teamArray, idSuffixes ) {
        collaboratorSelectedContainer.innerHTML = '';
        teamArray.forEach(function (teamId) {
            const team = collaboratorDataTeam.find(option => option.id === teamId);
            if (team) {
                const teamElement = document.createElement('div');
                let nameLength = team.name.length;
                teamElement.innerHTML = `<span class="selected-collaborator-element team">
                                            <p>${nameLength > 25 ? team.name.substring(0,25)+"..." : team.name}</p>
                                            <i id="${team.id}+${idSuffixes['team']}" class="mdi mdi-close"></i>
                                        </span>`;
                
                if (nameLength > 25) {
                    teamElement.classList.add('tooltip-collaborator', 'tooltip-collaborator--top');
                    teamElement.setAttribute('data-tooltip', team.name); // Use data-tooltip attribute to store tooltip content
                }

                collaboratorSelectedContainer.appendChild(teamElement);
            }
        });
    
        userArray.forEach(function (userId) {
            const user = collaboratorDataUser.find(option => option.id === userId);
            if (user) {
                const userElement = document.createElement('div');
                let nameLength = user.name.length;
                let userInnerElement = `<span class="selected-collaborator-element user">
                                            <p>`;
                if (user.userstatus && user.userstatus === 1) {
                    userInnerElement += `<img class="collaborator-dropdown-icon-deactivated-user" src="${BASE_IMAGES_URL}/deactivated-user.svg"/>`;
                }

                userInnerElement += `${nameLength > 25 ? user.name.substring(0, 25) + '...' : user.name}</p>
                                           <i id="${user.id}+${idSuffixes['user']}" class="mdi mdi-close"></i>
                                        </span>`;
                userElement.innerHTML = userInnerElement;

                if (nameLength > 25) {
                    userElement.classList.add('tooltip-collaborator', 'tooltip-collaborator--top');
                    userElement.setAttribute('data-tooltip', user.name); // Use data-tooltip attribute to store tooltip content
                }
                collaboratorSelectedContainer.appendChild(userElement);
            }
        });
    }

    function checkOptions(userArray, teamArray, idSuffixes, collaboratorSelectedContainer) {
        collaboratorDataUser.forEach((user) => {
            const div = document.getElementById(user.id + idSuffixes['user']);
            if (div) {
                const checkbox = div.querySelector('.checkbox');
                if (checkbox) {
                    if(userArray.includes(user.id)) {
                        checkbox.checked = true;
                    } else {
                        checkbox.checked = false;
                    }
                }
            }  
        });
    
        collaboratorDataTeam.forEach((team) => {
            const div = document.getElementById(team.id + idSuffixes['team']);
            if (div) {
                const checkbox = div.querySelector('.checkbox');
                if (checkbox) {
                    if(teamArray.includes(team.id)) {
                        checkbox.checked = true;
                    } else {
                        checkbox.checked = false;
                    }
                }
            }
        });
        updateSelectedCollaborator(collaboratorSelectedContainer, userArray, teamArray, idSuffixes);    
    }

    // Function to remove data from local storage
    function removeItemsFromLocalStorageByPattern(pattern) {
        for (var key in localStorage) {
            if (localStorage.hasOwnProperty(key) && key.startsWith(pattern)) {
                localStorage.removeItem(key);
            }
        }
    }
    function fillOffLimitsData(offLimitsStatus, entityType, entityClass){
        let statusLabel = offLimitsStatus.status_label;
        let offLimitsMarkedBy = (offLimitsStatus.firstname != null ? offLimitsStatus.firstname : "") + " " + (offLimitsStatus.lastname != null ? offLimitsStatus.lastname : "");
        let offLimitsFrom = offLimitsStatus.created_on ? getDateTime(offLimitsStatus.created_on) : 'No Start Date';
        let offLimitsTo = offLimitsStatus.off_limit_end_date ? getDateTime(offLimitsStatus.off_limit_end_date) : 'No End Date';
        $('#' + entityType + ' .exists-message-container .' + entityClass).toggleClass('d-block', true).toggleClass('d-none', false);
        $('#' + entityType + ' .exists-message-container .' + entityClass + ' .off-limits-label').text(statusLabel != undefined && statusLabel != '' ? statusLabel : '').css('color', offLimitsStatus.text_color_hex);
        $('#' + entityType + ' .exists-message-container .' + entityClass + ' #sTest-offLimitsIcon').attr('fill', offLimitsStatus.text_color_hex);
        $('#' + entityType + ' .exists-message-container .' + entityClass + ' .off-limits-marked-by').text(offLimitsMarkedBy != undefined && offLimitsMarkedBy != '' ? offLimitsMarkedBy : '');
        $('#' + entityType + ' .exists-message-container .' + entityClass + ' .off-limits-marked-from').text(offLimitsFrom != undefined && offLimitsFrom != '' ? offLimitsFrom : '');
        $('#' + entityType + ' .exists-message-container .' + entityClass + ' .off-limits-marked-to').text(offLimitsTo != undefined && offLimitsTo != '' ? offLimitsTo : '');
    }

    function getDateTime(timestamp) {
        let months = {'01': 'Jan', '02': 'Feb', '03': 'Mar', '04': 'Apr', '05': 'May', '06': 'Jun', '07': 'Jul', '08': 'Aug', '09': 'Sep', '10': 'Oct', '11': 'Nov', '12': 'Dec'};
        let date = new Date(timestamp*1000);
        let month  = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1)));
        let dat = ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) ;
        let year = date.getFullYear();

        return months[month] + " " + dat + ", " + year;
    }
    document.getElementById('selected_meeting_type').addEventListener('click', function(event) {
        toggleMeetingTypeDropdown(event);
    });
    $('#add_appointment_followup .close-modal').click(function() {
            selectedMeetingType = meetingTypeList.find(meetingType => meetingType.default == 1)?.id || 1; // Set to default meeting type ID
            updateSelectedMeetingType(); 
    });
    
    function toggleMeetingTypeDropdown(event) {
        const meetingTypeDropdown = document.getElementById('meeting_type');
        if (meetingTypeDropdown.style.display === 'none' || meetingTypeDropdown.style.display === '') {
            meetingTypeDropdown.style.display = 'block';
            const searchInput = document.getElementById('meetingtype_search');
            searchInput.addEventListener('input', function() {
                createMeetingTypeDropdown(event,this.value);
            });
            createMeetingTypeDropdown();
        } else {
            meetingTypeDropdown.style.display = 'none';
        }
    }
    function createMeetingTypeDropdown(event,searchedValue = '') {
        const meetingTypeDropdownContainer = document.getElementById('meeting_type_dropdown_options');
        const searchInput = document.getElementById('meetingtype_search');
    
        if (!meetingTypeDropdownContainer || !searchInput) {
            console.error('Dropdown container or search input not found');
            return;
        }
    
        meetingTypeDropdownContainer.innerHTML = ''; // Clear previous options
    
        const filteredMeetingTypes = meetingTypeList.filter(meetingType =>
            meetingType.label.toLowerCase().includes(searchedValue.toLowerCase())
        );
    
        filteredMeetingTypes.forEach(meetingType => {
            const option = document.createElement('div');
            option.id = `meetingtype_${meetingType.id}`;
            option.value = meetingType.id;
            option.textContent = meetingType.label;
            option.classList.add('meetingtype-option', 'dropdown-container-option');
            option.addEventListener('click', function() {
                selectMeetingType(meetingType.id);
            });
            meetingTypeDropdownContainer.appendChild(option);
        });
    }
    function populateDefaultMeetingType() {
        const defaultMeetingType = meetingTypeList.find(meetingType => meetingType.default == 1);
        if (defaultMeetingType) {
            selectedMeetingType = defaultMeetingType.id;
        }
        updateSelectedMeetingType();
    }
    function selectMeetingType(meetingTypeId) {
        selectedMeetingType = meetingTypeId;
        updateSelectedMeetingType();
        document.getElementById('meeting_type').style.display = 'none';
    }
    
    function updateSelectedMeetingType() {
        const selectedContainer = document.getElementById('selected_meeting_type');
        if (selectedContainer) {
            selectedContainer.innerHTML = '';
    
            if (selectedMeetingType) {
                const meetingType = meetingTypeList.find(meetingType => meetingType.id === selectedMeetingType);
                const selectedElement = document.createElement('div');
                selectedElement.id = `selected_meeting_type_${selectedMeetingType}`;
                selectedElement.classList.add('selected-meetingtype-element');
                selectedElement.innerHTML = `<p class="dynamic-truncate-text">${meetingType.label}</p><i id="selectedCrossButton_${selectedMeetingType}" class="mdi mdi-close"></i>`;
                selectedContainer.appendChild(selectedElement);
    
                // Add event listener to remove selection
                selectedElement.querySelector('.mdi-close').addEventListener('click', function() {
                    selectedMeetingType = '';
                    updateSelectedMeetingType();
                });
            } else {
                selectedContainer.innerHTML = `<p class="meetingtype-placeholder">Select Meeting Type</p>`;
            }
        }
    }
    document.getElementById('selected_task_type').addEventListener('click', function(event) {
        toggleTaskTypeDropdown(event);
    });
    $('#add_task_followup .close-modal').click(function() {
            selectedTaskType = taskTypeList.find(taskType => taskType.default == 1)?.id || 1; // Set to default task type ID
            updateSelectedTaskType(); 
    });
    
    function toggleTaskTypeDropdown(event) {
        const taskTypeDropdown = document.getElementById('task_type');
        if (taskTypeDropdown.style.display === 'none' || taskTypeDropdown.style.display === '') {
            taskTypeDropdown.style.display = 'block';
            const searchInput = document.getElementById('tasktype_search');
            searchInput.addEventListener('input', function() {
                createTaskTypeDropdown(event,this.value);
            });
            createTaskTypeDropdown();
        } else {
            taskTypeDropdown.style.display = 'none';
        }
    }
    function createTaskTypeDropdown(event,searchedValue = '') {
        const taskTypeDropdownContainer = document.getElementById('task_type_dropdown_options');
        const searchInput = document.getElementById('tasktype_search');
    
        if (!taskTypeDropdownContainer || !searchInput) {
            console.error('Dropdown container or search input not found');
            return;
        }
    
        taskTypeDropdownContainer.innerHTML = ''; // Clear previous options
    
        const filteredTaskTypes =taskTypeList.filter(taskType =>
            taskType.label.toLowerCase().includes(searchedValue.toLowerCase())
        );
    
        filteredTaskTypes.forEach(taskType => {
            const option = document.createElement('div');
            option.id = `tasktype_${taskType.id}`;
            option.value = taskType.id;
            option.textContent = taskType.label;
            option.classList.add('tasktype-option', 'dropdown-container-option');
            option.addEventListener('click', function() {
                selectTaskType(taskType.id);
            });
            taskTypeDropdownContainer.appendChild(option);
        });
    }
    function populateDefaultTaskType() {
        const defaultTaskType = taskTypeList.find(taskType => taskType.default == 1);
        if (defaultTaskType) {
            selectedTaskType = defaultTaskType.id;
        }
        updateSelectedTaskType();
    }
    function selectTaskType(taskTypeId) {
        selectedTaskType = taskTypeId;
        updateSelectedTaskType();
        document.getElementById('task_type').style.display = 'none';
    }
    
    function updateSelectedTaskType() {
        const selectedContainer = document.getElementById('selected_task_type');
        if (selectedContainer) {
            selectedContainer.innerHTML = '';
    
            if (selectedTaskType) {
                const taskType = taskTypeList.find(taskType => taskType.id === selectedTaskType);
                const selectedElement = document.createElement('div');
                selectedElement.id = `selected_task_type_${selectedTaskType}`;
                selectedElement.classList.add('selected-tasktype-element');
                selectedElement.innerHTML = `<p class="dynamic-truncate-text">${taskType.label}</p><i id="selectedCrossButton_${selectedTaskType}" class="mdi mdi-close"></i>`;
                selectedContainer.appendChild(selectedElement);
    
                // Add event listener to remove selection
                selectedElement.querySelector('.mdi-close').addEventListener('click', function() {
                    selectedTaskType = '';
                    updateSelectedTaskType();
                });
            } else {
                selectedContainer.innerHTML = `<p class="tasktype-placeholder">Select Task Type</p>`;
            }
        }
    }
    function populateDefaultNoteType() {
        if(!flagForNoteTypeOnExtension) return;
        var defaultNoteType = noteTypeList.find(noteType => noteType.default == 1);
        if(defaultNoteType) {
            selectedCandidateNoteType = defaultNoteType.id;
            selectedContactNoteType = defaultNoteType.id;
            selectedCompanyNoteType = defaultNoteType.id;
        }
        updateSelectedElement('candidate');
        updateSelectedElement('contact');
        updateSelectedElement('company');
    }

        const candidateNoteTypeContainer = document.getElementById('candidate_selected_notetype');
        const contactNoteTypeContainer = document.getElementById('contact_selected_notetype');
        const companyNoteTypeContainer = document.getElementById('company_selected_notetype');

        if(candidateNoteTypeContainer) {
            candidateNoteTypeContainer.addEventListener('click', function(event) {
                toggleNoteTypeDropdown(event, 'candidate');
            });
        }

        if(contactNoteTypeContainer) {
            contactNoteTypeContainer.addEventListener('click', function(event) {
                toggleNoteTypeDropdown(event, 'contact');
            });
        }

        if(companyNoteTypeContainer) {
            companyNoteTypeContainer.addEventListener('click', function(event) {
                toggleNoteTypeDropdown(event, 'company');
            });
        }
    
    function toggleNoteTypeDropdown(event, entityName) {
        const noteTypeDropDown = document.getElementById(entityName + '_note_notetype');
        if(noteTypeDropDown) {
            if (noteTypeDropDown.style.display === 'none' || noteTypeDropDown.style.display === '') {
                noteTypeDropDown.style.display = 'block';
                const searchInput = document.getElementById(entityName + '_notetype_search');
                searchInput.addEventListener('input', function() {
                    createNoteTypeDropDown(event, entityName, this.value);
                });
                createNoteTypeDropDown(event, entityName);
            } else {
                noteTypeDropDown.style.display = 'none';
            }
        }
    }
    
    function createNoteTypeDropDown(event, entityName, searchedValue = '') {
        const noteTypeDropDownContainer = document.getElementById(entityName + '_notetype_dropdown_options');
        
        const searchInput = document.getElementById(entityName + '_notetype_search');
        if (!noteTypeDropDownContainer || !searchInput) {
            console.error('Dropdown container or search input not found');
            return;
        } else {
            noteTypeDropDownContainer.style.display='block'
            // Function to update dropdown options
            const filteredOptionsNoteType = noteTypeList.filter(noteType => noteType.label.toLowerCase().includes(searchedValue.toLowerCase()));

            // Clear existing options, but keep the search input
            noteTypeDropDownContainer.innerHTML = '';
            filteredOptionsNoteType.forEach(noteType => {
                const option = document.createElement('div');
                option.id = `${entityName}_notetype_${noteType.id}`;
                option.value = noteType.id;
                option.textContent = noteType.label;
                option.classList.add('notetype-option', 'dropdown-container-option');
                noteTypeDropDownContainer.appendChild(option);
            });
        }
    }

        const candidateNoteTypeDropDownContainer = document.getElementById('candidate_notetype_dropdown_options');
        const contactNoteTypeDropDownContainer = document.getElementById('contact_notetype_dropdown_options');
        const companyNoteTypeDropDownContainer = document.getElementById('company_notetype_dropdown_options');

        if(candidateNoteTypeDropDownContainer) {
            candidateNoteTypeDropDownContainer.addEventListener('click', function(event) {
                const clickedElement = event.target;
                var clickedElementId = clickedElement.id;
                if (clickedElementId.includes('candidate_notetype_')) {
                    var clickedElementId = clickedElement.id;
                    selectedCandidateNoteType = parseInt(clickedElement.value);
                    updateSelectedElement('candidate');
                }
            });
        }

        if(contactNoteTypeDropDownContainer) {
            contactNoteTypeDropDownContainer.addEventListener('click', function(event) {
                const clickedElement = event.target;
                var clickedElementId = clickedElement.id;
                if (clickedElementId.includes('contact_notetype_')) {
                    var clickedElementId = clickedElement.id;
                    selectedContactNoteType = parseInt(clickedElement.value);
                    updateSelectedElement('contact');
                }
            });
        }

        if(companyNoteTypeDropDownContainer) {
            companyNoteTypeDropDownContainer.addEventListener('click', function(event) {
                const clickedElement = event.target;
                var clickedElementId = clickedElement.id;
                if (clickedElementId.includes('company_notetype_')) {
                    var clickedElementId = clickedElement.id;
                    selectedCompanyNoteType = parseInt(clickedElement.value);
                    updateSelectedElement('company');
                }
            });
        }
    function updateSelectedElement(entityName) {
        selectedContainer = document.getElementById(entityName + '_selected_notetype');
        if(selectedContainer) {
            selectedNoteTypeId = '';
            if(entityName == 'candidate') {
                selectedNoteTypeId = selectedCandidateNoteType;
            } else if(entityName == 'contact') {
                selectedNoteTypeId = selectedContactNoteType;
            } else if(entityName == 'company') {
                selectedNoteTypeId = selectedCompanyNoteType;
            }
            if(selectedNoteTypeId != '') {
                var createSelectedElement = document.createElement('div');
                createSelectedElement.id = entityName + '_selected_notetype_' + selectedNoteTypeId;
                createSelectedElement.classList.add('selected-notetype-element');
                createSelectedElement.innerHTML = `<p class="dynamic-truncate-text" >${noteTypeList.find(noteType => noteType.id == selectedNoteTypeId).label}</p><i id= "${entityName+'_selectedCrossButton_'+selectedNoteTypeId}"class="mdi mdi-close"></i>`;
                selectedContainer.innerHTML = '';
                selectedContainer.appendChild(createSelectedElement);
            } else {
                selectedContainer.innerHTML = `<p class="notetype-placeholder">Select Note Type</p>`;
            }

            selectedContainer.addEventListener('click', function(event) {
                event.preventDefault();
                clickedElementId = event.target.id;
                if(clickedElementId.includes('candidate_selectedCrossButton')) {
                    clickedCrossId = parseInt(clickedElementId.replace('candidate_selectedCrossButton_', ''));
                    if(clickedCrossId == selectedCandidateNoteType) {
                        selectedCandidateNoteType = '';
                        updateSelectedElement('candidate');
                        document.getElementById('candidate_note_notetype').style.display = 'block';
                        document.getElementById('candidate_notetype_dropdown_options').style.display = 'block';
                    }   
                } else if(clickedElementId.includes('contact_selectedCrossButton')) {
                    clickedCrossId = parseInt(clickedElementId.replace('contact_selectedCrossButton_', ''));
                    if(clickedCrossId == selectedContactNoteType) {
                        selectedContactNoteType = '';
                        updateSelectedElement('contact');
                        document.getElementById('contact_note_notetype').style.display = 'block';
                        document.getElementById('contact_notetype_dropdown_options').style.display = 'block';
                    }
                } else if(clickedElementId.includes('company_selectedCrossButton')) {
                    clickedCrossId = parseInt(clickedElementId.replace('company_selectedCrossButton_', ''));
                    if(clickedCrossId == selectedCompanyNoteType) {
                        selectedCompanyNoteType = '';
                        updateSelectedElement('company');
                        document.getElementById('company_note_notetype').style.display = 'block';
                        document.getElementById('company_notetype_dropdown_options').style.display = 'block';
                    }
                }

            });
        }
        const noNoteType = document.getElementById(entityName + '_note_notetype');
        if(noNoteType) {
            noNoteType.style.display = 'none';
        }
    }
    function createContactOptions(options, searchTerm = "") {
        let optionContainer = document.getElementById('companyContactsDropdownOptions');
         optionContainer.innerHTML = '';
         if(searchTerm.length === 0) {
             optionContainer.innerHTML = '<div class = "collaborators-not-found">Please enter 1 or more characters</div>';
             return;
         }
 
         // Create and append options
          options.forEach(function (option) {
             const optionElement = document.createElement('div');
             
             optionElement.className = 'custom-option user-option';
             optionElement.id = 'contactId' + option.id ;
             let nameLength = option.title.length;
             
             optionElement.innerHTML = `
                 <input type="checkbox" class="checkbox" id="${'contactId' + option.id}">
                 <img class="company-contacts-icon" src="${option.photo ? option.photo.split(',')[0] : BASE_IMAGES_URL + '/Teammates.svg'}"/>
                 <div id="${'contactId' + option.id}">
                     ${nameLength>20 ? option.title.substring(0,20)+'...' : option.title}
                     ${' (ID : ' + option.srno + ')'}
                 </div>
             `;
 
             if (nameLength > 20) {
                 optionElement.classList.add('tooltip-collaborator', 'tooltip-collaborator--top');
                 optionElement.setAttribute('data-tooltip', option.title); // Use data-tooltip attribute to store tooltip content
             }
     
             // Append the option to the container
             optionContainer.appendChild(optionElement);
         });
 
         if(options.length==0) {
             const notFound = document.createElement('div');
             notFound.className = 'collaborators-not-found';
             notFound.innerText = "No results found"
             optionContainer.appendChild(notFound);
         }
               
     }
 
     function handleSelectedCompanyContacts(clickedElementId) {
         const id = clickedElementId.substr(clickedElementId.indexOf("contactId") + 9);
         if(id != ''){
             const clickedElement = selectedCompanyContacts.find(contact => contact.id == id);
             if(clickedElement){
                 const index = selectedCompanyContacts.indexOf(clickedElement);
                 if(index != -1){
                     selectedCompanyContacts.splice(index, 1);
                 }
             }else{
                 const contact = companyContactOptions.find(contact => contact.id == id);
                 if(contact){
                     selectedCompanyContacts.push(contact);
                 }
             }
             
             if(companyColumns.contactid.required_on_form == true && selectedCompanyContacts.length > 0){
                 document.getElementById('companyExistingContactsErrorMessage').style.display = 'none';
             }else if (companyColumns.contactid.required_on_form == true && selectedCompanyContacts.length == 0){
                 document.getElementById('companyExistingContactsErrorMessage').style.display = 'block';
             }
             
             createSelectedContacts();
             checkContactOptions();
         }
     }
 
     function checkContactOptions(){
         companyContactOptions.forEach((contact) => {
             const checkbox = document.querySelector('.custom-option.user-option #contactId' + contact.id + '.checkbox');
             if (checkbox) {
                 let ele = selectedCompanyContacts.find( res => res.id == contact.id);
                 if(ele) {
                     checkbox.checked = true;
                 } else {
                     checkbox.checked = false;
                 }
             }
         });
     }
 
     function createSelectedContacts(){
         let companySelectedContactsContainer = document.getElementById('companySelectedContacts');
         companySelectedContactsContainer.innerHTML = '';
         selectedCompanyContacts.forEach(function (contact) {
             if (contact) {
                 const contactElement = document.createElement('div');
                 let nameLength = contact.title.length;
                 contactElement.innerHTML = `<span class="selected-collaborator-element user">
                                             <p>${nameLength > 25 ? contact.title.substring(0,25)+'...' : contact.title}</p>
                                         <i id="contactId${contact.id}" class="mdi mdi-close"></i>
                                         </span>`;
 
                 if (nameLength > 25) {
                     contactElement.classList.add('tooltip-collaborator', 'tooltip-collaborator--top');
                     contactElement.setAttribute('data-tooltip', contact.title); // Use data-tooltip attribute to store tooltip content
                 }
                 companySelectedContactsContainer.appendChild(contactElement);
             }
         });
     }

     function getDateTimeValue(dateTime){
        let date = new Date(dateTime*1000);
        let month  = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1)));
        let day = ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) ;
        let year = date.getFullYear();

        let hours = String(date.getHours()).padStart(2, '0');
        let minutes = String(date.getMinutes()).padStart(2, '0');

        return '' + year + '-' + month + '-' + day + 'T' + hours + ':' + minutes;
    }

    function getNestedFieldsForEntity(entityTypeId){
        sendMessageToParent({
            "message": "getNestedCustomFields",
            "payload": { "entityTypeId" : entityTypeId }
        });
     }

    function getDefaultOptionsForEntity(entityTypeId){
        sendMessageToParent({
            "message": "getDefaultOptions",
            "payload": { "entityTypeId" : entityTypeId }
        });
     }

    function isParentField(nestedFields, field){
        if(field != undefined){
            return nestedFields.some(element => {
                return element[field] != undefined;
            });
        } else {
            return false;
        }
    }

    function extractRootNodesAndChildren(data) {
        const rootNodes = [];
        const childrenNodes = [];
      
        function recurseChildren(children) {
          for (const childKey in children) {
            childrenNodes.push(childKey);
            if (children[childKey].children && Object.keys(children[childKey].children).length > 0) {
              recurseChildren(children[childKey].children);
            }
          }
        }
      
        data.forEach(item => {
          for (const rootKey in item) {
            rootNodes.push(rootKey);
            if (item[rootKey].children && Object.keys(item[rootKey].children).length > 0) {
              recurseChildren(item[rootKey].children);
            }
          }
        });
      
        return [rootNodes, childrenNodes];
    }

    function extractRootNodesAndChildrenForEntities(){
       for(entity in nestedCustomFieldEntities[0]) {
            let nodes = extractRootNodesAndChildren(nestedCustomFieldEntities[0][entity].nestedFields);
            nestedCustomFieldEntities[0][entity].rootNodes = nodes[0];
            nestedCustomFieldEntities[0][entity].children = nodes[1];
        };
    }

    function canRenderCustomField(entityTypeId, customFieldId, fieldKey){
        if(fieldKey.substring(0,10) != 'custcolumn'){
            return true;
        }
        if(entityTypeId == companyContactEntityTypeId){
            entityTypeId = contactEntityTypeId;
        }
        if(customFieldId != undefined && customFieldId != null && customFieldId != 0){
            return nestedCustomFieldEntities[0][entityTypeId].rootNodes.some( id => id == customFieldId) || !nestedCustomFieldEntities[0][entityTypeId].children.some(id => id == customFieldId);
        } else {
            return false;
        }
    }

    function getParentField(parentKey, entityTypeId) {
        let result = null;

        if(entityTypeId == companyContactEntityTypeId){
            entityTypeId = contactEntityTypeId;
        }
        
        function traverse(node) {
            for (const key in node) {
                if (key == parentKey) {
                  result = { [key]: node[key] };
                  return;
                }
                if (node[key].children) {
                  traverse(node[key].children);
                }
              }
        }
    
        nestedCustomFieldEntities[0][entityTypeId].nestedFields.forEach(item => traverse(item));
        return result;
    }

    function getOptionId(customFieldId, optionLabel, entityTypeId, isMultiSelectField){

        let optionIds = [];
        if(entityTypeId == companyContactEntityTypeId){
            entityTypeId = contactEntityTypeId;
        }

        if(nestedCustomFieldEntities[0][entityTypeId].defaultOptions[customFieldId]){
            for (const item of nestedCustomFieldEntities[0][entityTypeId].defaultOptions[customFieldId]) {
                if (isMultiSelectField && Array.isArray(optionLabel)) {
                    if(optionLabel.includes(item['label'])){
                        optionIds.push(item['id']);
                    }
                } else if (item['label'] == optionLabel) {
                    return item['id'];
                }
            }
            if(optionIds.length > 0){
                return optionIds;
            }
            return -1;
        }
    }

    function getChildOptionsList(customFieldId, childOptionIds, entityTypeId){
        let options = [];

        if(entityTypeId == companyContactEntityTypeId){
            entityTypeId = contactEntityTypeId;
        }

        if(childOptionIds && nestedCustomFieldEntities[0][entityTypeId].defaultOptions[customFieldId]){
            for (const item of nestedCustomFieldEntities[0][entityTypeId].defaultOptions[customFieldId]) {
                for (const optionId of childOptionIds) {
                  if (item['id'] == optionId) {
                    options.push(item['label']);
                    break;
                  }
                }
            }
        }
        return options;

    }

    function getColumnsByEntity(entityTypeId){

        let columns = [];

        if(entityTypeId == contactEntityTypeId || entityTypeId == companyContactEntityTypeId){
            columns = contactColumns;
        } else if (entityTypeId == companyEntityTypeId){
            columns = companyColumns;
        } else if (entityTypeId == candidateEntityTypeId){
            columns = candidateColumns;
        }
        return columns;
    }

    function getCustomFieldKeyById(customFieldId, entityTypeId){

        let columns = getColumnsByEntity(entityTypeId);

        if(entityTypeId == companyContactEntityTypeId){
            entityTypeId = contactEntityTypeId;
        }

        for(const key in columns){
            if(columns[key]['custom_field_id'] == customFieldId){
                return key;
            }
        }
    }

    function getEntityByEntityTypeId(entityTypeId){
        if(entityTypeId == contactEntityTypeId){
            return 'Contact';
        } else if (entityTypeId == companyEntityTypeId){
            return 'Company';
        } else if (entityTypeId == candidateEntityTypeId){
            return '';
        } else if (entityTypeId == companyContactEntityTypeId){
            return 'CompanyContact';
        }
    }

    function setFieldsVisibleOnExtensionForEntity(fieldKey, fieldValue, entityTypeId){
        if(entityTypeId == contactEntityTypeId){
            fieldsVisibleOnExtensionForContact[fieldKey] = fieldValue;
        } else if (entityTypeId == companyEntityTypeId){
            fieldsVisibleOnExtensionForCompany[fieldKey] = fieldValue;
        } else if (entityTypeId == candidateEntityTypeId){
            fieldsVisibleOnExtension[fieldKey] = fieldValue;
        } else if (entityTypeId == companyContactEntityTypeId){
            fieldsVisibleOnExtensionForCompanyContact[fieldKey] = fieldValue;
        }
    }

    function getFieldsVisibleOnExtensionForEntity(fieldKey, entityTypeId){
        if(entityTypeId == contactEntityTypeId){
            return fieldsVisibleOnExtensionForContact[fieldKey];
        } else if (entityTypeId == companyEntityTypeId){
            return fieldsVisibleOnExtensionForCompany[fieldKey];
        } else if (entityTypeId == candidateEntityTypeId){
            return fieldsVisibleOnExtension[fieldKey];
        } else if (entityTypeId == companyContactEntityTypeId){
            return fieldsVisibleOnExtensionForCompanyContact[fieldKey];
        }
    }

    function deleteFieldValueForEntity(fieldKey, entityTypeId){
        setFieldsVisibleOnExtensionForEntity(fieldKey, null, entityTypeId)
    }

    function setMultiselectCustomFields(entityFieldKey, entityTypeId){
        if(entityTypeId == contactEntityTypeId){
            multiselectCustomFieldsForContact.push(entityFieldKey);
        } else if(entityTypeId == companyEntityTypeId){
            multiselectCustomFieldsForCompany.push(entityFieldKey);
        } else if(entityTypeId == candidateEntityTypeId){
            multiselectCustomFields.push(entityFieldKey);
        } else if(entityTypeId == companyContactEntityTypeId){
            multiselectCustomFieldsForCompanyContact.push(entityFieldKey);
        }
    }

    function setListofMultiselectColumnForEntity(entityFieldKey, entity, entityTypeId){
        let key = entityFieldKey+'SelectedOptionContainerFor'+entity+'Multiselect';
        if(entityTypeId == contactEntityTypeId){
            listofmultiselectcolumnForContact[entityFieldKey] = key;
        } else if(entityTypeId == companyEntityTypeId){
            listofmultiselectcolumnForCompany[entityFieldKey] = key;
        } else if(entityTypeId == candidateEntityTypeId){
            listofmultiselectcolumn[entityFieldKey] = key;
        } else if(entityTypeId == companyContactEntityTypeId){
            listofmultiselectcolumnForCompanyContact[entityFieldKey] = key;
        }
    }

    function setMultiSelectFieldsVisibleOnExtensionForEntity(entityFieldKey, entityTypeId, entity){
        setFieldsVisibleOnExtensionForEntity(entityFieldKey, [], entityTypeId);
        for (let key in defaultSelectedOptions[entityFieldKey+'For'+entity]){
            let multiSelectValue = getFieldsVisibleOnExtensionForEntity(entityFieldKey, entityTypeId);
            multiSelectValue.push(defaultSelectedOptions[entityFieldKey+'For'+entity][key]);
            setFieldsVisibleOnExtensionForEntity(entityFieldKey, multiSelectValue, entityTypeId);
        }
    }

    function setFileTypeCustomFieldsForEntity(entityFieldKey, entityTypeId){
        if(entityTypeId == contactEntityTypeId){
            fileTypeCustomFieldsForContact.push(entityFieldKey);
        } else if(entityTypeId == companyEntityTypeId){
            fileTypeCustomFieldsForCompany.push(entityFieldKey);
        } else if(entityTypeId == candidateEntityTypeId){
            fileTypeCustomFields.push(entityFieldKey);
        } else if(entityTypeId == companyContactEntityTypeId){
            fileTypeCustomFieldsForCompanyContact.push(entityFieldKey);
        }
    }

    function setDropdownCustomFieldsForEntity(entityFieldKey, entityTypeId){
        if(entityTypeId == contactEntityTypeId){
            dropdownCustomFieldsForContact.push(entityFieldKey);
        } else if(entityTypeId == companyEntityTypeId){
            dropdownCustomFieldsForCompany.push(entityFieldKey);
        } else if(entityTypeId == candidateEntityTypeId){
            dropdownCustomFields.push(entityFieldKey);
        } else if(entityTypeId == companyContactEntityTypeId){
            dropdownCustomFieldsForCompanyContact.push(entityFieldKey);
        }
    }

    function getVisibilityStatus(field, optionId, isMultiSelectField){
        if(isMultiSelectField && Array.isArray(optionId)){
            return optionId.some((id) => {
                return field[id] == 1;
            });
        } else {
            return field[optionId] == 1;
        }
    }

    function getChildOptionIds(field, optionId, isMultiSelectField){
        let childOptionIds = [];
        if(isMultiSelectField && Array.isArray(optionId)){
            optionId.forEach((id) => {
                if(field[id] != undefined){
                    childOptionIds.push(field[id]);
                }
            });
            return [...new Set(childOptionIds.flat())];
        } else {
            return field[optionId] != undefined ? field[optionId] : [];
        }
    }

    function addEventListenerForCustomFields(inputElement, fieldType){
        if(fieldType == 'longtext'){
            inputElement.addEventListener('input', (event) => {
                // Get the value entered in the textarea element
                const textareaValue = event.target.value;
                const entity_form_name = event.target.form.id;
                // Get the ID of the textarea element
                const textareaId = event.target.id;
                
                // Save the value in the JavaScript object with the textarea ID as the key
                if (fieldsVisibleOnExtension.hasOwnProperty(textareaId)){
                    // set the error message visibility to none
                    if (document.getElementById(textareaId + 'ErrorMessage')){
                        document.getElementById(textareaId + 'ErrorMessage').style.display = 'none';
                    }

                    if (document.getElementById(textareaId + 'ContactErrorMessage')){
                        document.getElementById(textareaId + 'ContactErrorMessage').style.display = 'none';
                    }

                    if (document.getElementById(textareaId + 'CompanyErrorMessage')){
                        document.getElementById(textareaId + 'CompanyErrorMessage').style.display = 'none';
                    }

                    fieldsVisibleOnExtension[textareaId] = textareaValue;
                }
                if(entity_form_name == 'contact_form'){
                    const newTextAreaId = textareaId.replace('ForContact','');
                    if (fieldsVisibleOnExtensionForContact.hasOwnProperty(newTextAreaId)){
                        fieldsVisibleOnExtensionForContact[newTextAreaId] = textareaValue;
                    }

                    if (document.getElementById(textareaId + 'ContactErrorMessage')){
                        document.getElementById(textareaId + 'ContactErrorMessage').style.display = 'none';
                    }

                    if (document.getElementById(textareaId + 'CompanyErrorMessage')){
                        document.getElementById(textareaId + 'CompanyErrorMessage').style.display = 'none';
                    }

                }else if(entity_form_name == 'company_form'){
                    var newTextAreaId = ''
                    if(textareaId.includes('ForCompanyContact')){
                        newTextAreaId = textareaId.replace('ForCompanyContact','');
                        if (fieldsVisibleOnExtensionForCompanyContact.hasOwnProperty(newTextAreaId)){
                            fieldsVisibleOnExtensionForCompanyContact[newTextAreaId] = textareaValue;
                        }
                    }else{
                        newTextAreaId = textareaId.replace('ForCompany','');
                        if (fieldsVisibleOnExtensionForCompany.hasOwnProperty(newTextAreaId)){
                            fieldsVisibleOnExtensionForCompany[newTextAreaId] = textareaValue;
                        }
                    }
                    if (document.getElementById(textareaId + 'ContactErrorMessage')){
                        document.getElementById(textareaId + 'ContactErrorMessage').style.display = 'none';
                    }

                    if (document.getElementById(textareaId + 'CompanyErrorMessage')){
                        document.getElementById(textareaId + 'CompanyErrorMessage').style.display = 'none';
                    }
                }
            });

        } else {

            inputElement.addEventListener('input', (event) => {
                // Get the value entered in the input element
                const inputValue = event.target.value;
                
                // Get the ID of the input element
                const inputId = event.target.id;
                const entity_form_name = event.target.form.id;
                // Save the value in the JavaScript object with the input ID as the key
                if (fieldsVisibleOnExtension.hasOwnProperty(inputId)){
                    // set the error message visibility to none
                    if (document.getElementById(inputId + 'ErrorMessage')){
                        document.getElementById(inputId + 'ErrorMessage').style.display = 'none';
                    }

                    if (document.getElementById(inputId + 'ContactErrorMessage')){
                        document.getElementById(inputId + 'ContactErrorMessage').style.display = 'none';
                    }

                    if (document.getElementById(inputId + 'CompanyErrorMessage')){
                        document.getElementById(inputId + 'CompanyErrorMessage').style.display = 'none';
                    }

                    fieldsVisibleOnExtension[inputId] = inputValue;

                    if (candidateColumns[inputId]['type'] == 'number' || candidateColumns[inputId]['type'] == 'decimal'){
                        fieldsVisibleOnExtension[inputId] = parseFloat(inputValue);
                    }
                    if((inputId == 'salaryexpectation' || inputId == 'currentsalary') && inputValue == ''){
                        fieldsVisibleOnExtension[inputId] = 0;
                    }
                }

                if(entity_form_name == 'contact_form'){
                    var newInputId = inputId.replace('ForContact','');
                    if (fieldsVisibleOnExtensionForContact.hasOwnProperty(newInputId)){
                        fieldsVisibleOnExtensionForContact[newInputId] = inputValue;
                        if (contactColumns[newInputId]['type'] == 'number' || contactColumns[newInputId]['type'] == 'decimal'){
                            fieldsVisibleOnExtensionForContact[newInputId] = parseFloat(inputValue);
                        }

                        if (document.getElementById(newInputId + 'ContactErrorMessage')){
                            document.getElementById(newInputId + 'ContactErrorMessage').style.display = 'none';
                        }

                        if (document.getElementById(newInputId + 'CompanyErrorMessage')){
                            document.getElementById(newInputId + 'CompanyErrorMessage').style.display = 'none';
                        }
                    }
                }else if(entity_form_name == 'company_form'){
                    var newInputId = '';
                    if(inputId.includes('ForCompanyContact')){
                        newInputId = inputId.replace('ForCompanyContact','');
                        if (fieldsVisibleOnExtensionForCompanyContact.hasOwnProperty(newInputId)){
                            fieldsVisibleOnExtensionForCompanyContact[newInputId] = inputValue;
                            if (contactColumns[newInputId]['type'] == 'number' || contactColumns[newInputId]['type'] == 'decimal'){
                                fieldsVisibleOnExtensionForCompanyContact[newInputId] = parseFloat(inputValue);
                            }
                        }
                        if (document.getElementById(newInputId + 'ContactErrorMessage')){
                            document.getElementById(newInputId + 'ContactErrorMessage').style.display = 'none';
                        }

                        if (document.getElementById(newInputId + 'CompanyErrorMessage')){
                            document.getElementById(newInputId + 'CompanyErrorMessage').style.display = 'none';
                        }

                        if (document.getElementById(newInputId + 'CompanyContactErrorMessage')){
                            document.getElementById(newInputId + 'CompanyContactErrorMessage').style.display = 'none';
                        }
                    }else{
                        newInputId = inputId.replace('ForCompany','');
                        if (fieldsVisibleOnExtensionForCompany.hasOwnProperty(newInputId)){
                            fieldsVisibleOnExtensionForCompany[newInputId] = inputValue;
                            if (companyColumns[newInputId]['type'] == 'number' || companyColumns[newInputId]['type'] == 'decimal'){
                                fieldsVisibleOnExtensionForCompany[newInputId] = parseFloat(inputValue);
                            }
                        }
                        if (document.getElementById(newInputId + 'ContactErrorMessage')){
                            document.getElementById(newInputId + 'ContactErrorMessage').style.display = 'none';
                        }

                        if (document.getElementById(newInputId + 'CompanyErrorMessage')){
                            document.getElementById(newInputId + 'CompanyErrorMessage').style.display = 'none';
                        }

                        if (document.getElementById(newInputId + 'CompanyContactErrorMessage')){
                            document.getElementById(newInputId + 'CompanyContactErrorMessage').style.display = 'none';
                        }
                    }
                }

            });
        }
    }

    function renderDropDownOptions(e, dropdownOption, entityFieldKey, entityTypeId, entity, entityFieldObject, options){
        let matchesCount = 0;
        let searchValue = e.target.value.trim();
        let optionsList = dropdownOption;

        optionsList.innerHTML = '';
        for (let option of options){
            if (option.toLowerCase().includes(searchValue.toLowerCase())){
                const li = document.createElement('li');
                li.textContent = option;
                li.id = entityFieldKey + options.indexOf(option);
                li.addEventListener('click', (e) => {
                    handleOptionClickForDropDown(e, entityFieldObject, entityFieldKey, entityTypeId, entity);
                });
                li.style.cursor = 'pointer';
                li.style.marginBottom = '5px';
                li.style.padding = '5px';
                li.style.color = 'black';
                optionsList.appendChild(li);
                matchesCount += 1;

                li.addEventListener('mouseover', function () {
                    li.style.backgroundColor = '#f5f5f5';
                });

                li.addEventListener('mouseout', function () {
                    li.style.backgroundColor = 'white';
                });
            }
        }

        if (matchesCount == 0){
            const li = document.createElement('li');
            li.textContent = 'No Results Found';
            li.style.marginBottom = '5px';
            li.style.padding = '5px';
            li.style.color = 'black';
            li.style.backgroundColor = '#E8E8E8';
            li.style.border = '1px solid #F8FAFB';
            optionsList.appendChild(li);
        }

        if ( matchesCount < 5 ) {
            optionsList.style.height = 'auto';
            optionsList.style.overflowY = 'hidden';
        }

        else {
            optionsList.style.height = '200px';
            optionsList.style.overflowY = 'scroll';
        }

        matchesCount = 0;
    }

    function handleOptionClickForDropDown(e, entityFieldObject, entityFieldKey, entityTypeId, entity) {
        const selectedOption = e.target.textContent;
        let idOfTheLabel = selectedOption;

        setFieldsVisibleOnExtensionForEntity(entityFieldKey, idOfTheLabel, entityTypeId);

        if(flagForNestedCustomFields){
            parentOptionSelected(entityFieldObject, entityFieldKey, idOfTheLabel, entityTypeId);
        }

        let idOfLabel = entityFieldKey + 'buttonFor' + entity + 'DropDown';
        if(entityTypeId == candidateEntityTypeId){
            idOfLabel = entityFieldKey + 'button';
        }
        const labelComponenet = document.getElementById(idOfLabel);
        labelComponenet.textContent = selectedOption;
        labelComponenet.style.color = 'black';
        toggleOptionsContainerForDropDown(entityFieldKey, entity);
    }

    function toggleOptionsContainerForDropDown(entityFieldKey, entity) {
        document.getElementById(entityFieldKey + 'OptionsOuterContainerFor' + entity + 'DropDown').style.display = document.getElementById(entityFieldKey + 'OptionsOuterContainerFor' + entity + 'DropDown').style.display === 'none' ? 'block' : 'none';
    }

    function renderTextField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer){

        let entity = getEntityByEntityTypeId(entityTypeId);
        let outerDivContiner = document.createElement('div');
        outerDivContiner.id = entityFieldKey + entity + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        let labelContainer = document.createElement('label');
        labelContainer.setAttribute('class', 'rcrm-headings-label');
        labelContainer.innerHTML = entityFieldObject['label'];

        // block for required fields validation
        labelContainer.id = entityFieldKey + entity + 'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = entityFieldKey + entity +'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + entityFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (entityFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            labelContainer.innerHTML = entityFieldObject['label'] + ' <span style="color: red;">*</span>';
        }

        let inputContainer = document.createElement('input');
        inputContainer.type = 'text';
        inputContainer.id = entityFieldKey + 'For' + entity;
        if(entityTypeId == candidateEntityTypeId){
            inputContainer.id = entityFieldKey;
        }
        inputContainer.style.width = '95%';
        inputContainer.setAttribute('class', 'rcrm-ctrl');

        outerDivContiner.appendChild(labelContainer);
        outerDivContiner.appendChild(errorMessage);
        outerDivContiner.appendChild(inputContainer);

        addEventListenerForCustomFields(inputContainer, entityFieldObject['type']);

        parentFieldContainer.appendChild(outerDivContiner);
    }

    function renderNumberField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer){
        
        let entity = getEntityByEntityTypeId(entityTypeId);
        let outerDivContiner = document.createElement('div');
        outerDivContiner.id = entityFieldKey + entity + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        let labelContainer = document.createElement('label');
        labelContainer.setAttribute('class', 'rcrm-headings-label');
        labelContainer.innerHTML = entityFieldObject['label'];

        // block for required fields validation
        labelContainer.id = entityFieldKey + entity + 'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = entityFieldKey + entity +'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + entityFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (entityFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            labelContainer.innerHTML = entityFieldObject['label'] + ' <span style="color: red;">*</span>';
        }

        let inputContainer = document.createElement('input');
        inputContainer.type = 'number';
        inputContainer.id = entityFieldKey+ 'For' + entity;
        if(entityTypeId == candidateEntityTypeId){
            inputContainer.id = entityFieldKey;
        }
        inputContainer.setAttribute('style', 'width:95%; ');
        inputContainer.setAttribute('class', 'rcrm-ctrl');

        inputContainer.addEventListener("keydown", function(event) {
            if (event.key === 'e' || event.key === 'E' || event.key === '+') {
                event.preventDefault();
            }
        });

        inputContainer.step = "0.01";
        inputContainer.addEventListener("input", () => {
            let value = inputContainer.value;

            // set the error message visibility to none
            document.getElementById(entityFieldKey + entity +'ErrorMessage').style.display = 'none';

            const parts = value.split('.');
            if (parts.length == 2 && parts[1].length > 2){
                parts[1] = parts[1].slice(0, 2);
                inputContainer.value = parts.join('.');
            }
        });

        addEventListenerForCustomFields(inputContainer, entityFieldObject['type']);

        outerDivContiner.appendChild(labelContainer);
        outerDivContiner.appendChild(errorMessage);
        outerDivContiner.appendChild(inputContainer);

        parentFieldContainer.appendChild(outerDivContiner);
    }

    function renderEmailField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer){

        let entity = getEntityByEntityTypeId(entityTypeId);
        let outerDivContiner = document.createElement('div');
        outerDivContiner.id = entityFieldKey + entity + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        let labelContainer = document.createElement('label');
        labelContainer.setAttribute('class', 'rcrm-headings-label');
        labelContainer.innerHTML = entityFieldObject['label'];

        // block for required fields validation
        labelContainer.id = entityFieldKey + entity + 'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = entityFieldKey + entity + 'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + entityFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (entityFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            labelContainer.innerHTML = entityFieldObject['label'] + ' <span style="color: red;">*</span>';
        }


        let inputContainer = document.createElement('input');
        inputContainer.type = 'email';
        inputContainer.id = entityFieldKey+ 'For' + entity;
        if(entityTypeId == candidateEntityTypeId){
            inputContainer.id = entityFieldKey;
        }
        inputContainer.style.width = '95%';
        inputContainer.setAttribute('class', 'rcrm-ctrl');
        inputContainer.setAttribute('maxlength', "40");

        outerDivContiner.appendChild(labelContainer);
        outerDivContiner.appendChild(errorMessage);
        outerDivContiner.appendChild(inputContainer);

        addEventListenerForCustomFields(inputContainer, entityFieldObject['type']);

        parentFieldContainer.appendChild(outerDivContiner);
    }

    function renderLongTextField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer){

        let entity = getEntityByEntityTypeId(entityTypeId);

        let outerDivContiner = document.createElement('div');
        outerDivContiner.id = entityFieldKey + entity + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        let labelContainer = document.createElement('label');
        labelContainer.setAttribute('class', 'rcrm-headings-label');
        labelContainer.innerHTML = entityFieldObject['label'];

        // block for required fields validation
        labelContainer.id = entityFieldKey + entity +'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = entityFieldKey + entity +'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + entityFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (entityFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            labelContainer.innerHTML = entityFieldObject['label'] + ' <span style="color: red;">*</span>';
        }


        let inputContainer = document.createElement('textarea');
        inputContainer.type = 'text';
        inputContainer.id = entityFieldKey+ 'For' + entity;
        if(entityTypeId == candidateEntityTypeId){
            inputContainer.id = entityFieldKey;
        }
        inputContainer.setAttribute('class', 'rcrm-ctrl');
        inputContainer.setAttribute('style', 'height: 30px;width: 95%; border: 1px #E8E8E8 solid;margin-top: 5px; padding: 5px; font-size: 13px; border-radius: 5px;');

        outerDivContiner.appendChild(labelContainer);
        outerDivContiner.appendChild(errorMessage);
        outerDivContiner.appendChild(inputContainer);

        addEventListenerForCustomFields(inputContainer, entityFieldObject['type']);

        parentFieldContainer.appendChild(outerDivContiner);
    }

    function renderCheckBoxField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer, fillingData){

        let entity = getEntityByEntityTypeId(entityTypeId);
        // Get the container element where the checkbox will be added

        outerDivContiner = document.createElement('div');
        outerDivContiner.id = entityFieldKey + entity + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        // create the lable component:
        const headingOfField = document.createElement('label');
        headingOfField.setAttribute('class' ,"rcrm-headings-label rightCheckbox");
        headingOfField.setAttribute('style', 'margin-bottom:5px;');
        headingOfField.innerHTML = entityFieldObject['label'];

        // block for required fields validation
        headingOfField.id = entityFieldKey + entity +'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = entityFieldKey + entity +'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + entityFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (entityFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            headingOfField.innerHTML = entityFieldObject['label'] + ' <span style="color: red;">*</span>';
        }

        // Create the checkbox element
        const checkboxElement = document.createElement('input');
        checkboxElement.type = 'checkbox';
        checkboxElement.id = entityFieldKey+ 'For' + entity;
        if(entityTypeId == candidateEntityTypeId){
            checkboxElement.id = entityFieldKey;
        }
        checkboxElement.setAttribute('style', 'margin-bottom:15px;');

        // Add a change event listener to the checkbox element
        checkboxElement.addEventListener('change', (event) => {
            // Get the checked state of the checkbox element
            const isChecked = event.target.checked;
            
            let checkBoxvalue = '';
            // Save the checked state in the JavaScript object
            if (isChecked){
                // set the error message visibility to none
                document.getElementById(entityFieldKey + entity + 'ErrorMessage').style.display = 'none';

                setFieldsVisibleOnExtensionForEntity(entityFieldKey, '1', entityTypeId);
                checkBoxvalue = 'Yes';
            }
            else{
                setFieldsVisibleOnExtensionForEntity(entityFieldKey, '0', entityTypeId);
                checkBoxvalue = 'No';
            }

            if(flagForNestedCustomFields){
                parentOptionSelected(entityFieldObject, entityFieldKey, checkBoxvalue, entityTypeId);
            }
            
        });

        setFieldsVisibleOnExtensionForEntity(entityFieldKey, '0', entityTypeId);

        // Add the checkbox element to the container element
        outerDivContiner.appendChild(headingOfField);
        outerDivContiner.appendChild(checkboxElement);
        outerDivContiner.appendChild(errorMessage);

        parentFieldContainer.appendChild(outerDivContiner);
        if(!fillingData){
            parentOptionSelected(entityFieldObject, entityFieldKey, 'No', entityTypeId);
        }
    }

    function renderDateField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer){

        let entity = getEntityByEntityTypeId(entityTypeId);
        // Get the container element where the date input will be added

        let outerDivContiner = document.createElement('div');
        outerDivContiner.id = entityFieldKey + entity + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        // create the lable component:
        const headingOfField = document.createElement('label');
        headingOfField.setAttribute('class' ,"rcrm-headings-label");
        headingOfField.setAttribute('style', 'margin-bottom:5px;');
        headingOfField.innerHTML = entityFieldObject['label'];

        // block for required fields validation
        headingOfField.id = entityFieldKey + entity + 'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = entityFieldKey + entity + 'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + entityFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (entityFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            headingOfField.innerHTML = entityFieldObject['label'] + ' <span style="color: red;">*</span>';
        }

        outerDivContiner.appendChild(headingOfField);
        outerDivContiner.appendChild(errorMessage);

        // Create the date input element
        const dateElement = document.createElement('input');
        dateElement.type = 'date';
        dateElement.id = entityFieldKey+ 'For' + entity;
        if(entityTypeId == candidateEntityTypeId){
            dateElement.id = entityFieldKey;
        }
        dateElement.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border: 1px #E8E8E8 solid; border-radius: 5px; color: #777; padding-left: 5px; text-transform: uppercase; ');

        // Add a change event listener to the date input element
        dateElement.addEventListener('change', (event) => {
            // Get the selected date from the date input element
            const selectedDate = new Date(event.target.value);

            // set the error message visibility to none
            document.getElementById(entityFieldKey + entity + 'ErrorMessage').style.display = 'none';
            
            // Get the UNIX timestamp of the selected date
            const timestamp = selectedDate.getTime() / 1000;

            // change the color to black
            dateElement.style.color = 'black';
            if(flagForStandardDateField){
                var date = new Date(timestamp*1000);
                // var dat = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear();
                var month  = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1)));
                var dat = ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) ;
                var year = date.getFullYear();

                setFieldsVisibleOnExtensionForEntity(entityFieldKey, ''+year+'-'+month+'-'+dat, entityTypeId);
            }else{
                // Save the UNIX timestamp in the JavaScript object
                setFieldsVisibleOnExtensionForEntity(entityFieldKey, timestamp, entityTypeId);
            }
            

            if (selectedDate == 'Invalid Date'){
                dateElement.style.color = '#777';
                setFieldsVisibleOnExtensionForEntity(entityFieldKey, null, entityTypeId);
            }
            
        });

        // Add the date input element to the container element
        outerDivContiner.appendChild(dateElement);
        parentFieldContainer.appendChild(outerDivContiner);
        setFieldsVisibleOnExtensionForEntity(entityFieldKey, null, entityTypeId);
    }

    function renderDateTimeField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer){
        // Get the container element where the date time input will be added
        let entity = getEntityByEntityTypeId(entityTypeId);

        // Get the container element where the date input will be added
        let outerDivContiner = document.createElement('div');
        outerDivContiner.id = entityFieldKey + entity + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        // create the lable component:
        const headingOfField = document.createElement('label');
        headingOfField.setAttribute('class' ,"rcrm-headings-label");
        headingOfField.setAttribute('style', 'margin-bottom:5px;');
        headingOfField.innerHTML = entityFieldObject['label'];

        // block for required fields validation
        headingOfField.id = entityFieldKey + entity + 'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = entityFieldKey + entity + 'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + entityFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (entityFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            headingOfField.innerHTML = entityFieldObject['label'] + ' <span style="color: red;">*</span>';
        }

        outerDivContiner.appendChild(headingOfField);
        outerDivContiner.appendChild(errorMessage);

        // Create the date input element
        const dateElement = document.createElement('input');
        dateElement.type = 'datetime-local';
        dateElement.id = entityFieldKey + 'For' + entity;
        if(entityTypeId == candidateEntityTypeId){
            dateElement.id = entityFieldKey;
        }
        dateElement.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border: 1px #E8E8E8 solid; border-radius: 5px; color: #777; padding-left: 5px; text-transform: uppercase; ');

        // Add a change event listener to the date input element
        dateElement.addEventListener('change', (event) => {
            // Get the selected date from the date input element
            const selectedDateTime = new Date(event.target.value);

            // set the error message visibility to none
            document.getElementById(entityFieldKey + entity +'ErrorMessage').style.display = 'none';
            
            // Get the UNIX timestamp of the selected date
            const timestamp = selectedDateTime.getTime() / 1000;

            // change the color to black
            dateElement.style.color = 'black';
            
            // Save the UNIX timestamp in the JavaScript object
            setFieldsVisibleOnExtensionForEntity(entityFieldKey, timestamp, entityTypeId);

            if (selectedDateTime == 'Invalid Date'){
                dateElement.style.color = '#777';
                setFieldsVisibleOnExtensionForEntity(entityFieldKey, null, entityTypeId);
            }
            
        });

        // Add the date input element to the container element
        outerDivContiner.appendChild(dateElement);
        parentFieldContainer.appendChild(outerDivContiner);
        setFieldsVisibleOnExtensionForEntity(entityFieldKey, null, entityTypeId);
    }

    function renderFileField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer){

        let entity = getEntityByEntityTypeId(entityTypeId);
        // Get the container element where the file input will be added

        let outerDivContiner = document.createElement('div');
        outerDivContiner.id = entityFieldKey + entity + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        // create the lable component:
        const headingOfField = document.createElement('label');
        headingOfField.setAttribute('class' ,"rcrm-headings-label");
        headingOfField.setAttribute('style', 'margin-bottom:5px;');
        headingOfField.innerHTML = entityFieldObject['label'];

        // block for required fields validation
        headingOfField.id = entityFieldKey + entity + 'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = entityFieldKey + entity + 'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + entityFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (entityFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            headingOfField.innerHTML = entityFieldObject['label'] + ' <span style="color: red;">*</span>';
        }

        // Create the file input element
        const fileElement = document.createElement('input');
        fileElement.type = 'file';
        fileElement.id = entityFieldKey + 'For' + entity;
        if(entityTypeId == candidateEntityTypeId){
            fileElement.id = entityFieldKey;
        }
        fileElement.setAttribute('style', 'margin-bottom:10px; border: 1px #E8E8E8 solid; font-size: 13px; display: none;');

        // Create the label element
        var label = document.createElement('label');
        label.setAttribute('for', entityFieldKey + 'For' + entity);
        label.setAttribute('id', entityFieldKey + 'For' + entity + 'label');
        label.setAttribute('style', 'display: inline-block; border: 1px solid #E8E8E8; background-color: white; cursor: pointer; width: 95%; height: 25px; margin-bottom: 10px; border-radius: 5px;');

        // Create the span element for the text
        var span = document.createElement('span');
        span.setAttribute('id', entityFieldKey + 'For' + entity + 'span');
        span.setAttribute('style', 'padding-right: 5px; padding-left: 5px; ');
        span.textContent = 'Upload File';

        // Create the icon element
        var icon = document.createElement('i');
        icon.setAttribute('class', 'mdi mdi-upload mdi-13px'); // Add your desired icon class here

        // Append the span and icon elements to the label
        label.appendChild(span);
        label.appendChild(icon);

        fileElement.addEventListener('change', (event) => {
            const uploadedFile = event.target.files[0];

            if (uploadedFile) {
                let nameOfFile = uploadedFile.name;

                // set the error message visibility to none
                document.getElementById(entityFieldKey + entity + 'ErrorMessage').style.display = 'none';

                if (nameOfFile.length < 28){
                    // span.textContent = nameOfFile;
                    document.getElementById(entityFieldKey + 'For' + entity + 'span').textContent = nameOfFile;
                    document.getElementById(entityFieldKey + 'For' + entity + 'span').style.color = 'black';
                }
                else {
                    nameOfFile = nameOfFile.split('.');
                    let firstHalfName = nameOfFile[0]?.slice(0, 25);
                    let completeName = firstHalfName + '.. .' + nameOfFile[nameOfFile.length - 1];
                    // span.textContent = completeName;
                    document.getElementById(entityFieldKey + 'For'+ entity + 'span').textContent = completeName;
                    document.getElementById(entityFieldKey + 'For' + entity + 'span').style.color = 'black';
                }
                
            } else {
                span.textContent = 'Upload File';
                document.getElementById(entityFieldKey + 'For' + entity + 'span').style.color = '';
            }
            let fileValue = uploadedFile ? uploadedFile : '';
            setFieldsVisibleOnExtensionForEntity(entityFieldKey, fileValue, entityTypeId);
        });

        // Add the file input element to the container element
        outerDivContiner.appendChild(headingOfField);
        outerDivContiner.appendChild(errorMessage);
        outerDivContiner.appendChild(fileElement);
        outerDivContiner.appendChild(label);

        parentFieldContainer.appendChild(outerDivContiner);
        setFileTypeCustomFieldsForEntity(entityFieldKey, entityTypeId);
    }

    function renderDropDownField(entityFieldObject, entityFieldKey, entityTypeId, options, parentFieldContainer, fillingData){
        let entity = getEntityByEntityTypeId(entityTypeId);
        if(!flagForSearchableDropdown){
            options.unshift('Select an option');
        }
   
        let outerDivContiner = document.createElement('div');
        outerDivContiner.id = entityFieldKey + entity + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        const headingOfField = document.createElement('label');
        headingOfField.setAttribute('class' ,"rcrm-headings-label");
        headingOfField.setAttribute('id',entityFieldKey+'Label');
        headingOfField.setAttribute('style', 'margin-bottom:5px; display: inline-block;');
        headingOfField.innerHTML = entityFieldObject['label'];

        // block for required fields validation
        headingOfField.id = entityFieldKey + entity + 'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = entityFieldKey + entity + 'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + entityFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (entityFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            headingOfField.innerHTML = entityFieldObject['label'] + ' <span style="color: red;">*</span>';
        }

        outerDivContiner.appendChild(headingOfField);
        outerDivContiner.appendChild(errorMessage);
    
        if(flagForSearchableDropdown){
            //block to show the button to view components
            let containerToShowDropdownOption = document.createElement('div');
            containerToShowDropdownOption.id = entityFieldKey + 'OuterContainerForOptionsFor' + entity + 'DropDown';
            containerToShowDropdownOption.style.width = 95 + '%';
            containerToShowDropdownOption.style.overflow = 'hidden';
            let buttonToShowDropdownOption = document.createElement('div');
            buttonToShowDropdownOption.id = entityFieldKey + 'buttonFor' + entity + 'DropDown';
            if(entityTypeId == candidateEntityTypeId){
                buttonToShowDropdownOption.id = entityFieldKey + 'button';
            }
            buttonToShowDropdownOption.innerHTML = "Select from List";
            containerToShowDropdownOption.appendChild(buttonToShowDropdownOption);

            // input component for search
            let searchInput = document.createElement('input');
            searchInput.setAttribute('type', 'text');
            searchInput.setAttribute('id', entityFieldKey + 'searchFor' + entity + 'DropDown');
            searchInput.setAttribute('placeholder', 'Please Search & Select');
            searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
            searchInput.setAttribute('class', 'rcrm-ctrl');

            // block to show the option container
            let containerDropdownOption = document.createElement('div');
            containerDropdownOption.id = entityFieldKey + 'OptionsOuterContainerFor' + entity + 'DropDown';
            let dropdownOption = document.createElement('ul');
            dropdownOption.id = entityFieldKey + 'optionsFor' + entity + 'DropDown';
            dropdownOption.setAttribute('style', 'list-style: none;');
            containerDropdownOption.appendChild(searchInput);
            containerDropdownOption.appendChild(dropdownOption);

            searchInput.addEventListener('input', function(e){
                renderDropDownOptions(e, dropdownOption, entityFieldKey, entityTypeId, entity, entityFieldObject, options);
            });
            
            // Add event listener for keydown event to prevent Enter key press
            searchInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                }
            });

            outerDivContiner.appendChild(containerToShowDropdownOption);
            outerDivContiner.appendChild(containerDropdownOption);
            
            const optionsList = dropdownOption;
            const toggleButton = buttonToShowDropdownOption;

            // we don't need a scroll bar if the lenght of options list is less than or equal to 5
            if (options.length > 5){
                optionsList.style.height = '200px';
                optionsList.style.overflowY = 'scroll';
            }

            toggleButton.style.cursor = 'pointer';
            toggleButton.style.padding = '3px';
            toggleButton.style.border = '1px solid #E8E8E8';
            toggleButton.style.height = '30px';
            toggleButton.style.marginBottom = '5px';
            toggleButton.style.borderRadius = '5px';
            toggleButton.style.paddingLeft = '5px';


            // Set CSS properties dynamically on the Dropdown Options Container
            containerDropdownOption.style.display = 'none';
            containerDropdownOption.style.border = '1px solid #E8E8E8';
            containerDropdownOption.style.padding = '10px';
            containerDropdownOption.style.marginBottom = '5px';
            containerDropdownOption.style.borderRadius = '5px';

            // Set toggle button click event
            toggleButton.addEventListener('click', () => {
                toggleOptionsContainerForDropDown(entityFieldKey, entity);
            });

            // dropdown data
            const data = options;

            // Generate options dynamically
            data.forEach((option, index) => {
                const li = document.createElement('li');
                li.textContent = option;
                li.id = entityFieldKey + index;
                li.addEventListener('click', (e) => {
                    handleOptionClickForDropDown(e, entityFieldObject, entityFieldKey, entityTypeId, entity);
                });

                // Attach CSS properties dynamically
                li.style.cursor = 'pointer';
                li.style.marginBottom = '5px';
                li.style.padding = '5px';
                li.style.color = 'black';

                li.addEventListener('mouseover', function () {
                    li.style.backgroundColor = '#f5f5f5';
                });

                li.addEventListener('mouseout', function () {
                    li.style.backgroundColor = 'white';
                });

                optionsList.appendChild(li);
            });

        }
        else {
            // Create the dropdown dropdown
            const select = document.createElement("select");
            select.setAttribute('style', 'margin-bottom:10px; width:95%; height: 25px; border-color: #E8E8E8; font-size: 13px; font-weight: 400; border-radius: 5px; color: #777; padding-left: 1px; ');
            let index = 0;
            select.setAttribute('id', entityFieldKey+'For' + entity);

            // Create the options with checkboxes
            for (let option of options) {
                const checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.value = option;
                checkbox.id = entityFieldKey+index;

                const label = document.createElement("label");
                label.textContent = option;
                label.htmlFor = option;
                label.id = entityFieldKey+index;

                const optionContainer = document.createElement("option");
                optionContainer.id = index;
                optionContainer.appendChild(label);
                select.appendChild(optionContainer);
                select.appendChild(checkbox);
                index += 1 ;
            }

            outerDivContiner.appendChild(select);

            // Event listener to capture selected values
            select.addEventListener("change", (event) => {
                const selectedOptions = [...event.target.selectedOptions].map((option) => option.value);
            // set the error message visibility to none
            document.getElementById(entityFieldKey + entity + 'ErrorMessage').style.display = 'none';
                if (selectedOptions[0] == 'Select an option'){
                    setFieldsVisibleOnExtensionForEntity(entityFieldKey, '', entityTypeId);
                    select.style.color = '#777';
                }
                else {
                    setFieldsVisibleOnExtensionForEntity(entityFieldKey, selectedOptions, entityTypeId);
                    select.style.color = 'black';
                }
            });
        }
        parentFieldContainer.appendChild(outerDivContiner);
        setDropdownCustomFieldsForEntity(entityFieldKey, entityTypeId);
        if(!fillingData){
            parentOptionSelected(entityFieldObject, entityFieldKey, '', entityTypeId);
        }
    }

    function renderMultiselectOptions(optionsList, selectedList, selectedValues, entityFieldKey, entityTypeId, entity, data, entityFieldObject){
        optionsList.innerHTML = '';
        selectedList.innerHTML = '';
        data.forEach((option, index) => {
            const li = document.createElement('li');
            li.textContent = option;
            li.id = 'For'+entity+'Multiselect'+entityFieldKey + index;
            li.addEventListener('click', handleOptionClick);

            // Attach CSS properties dynamically
            li.style.cursor = 'pointer';
            li.style.marginBottom = '5px';
            li.style.padding = '5px';
            li.style.color = 'black';
            li.style.overflow = 'hidden';
            // li.style.backgroundColor = '#E8E8E8';

            const checkbox=document.createElement('input');
            checkbox.type="checkbox";

            checkbox.id= 'For'+entity+'Multiselect'+entityFieldKey+'checkbox'+index;
            
            multiselectCheckboxValueContainer['For'+entity+'Multiselect'+entityFieldKey]['For'+entity+'Multiselect'+entityFieldKey + 'checkbox' + index] = option;
            checkbox.style.marginRight='10px';
            checkbox.style.cursor='pointer';
            checkbox.style.verticalAlign='middle';
            checkbox.addEventListener('click',handleMultiselectCheckboxClick);
            
            li.insertBefore(checkbox,li.firstChild);

            li.addEventListener('mouseover', function () {
                li.style.backgroundColor = '#f5f5f5';
            });

            li.addEventListener('mouseout', function () {
                li.style.backgroundColor = 'white';
            });

            optionsList.appendChild(li);
            document.getElementById('For'+entity+'Multiselect'+entityFieldKey + 'checkbox' + index).value = option;
        });

        function handleMultiselectCheckboxClick(e) {

            // stop the event propagation
            e.stopPropagation();

            // get the id of the checkbox
            let checkboxId = e.target.id;
        
            
            let selectedOption = multiselectCheckboxValueContainer['For'+entity+'Multiselect'+entityFieldKey][checkboxId];
            let selectedOptionId = checkboxId.replace('checkbox', '');
            
            let markAsChecked = e.target.checked;

            // if the checkbox is checked then add the option to the selected list
            if (markAsChecked && !(selectedOptionId in defaultSelectedOptions[entityFieldKey+'For'+ entity])){

                defaultSelectedOptions[entityFieldKey+'For'+entity][selectedOptionId] = selectedOption;

                setMultiSelectFieldsVisibleOnExtensionForEntity(entityFieldKey, entityTypeId, entity);

                let multiSelectValue = getFieldsVisibleOnExtensionForEntity(entityFieldKey, entityTypeId);
                if(flagForNestedCustomFields){
                    parentOptionSelected(entityFieldObject, entityFieldKey, multiSelectValue, entityTypeId);
                }
            
                selectedValues.push(selectedOption);


                // Create a new list item in the selected list
                const selectedListItem = document.createElement('li');
                selectedListItem.textContent = selectedOption;

                // Attach CSS properties dynamically
                selectedListItem.style.cursor = 'pointer';
                selectedListItem.style.marginBottom = '2px';
                selectedListItem.style.border = '1px solid #F8FAFB';
                // selectedListItem.style.backgroundColor = '#E8E8E8';
                selectedListItem.style.color = 'black';
                selectedListItem.style.paddingLeft = '5px';
                selectedListItem.setAttribute('id', selectedOptionId + 'Selected');

                // Add hover styling
                selectedListItem.addEventListener('mouseenter', function() {
                    selectedListItem.style.backgroundColor = '#D3E2E2';
                    selectedListItem.style.transform = 'scale(0.97)';
                    // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                });
                
                selectedListItem.addEventListener('mouseleave', function() {
                    selectedListItem.style.backgroundColor = 'white';
                    selectedListItem.style.transform = 'scale(1)';
                    // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                });

                document.getElementById(entityFieldKey + 'SelectedOptionContainerFor'+entity+'Multiselect').style.display = 'inline-block';
                if (selectedValues.length == 1){
                    selectedList.style.height = '40px';
                }
                else{
                    selectedList.style.height = '60px';
                }
                selectedList.appendChild(selectedListItem);

                // Create remove option cross mark
                const removeOption = document.createElement('span');
                removeOption.textContent = 'X';
                removeOption.style.float = 'right';
                removeOption.style.marginRight = '5px';
                removeOption.style.color = 'black';
                removeOption.style.marginTop = '3px';
                removeOption.style.fontSize = '10px';
                removeOption.id = selectedOptionId + 'removeOption'+'For'+entity+'Multiselect';

                removeOption.classList.add('remove-option');

                removeOption.addEventListener('click', function () {
                    removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                });

                // Create remove option circle
                const removeOptionCircle = document.createElement('span');
                removeOptionCircle.classList.add('remove-option-circle');

                // Append the removeOptionCircle to the removeOption
                removeOption.appendChild(removeOptionCircle);

                // Add hover styling to the removeOption element
                removeOption.addEventListener('mouseenter', function() {
                    selectedListItem.style.backgroundColor = '#f3dbdb';
                    removeOptionCircle.style.display = 'inline-block';
                });
                
                removeOption.addEventListener('mouseleave', function() {
                    selectedListItem.style.backgroundColor = '#E8E8E8';
                    removeOptionCircle.style.display = 'none';
                });

                selectedListItem.appendChild(removeOption);
            }


            else if (!markAsChecked){
                // dynamically click the li element to remove the selected option
                const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption'+'For'+entity+'Multiselect');
                if (removeOptionButton){
                    removeOptionButton.click();
                }
            }
        }

        // Click event handler for options
        function handleOptionClick(e) {
            const selectedOption = e.target.textContent;
            const selectedOptionId = e.target.id;
            // Add the selected value to the tracking array
            if (!(selectedOptionId in defaultSelectedOptions[entityFieldKey+'For'+entity])){

                // set the error message visibility to none
                document.getElementById(entityFieldKey + entity +'ErrorMessage').style.display = 'none';

                document.getElementById('For'+entity+'Multiselect'+entityFieldKey + 'checkbox' + selectedOptionId.replace('For'+entity+'Multiselect'+entityFieldKey, '')).checked = true;

                defaultSelectedOptions[entityFieldKey+'For'+entity][selectedOptionId] = selectedOption;


                setMultiSelectFieldsVisibleOnExtensionForEntity(entityFieldKey, entityTypeId, entity);

                let multiSelectValue = getFieldsVisibleOnExtensionForEntity(entityFieldKey, entityTypeId);
                if(flagForNestedCustomFields){
                    parentOptionSelected(entityFieldObject, entityFieldKey, multiSelectValue, entityTypeId);
                }
            
                selectedValues.push(selectedOption);

                // Create a new list item in the selected list
                const selectedListItem = document.createElement('li');
                selectedListItem.textContent = selectedOption;

                // Attach CSS properties dynamically
                selectedListItem.style.cursor = 'pointer';
                selectedListItem.style.marginBottom = '2px';
                selectedListItem.style.border = '1px solid #F8FAFB';
                // selectedListItem.style.backgroundColor = '#E8E8E8';
                selectedListItem.style.color = 'black';
                selectedListItem.style.paddingLeft = '5px';
                selectedListItem.setAttribute('id',selectedOptionId+'Selected');

                // Add hover styling
                selectedListItem.addEventListener('mouseenter', function() {
                    selectedListItem.style.backgroundColor = '#D3E2E2';
                    selectedListItem.style.transform = 'scale(0.97)';
                    // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                });
                
                selectedListItem.addEventListener('mouseleave', function() {
                    selectedListItem.style.backgroundColor = 'white';
                    selectedListItem.style.transform = 'scale(1)';
                    // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                });

                document.getElementById(entityFieldKey + 'SelectedOptionContainerFor'+entity+'Multiselect').style.display = 'inline-block';
                if (selectedValues.length == 1){
                    selectedList.style.height = '40px';
                }
                else{
                    selectedList.style.height = '60px';
                }
                selectedList.appendChild(selectedListItem);

                // Create remove option cross mark
                const removeOption = document.createElement('span');
                removeOption.textContent = 'X';
                removeOption.style.float = 'right';
                removeOption.style.marginRight = '5px';
                removeOption.style.color = 'black';
                removeOption.style.marginTop = '3px';
                removeOption.style.fontSize = '10px';
                removeOption.id=selectedOptionId+'removeOption'+'For'+entity+'Multiselect'
                removeOption.classList.add('remove-option');

                removeOption.addEventListener('click', function () {
                    removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                });

                // Create remove option circle
                const removeOptionCircle = document.createElement('span');
                removeOptionCircle.classList.add('remove-option-circle');

                // Append the removeOptionCircle to the removeOption
                removeOption.appendChild(removeOptionCircle);

                // Add hover styling to the removeOption element
                removeOption.addEventListener('mouseenter', function() {
                    selectedListItem.style.backgroundColor = '#f3dbdb';
                    removeOptionCircle.style.display = 'inline-block';
                });
                
                removeOption.addEventListener('mouseleave', function() {
                    selectedListItem.style.backgroundColor = '#E8E8E8';
                    removeOptionCircle.style.display = 'none';
                });

                selectedListItem.appendChild(removeOption);
            }
            else{
                document.getElementById('For'+entity+'Multiselect'+entityFieldKey + 'checkbox' + selectedOptionId.replace('For'+entity+'Multiselect'+entityFieldKey, '')).checked = false;
                const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption'+'For'+entity+'Multiselect');
                if (removeOptionButton){
                    removeOptionButton.click();
                }
            }
        }

        

        // Remove selected option
        function removeSelectedOption(option, listItem, selectedOptionId) {
            // Remove from the tracking array
            delete defaultSelectedOptions[entityFieldKey+'For'+entity][selectedOptionId];

            setMultiSelectFieldsVisibleOnExtensionForEntity(entityFieldKey, entityTypeId, entity);

            let multiSelectValue = getFieldsVisibleOnExtensionForEntity(entityFieldKey, entityTypeId);
            if(flagForNestedCustomFields){
                parentOptionSelected(entityFieldObject, entityFieldKey, multiSelectValue, entityTypeId);
            }
        
            // Remove the list item from the selected list
            listItem.remove();

            if (multiSelectValue.length == 0){
                document.getElementById(entityFieldKey + 'SelectedOptionContainerFor'+entity+'Multiselect').style.display = 'none';
                setFieldsVisibleOnExtensionForEntity(entityFieldKey, null, entityTypeId);
            }
            
            const correspondingCheckbox = document.getElementById(selectedOptionId.replace(entityFieldKey, entityFieldKey+'checkbox'));
            if (correspondingCheckbox){
                correspondingCheckbox.checked = false;
            }
        }
    }

    function renderMultiselectField(entityFieldObject, entityFieldKey, entityTypeId, options, parentFieldContainer, fillingData){
        let entity = getEntityByEntityTypeId(entityTypeId);

        // create dynamically the outer container 
        let outerDivContiner = document.createElement('div');
        outerDivContiner.id = entityFieldKey + entity + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        const headingOfField = document.createElement('label');
        headingOfField.setAttribute('class' ,"rcrm-headings-label");
        headingOfField.setAttribute('style', 'margin-bottom:5px;');
        headingOfField.innerHTML = entityFieldObject['label'];

        // block for required fields validation
        headingOfField.id = entityFieldKey + entity +'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = entityFieldKey + entity +'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + entityFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (entityFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            headingOfField.innerHTML = entityFieldObject['label'] + ' <span style="color: red;">*</span>';
        }


        outerDivContiner.appendChild(headingOfField);
        outerDivContiner.appendChild(errorMessage);

        // it will store the id and value of the selected options
        const selectedOptions = {};
        defaultSelectedOptions[entityFieldKey+'For'+entity] = {};
        setMultiselectCustomFields(entityFieldKey, entityTypeId);

        // block to show the button to view options 
        var containerToShowMultiselectOption = document.createElement('div');
        containerToShowMultiselectOption.id = entityFieldKey + 'OuterContainerForOptionsFor'+entity+'Multiselect';
        var buttonToShowMultiselectOption = document.createElement('div');
        buttonToShowMultiselectOption.id = entityFieldKey + 'buttonFor'+entity+'Multiselect';
        buttonToShowMultiselectOption.innerHTML = "Select from List";
        containerToShowMultiselectOption.appendChild(buttonToShowMultiselectOption);

        // block to show the option container

        let searchInput = null;
        if (flagForSearchableDropdown){
            // input component for search
            searchInput = document.createElement('input');
            searchInput.setAttribute('type', 'text');
            searchInput.setAttribute('id', entityFieldKey + 'searchFor'+entity+'Multiselect');
            searchInput.setAttribute('placeholder', 'Please Search & Select');
            searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
            searchInput.setAttribute('class', 'rcrm-ctrl');
        }

        var containerMultiselectOption = document.createElement('div');
        containerMultiselectOption.id = entityFieldKey + 'OptionsOuterContainerFor'+entity+'Multiselect';
        var multiselectOption = document.createElement('ul');
        multiselectOption.id = entityFieldKey + 'optionsFor'+entity+'Multiselect';
        multiselectOption.setAttribute('style', 'list-style: none;');
        if (flagForSearchableDropdown){
            containerMultiselectOption.appendChild(searchInput);
        }
        containerMultiselectOption.appendChild(multiselectOption);

        if (flagForSearchableDropdown){
            // when a search is performed we need to manipulate the options list
            searchInput.addEventListener('input', function(e){
                let searchValue = e.target.value.trim();
                let optionsList = document.getElementById(entityFieldKey + 'optionsFor'+entity+'Multiselect');
                let matchesCount = 0;
                let counter = 0;

                for (let option of options){
                    if (option.toLowerCase().includes(searchValue.toLowerCase())){
                        matchesCount += 1;
                        document.getElementById('For'+entity+'Multiselect'+entityFieldKey + counter).style.display = 'block';
                    }
                    else {
                        document.getElementById('For'+entity+'Multiselect'+entityFieldKey + counter).style.display = 'none';
                    }
                    counter += 1;
                }

                if (matchesCount == 0){
                    if (!document.getElementById(entityFieldKey + 'noResultsFor'+entity+'Multiselect')){
                        const li = document.createElement('li');
                        li.textContent = 'No Results Found';
                        li.style.marginBottom = '5px';
                        li.style.padding = '5px';
                        li.style.color = 'black';
                        li.style.backgroundColor = '#E8E8E8';
                        li.id = entityFieldKey + 'noResultsFor'+entity+'Multiselect';
                        li.style.border = '1px solid #F8FAFB';
                        optionsList.appendChild(li);
                    }
                }
                else if (matchesCount > 0) {
                    if (document.getElementById(entityFieldKey + 'noResultsFor'+entity+'Multiselect')){
                        optionsList.removeChild(document.getElementById(entityFieldKey + 'noResultsFor'+entity+'Multiselect'));
                    }
                }

                if ( matchesCount < 5 ) {
                    optionsList.style.height = 'auto';
                    optionsList.style.overflowY = 'hidden';
                }

                else {
                    optionsList.style.height = '200px';
                    optionsList.style.overflowY = 'scroll';
                }

                matchesCount = 0;
                optionsList = null;
            });

            // Add event listener for keydown event to prevent Enter key press
            searchInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                }
            });
        }

        // block to show the selected options container
        var containerMultiselectSelectedOption = document.createElement('div');
        containerMultiselectSelectedOption.id = entityFieldKey + 'SelectedOptionContainerFor'+entity+'Multiselect';
        setListofMultiselectColumnForEntity(entityFieldKey, entity, entityTypeId);
        var selectedMultiselectOption = document.createElement('ul');
        selectedMultiselectOption.setAttribute('style', 'list-style: none;');
        selectedMultiselectOption.id = entityFieldKey + 'SelectedOptionsFor'+entity+'Multiselect';
        containerMultiselectSelectedOption.appendChild(selectedMultiselectOption);

        outerDivContiner.appendChild(containerToShowMultiselectOption);
        outerDivContiner.appendChild(containerMultiselectOption);
        outerDivContiner.appendChild(containerMultiselectSelectedOption);

        parentFieldContainer.appendChild(outerDivContiner);
        if(!fillingData){
            parentOptionSelected(entityFieldObject, entityFieldKey, [], entityTypeId);
        }

        // Keep track of selected values
        let selectedValues = [];

        // Get options list and selected list elements
        const optionsList = multiselectOption;
        const selectedList = selectedMultiselectOption;
        const toggleButton = buttonToShowMultiselectOption;

        // we don't need a scroll bar if the lenght of options list is less than or equal to 5
        if (options.length > 5){
            optionsList.style.height = '200px';
            optionsList.style.overflowY = 'scroll';
        }

        selectedList.style.height = '50px';
        selectedList.style.overflowY = 'scroll';


        // Set CSS properties dynamically on the Multiselect button
        toggleButton.style.cursor = 'pointer';
        toggleButton.style.padding = '3px';
        toggleButton.style.border = '1px solid #E8E8E8';
        toggleButton.style.height = '30px';
        toggleButton.style.marginBottom = '5px';
        toggleButton.style.borderRadius = '5px';
        toggleButton.style.paddingLeft = '5px';

        // Set CSS properties dynamically on the Multiselect Options Container
        containerMultiselectOption.style.display = 'none';
        containerMultiselectOption.style.border = '1px solid #E8E8E8';
        containerMultiselectOption.style.padding = '10px';
        containerMultiselectOption.style.marginBottom = '5px';
        containerMultiselectOption.style.borderRadius = '5px';

        // Set CSS properties dynamically on the Multiselect Selected container
        containerMultiselectSelectedOption.style.display = 'none';
        containerMultiselectSelectedOption.style.border = '1px solid #E8E8E8';
        containerMultiselectSelectedOption.style.padding = '10px';
        containerMultiselectSelectedOption.style.width = '100%';
        containerMultiselectSelectedOption.style.borderRadius = '5px';
        containerMultiselectSelectedOption.style.marginBottom = '5px';

        // Set toggle button click event
        toggleButton.addEventListener('click', toggleOptionsContainer);

        // Toggle options container visibility
        function toggleOptionsContainer() {
            document.getElementById(entityFieldKey + 'OptionsOuterContainerFor'+entity+'Multiselect').style.display = document.getElementById(entityFieldKey + 'OptionsOuterContainerFor'+ entity +'Multiselect').style.display === 'none' ? 'block' : 'none';
        }
        
        multiselectCheckboxValueContainer['For'+entity+'Multiselect'+entityFieldKey]={};
        // Generate options dynamically
        renderMultiselectOptions(optionsList, selectedList, selectedValues, entityFieldKey, entityTypeId, entity, options, entityFieldObject);
    }

    function renderCandidateMultiselectField(candidateFieldObject, candidateFieldKey, entityTypeId, options, parentFieldContainer, fillingData){

        // create dynamically the outer container 
        let outerDivContiner = document.createElement('div');
        outerDivContiner.id = candidateFieldKey + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        const headingOfField = document.createElement('label');
        headingOfField.setAttribute('class' ,"rcrm-headings-label");
        headingOfField.setAttribute('style', 'margin-bottom:5px;');
        headingOfField.innerHTML = candidateFieldObject['label'];

        // block for required fields validation
        headingOfField.id = candidateFieldKey + 'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = candidateFieldKey + 'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + candidateFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (candidateFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            headingOfField.innerHTML = candidateFieldObject['label'] + ' <span style="color: red;">*</span>';
        }

        outerDivContiner.appendChild(headingOfField);
        outerDivContiner.appendChild(errorMessage);

        // it will store the id and value of the selected options
        const selectedOptions = {};
        defaultSelectedOptions[candidateFieldKey] = {};
        multiselectCustomFields.push(candidateFieldKey);

        // block to show the button to view options 
        var containerToShowMultiselectOption = document.createElement('div');
        containerToShowMultiselectOption.id = candidateFieldKey + 'OuterContainerForOptions';
        var buttonToShowMultiselectOption = document.createElement('div');
        buttonToShowMultiselectOption.id = candidateFieldKey + 'button';
        buttonToShowMultiselectOption.innerHTML = "Select from List";
        containerToShowMultiselectOption.appendChild(buttonToShowMultiselectOption);

        // block to show the option container

        let searchInput = null;
        if (flagForSearchableDropdown){
            // input component for search
            searchInput = document.createElement('input');
            searchInput.setAttribute('type', 'text');
            searchInput.setAttribute('id', candidateFieldKey + 'search');
            searchInput.setAttribute('placeholder', 'Please Search & Select');
            searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
            searchInput.setAttribute('class', 'rcrm-ctrl');
        }


        var containerMultiselectOption = document.createElement('div');
        containerMultiselectOption.id = candidateFieldKey + 'OptionsOuterContainer';
        var multiselectOption = document.createElement('ul');
        multiselectOption.id = candidateFieldKey + 'options';
        multiselectOption.setAttribute('style', 'list-style: none;');
        if (flagForSearchableDropdown){
            containerMultiselectOption.appendChild(searchInput);
        }
        containerMultiselectOption.appendChild(multiselectOption);

        if (flagForSearchableDropdown){
            // when a search is performed we need to manipulate the options list
            searchInput.addEventListener('input', function(e){
                let searchValue = e.target.value.trim();
                let optionsList = document.getElementById(candidateFieldKey + 'options');
                let matchesCount = 0;
                let counter = 0;
                // optionsList.innerHTML = '';

                for (let option of options){
                    if (option.toLowerCase().includes(searchValue.toLowerCase())){
                        matchesCount += 1;
                        document.getElementById(candidateFieldKey + counter).style.display = 'block';
                    }
                    else {
                        document.getElementById(candidateFieldKey + counter).style.display = 'none';
                    }
                    counter += 1;
                }

                if (matchesCount == 0){
                    if (!document.getElementById(candidateFieldKey + 'noResults')){
                        const li = document.createElement('li');
                        li.textContent = 'No Results Found';
                        li.style.marginBottom = '5px';
                        li.style.padding = '5px';
                        li.style.color = 'black';
                        li.style.backgroundColor = '#E8E8E8';
                        li.id = candidateFieldKey + 'noResults';
                        li.style.border = '1px solid #F8FAFB';
                        optionsList.appendChild(li);
                    }
                }
                else if (matchesCount > 0) {
                    if (document.getElementById(candidateFieldKey + 'noResults')){
                        optionsList.removeChild(document.getElementById(candidateFieldKey + 'noResults'));
                    }
                }

                if ( matchesCount < 5 ) {
                    optionsList.style.height = 'auto';
                    optionsList.style.overflowY = 'hidden';
                }

                else {
                    optionsList.style.height = '200px';
                    optionsList.style.overflowY = 'scroll';
                }

                matchesCount = 0;
                optionsList = null;
            });

            // Add event listener for keydown event to prevent Enter key press
            searchInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                }
            });
        }

        // block to show the selected options container
        var containerMultiselectSelectedOption = document.createElement('div');
        containerMultiselectSelectedOption.id = candidateFieldKey + 'SelectedOptionContainer';
        var selectedMultiselectOption = document.createElement('ul');
        selectedMultiselectOption.setAttribute('style', 'list-style: none;');
        selectedMultiselectOption.id = candidateFieldKey + 'SelectedOptions';
        containerMultiselectSelectedOption.appendChild(selectedMultiselectOption);

        outerDivContiner.appendChild(containerToShowMultiselectOption);
        outerDivContiner.appendChild(containerMultiselectOption);
        outerDivContiner.appendChild(containerMultiselectSelectedOption);
        parentFieldContainer.appendChild(outerDivContiner);
        
        if(!fillingData){
            parentOptionSelected(candidateFieldObject, candidateFieldKey,  [], entityTypeId);
        }

        // Keep track of selected values
        let selectedValues = [];

        // Get options list and selected list elements
        const optionsList = multiselectOption;
        const selectedList = selectedMultiselectOption;
        const toggleButton = buttonToShowMultiselectOption;

        // we don't need a scroll bar if the lenght of options list is less than or equal to 5
        if (options.length > 5){
            optionsList.style.height = '200px';
            optionsList.style.overflowY = 'scroll';
        }

        selectedList.style.height = '50px';
        selectedList.style.overflowY = 'scroll';


        // Set CSS properties dynamically on the Multiselect button
        toggleButton.style.cursor = 'pointer';
        toggleButton.style.padding = '3px';
        toggleButton.style.border = '1px solid #E8E8E8';
        toggleButton.style.height = '30px';
        toggleButton.style.marginBottom = '5px';
        toggleButton.style.borderRadius = '5px';
        toggleButton.style.paddingLeft = '5px';

        // Set CSS properties dynamically on the Multiselect Options Container
        containerMultiselectOption.style.display = 'none';
        containerMultiselectOption.style.border = '1px solid #E8E8E8';
        containerMultiselectOption.style.padding = '10px';
        containerMultiselectOption.style.marginBottom = '5px';
        containerMultiselectOption.style.borderRadius = '5px';

        // Set CSS properties dynamically on the Multiselect Selected container
        containerMultiselectSelectedOption.style.display = 'none';
        containerMultiselectSelectedOption.style.border = '1px solid #E8E8E8';
        containerMultiselectSelectedOption.style.padding = '10px';
        containerMultiselectSelectedOption.style.width = '100%';
        containerMultiselectSelectedOption.style.borderRadius = '5px';
        containerMultiselectSelectedOption.style.marginBottom = '5px';

        // Set toggle button click event
        toggleButton.addEventListener('click', toggleOptionsContainer);

        // Toggle options container visibility
        function toggleOptionsContainer() {
            document.getElementById(candidateFieldKey + 'OptionsOuterContainer').style.display = document.getElementById(candidateFieldKey + 'OptionsOuterContainer').style.display === 'none' ? 'block' : 'none';
        }

        // Sample data
        const data = options;

        multiselectCheckboxValueContainer[candidateFieldKey] = {};

        // Generate options dynamically
        data.forEach((option, index) => {
            const li = document.createElement('li');
            li.textContent = option;
            li.id = candidateFieldKey + index;
            li.addEventListener('click', handleOptionClick);

            // Attach CSS properties dynamically
            li.style.cursor = 'pointer';
            li.style.marginBottom = '5px';
            li.style.padding = '5px';
            li.style.color = 'black';
            li.style.overflow = 'hidden';
            // li.style.backgroundColor = '#E8E8E8';

            // create a checkboc type field and add it to the list
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.id = candidateFieldKey + 'checkbox' + index;
            multiselectCheckboxValueContainer[candidateFieldKey][candidateFieldKey + 'checkbox' + index] = option;
            checkbox.style.marginRight = '10px';
            checkbox.style.cursor = 'pointer';
            checkbox.style.verticalAlign = 'middle';
            checkbox.addEventListener('click', handleMultiselectCheckboxClick);

            li.insertBefore(checkbox, li.firstChild);


            li.addEventListener('mouseover', function () {
                li.style.backgroundColor = '#f5f5f5';
            });

            li.addEventListener('mouseout', function () {
                li.style.backgroundColor = 'white';
            });

            optionsList.appendChild(li);

            document.getElementById(candidateFieldKey + 'checkbox' + index).value = option;
        });


        function handleMultiselectCheckboxClick(e) {

            // stop the event propagation
            e.stopPropagation();

            // get the id of the checkbox
            let checkboxId = e.target.id;
            let selectedOption = multiselectCheckboxValueContainer[candidateFieldKey][checkboxId];
            let selectedOptionId = checkboxId.replace('checkbox', '');

            let markAsChecked = e.target.checked;

            // if the checkbox is checked then add the option to the selected list
            if (markAsChecked && !(selectedOptionId in defaultSelectedOptions[candidateFieldKey])){

                // set the error message display as none 
                document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';

                defaultSelectedOptions[candidateFieldKey][selectedOptionId] = selectedOption;

                fieldsVisibleOnExtension[candidateFieldKey] = [];
                for (let key in defaultSelectedOptions[candidateFieldKey]){
                    fieldsVisibleOnExtension[candidateFieldKey].push(defaultSelectedOptions[candidateFieldKey][key]);
                }

                if(flagForNestedCustomFields){
                    parentOptionSelected(candidateFieldObject, candidateFieldKey,  fieldsVisibleOnExtension[candidateFieldKey], candidateEntityTypeId);
                }
            
                selectedValues.push(selectedOption);


                // Create a new list item in the selected list
                const selectedListItem = document.createElement('li');
                selectedListItem.textContent = selectedOption;

                // Attach CSS properties dynamically
                selectedListItem.style.cursor = 'pointer';
                selectedListItem.style.marginBottom = '2px';
                selectedListItem.style.border = '1px solid #F8FAFB';
                // selectedListItem.style.backgroundColor = '#E8E8E8';
                selectedListItem.style.color = 'black';
                selectedListItem.style.paddingLeft = '5px';
                selectedListItem.setAttribute('id', selectedOptionId + 'Selected');

                // Add hover styling
                selectedListItem.addEventListener('mouseenter', function() {
                    selectedListItem.style.backgroundColor = '#D3E2E2';
                    selectedListItem.style.transform = 'scale(0.97)';
                    // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                });
                
                selectedListItem.addEventListener('mouseleave', function() {
                    selectedListItem.style.backgroundColor = 'white';
                    selectedListItem.style.transform = 'scale(1)';
                    // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                });

                document.getElementById(candidateFieldKey + 'SelectedOptionContainer').style.display = 'inline-block';
                if (selectedValues.length == 1){
                    selectedList.style.height = '40px';
                }
                else{
                    selectedList.style.height = '60px';
                }
                selectedList.appendChild(selectedListItem);

                // Create remove option cross mark
                const removeOption = document.createElement('span');
                removeOption.textContent = 'X';
                removeOption.style.float = 'right';
                removeOption.style.marginRight = '5px';
                removeOption.style.color = 'black';
                removeOption.style.marginTop = '3px';
                removeOption.style.fontSize = '10px';
                removeOption.id = selectedOptionId + 'removeOption';

                removeOption.classList.add('remove-option');

                removeOption.addEventListener('click', function () {
                    removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                });

                // Create remove option circle
                const removeOptionCircle = document.createElement('span');
                removeOptionCircle.classList.add('remove-option-circle');

                // Append the removeOptionCircle to the removeOption
                removeOption.appendChild(removeOptionCircle);

                // Add hover styling to the removeOption element
                removeOption.addEventListener('mouseenter', function() {
                    selectedListItem.style.backgroundColor = '#f3dbdb';
                    removeOptionCircle.style.display = 'inline-block';
                });
                
                removeOption.addEventListener('mouseleave', function() {
                    selectedListItem.style.backgroundColor = '#E8E8E8';
                    removeOptionCircle.style.display = 'none';
                });

                selectedListItem.appendChild(removeOption);
            }


            else if (!markAsChecked){
                // dynamically click the li element to remove the selected option
                const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption');
                if (removeOptionButton){
                    removeOptionButton.click();
                }
            }
        }

        // Click event handler for options
        function handleOptionClick(e) {
            const selectedOption = e.target.textContent;
            const selectedOptionId = e.target.id;

            // check if selectedOptionId contains checkbox in the id 

            // Add the selected value to the tracking array
            if (!(selectedOptionId in defaultSelectedOptions[candidateFieldKey])){
                // set the error message display as none 
                document.getElementById(candidateFieldKey + 'ErrorMessage').style.display = 'none';

                // mark the corresponding checkbox as checked
                document.getElementById(candidateFieldKey + 'checkbox' + selectedOptionId.replace(candidateFieldKey, '')).checked = true;


                defaultSelectedOptions[candidateFieldKey][selectedOptionId] = selectedOption;

                fieldsVisibleOnExtension[candidateFieldKey] = [];
                for (let key in defaultSelectedOptions[candidateFieldKey]){
                    fieldsVisibleOnExtension[candidateFieldKey].push(defaultSelectedOptions[candidateFieldKey][key]);
                }

                if(flagForNestedCustomFields){
                    parentOptionSelected(candidateFieldObject, candidateFieldKey,  fieldsVisibleOnExtension[candidateFieldKey], candidateEntityTypeId);
                }
            
                selectedValues.push(selectedOption);

                // Create a new list item in the selected list
                const selectedListItem = document.createElement('li');
                selectedListItem.textContent = selectedOption;

                // Attach CSS properties dynamically
                selectedListItem.style.cursor = 'pointer';
                selectedListItem.style.marginBottom = '2px';
                selectedListItem.style.border = '1px solid #F8FAFB';
                // selectedListItem.style.backgroundColor = '#E8E8E8';
                selectedListItem.style.color = 'black';
                selectedListItem.style.paddingLeft = '5px';
                selectedListItem.setAttribute('id', selectedOptionId + 'Selected');

                // Add hover styling
                selectedListItem.addEventListener('mouseenter', function() {
                    selectedListItem.style.backgroundColor = '#D3E2E2';
                    selectedListItem.style.transform = 'scale(0.97)';
                    // selectedListItem.style.transformOrigin = 'top left'; // Set transform origin to top left
                });
                
                selectedListItem.addEventListener('mouseleave', function() {
                    selectedListItem.style.backgroundColor = 'white';
                    selectedListItem.style.transform = 'scale(1)';
                    // selectedListItem.style.transformOrigin = 'top left'; // Reset transform origin
                });

                document.getElementById(candidateFieldKey + 'SelectedOptionContainer').style.display = 'inline-block';
                if (selectedValues.length == 1){
                    selectedList.style.height = '40px';
                }
                else{
                    selectedList.style.height = '60px';
                }
                selectedList.appendChild(selectedListItem);

                // Create remove option cross mark
                const removeOption = document.createElement('span');
                removeOption.textContent = 'X';
                removeOption.style.float = 'right';
                removeOption.style.marginRight = '5px';
                removeOption.style.color = 'black';
                removeOption.style.marginTop = '3px';
                removeOption.style.fontSize = '10px';

                removeOption.id = selectedOptionId + 'removeOption';

                removeOption.classList.add('remove-option');

                removeOption.addEventListener('click', function () {
                    removeSelectedOption(selectedOption, selectedListItem, selectedOptionId);
                });

                // Create remove option circle
                const removeOptionCircle = document.createElement('span');
                removeOptionCircle.classList.add('remove-option-circle');

                // Append the removeOptionCircle to the removeOption
                removeOption.appendChild(removeOptionCircle);

                // Add hover styling to the removeOption element
                removeOption.addEventListener('mouseenter', function() {
                    selectedListItem.style.backgroundColor = '#f3dbdb';
                    removeOptionCircle.style.display = 'inline-block';
                });
                
                removeOption.addEventListener('mouseleave', function() {
                    selectedListItem.style.backgroundColor = '#E8E8E8';
                    removeOptionCircle.style.display = 'none';
                });

                selectedListItem.appendChild(removeOption);
            }

            else {
                // set the corresponding checkbox as false 
                document.getElementById(candidateFieldKey + 'checkbox' + selectedOptionId.replace(candidateFieldKey, '')).checked = false;

                // dynamically click the li element to remove the selected option
                const removeOptionButton = document.getElementById(selectedOptionId + 'removeOption');
                if (removeOptionButton){
                    removeOptionButton.click();
                }
            }
        }


        // Remove selected option
        function removeSelectedOption(option, listItem, selectedOptionId) {
            // Remove from the tracking array
            delete defaultSelectedOptions[candidateFieldKey][selectedOptionId];

            fieldsVisibleOnExtension[candidateFieldKey] = [];
            for (let key in defaultSelectedOptions[candidateFieldKey]){
                fieldsVisibleOnExtension[candidateFieldKey].push(defaultSelectedOptions[candidateFieldKey][key]);
            }

            if(flagForNestedCustomFields){
                parentOptionSelected(candidateFieldObject, candidateFieldKey,  fieldsVisibleOnExtension[candidateFieldKey], candidateEntityTypeId);
            }
        
            // Remove the list item from the selected list
            listItem.remove();

            if (fieldsVisibleOnExtension[candidateFieldKey].length == 0){
                document.getElementById(candidateFieldKey + 'SelectedOptionContainer').style.display = 'none';
                fieldsVisibleOnExtension[candidateFieldKey] = null;
            }


            // mark the checkbox as unchecked 
            const correspondingCheckbox = document.getElementById(selectedOptionId.replace(candidateFieldKey, candidateFieldKey+'checkbox'));
            if (correspondingCheckbox){
                correspondingCheckbox.checked = false;
            }
        
        }
    }

    function renderChildField(entityFieldKey, entityFieldObject, entityTypeId, parentFieldContainer, options = [], fillingData = false){

        let entity = getEntityByEntityTypeId(entityTypeId);
        let renderedField = document.getElementById(entityFieldKey + entity + 'nestedDivId');

        if(entityFieldObject && entityFieldObject['show_on_extension'] && !renderedField){
            if(entityFieldObject['type'] == 'text' || entityFieldObject['type'] == 'phonenumber' || entityFieldObject['type'] == 'social_profile'){
                renderTextField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer);
            } else if (entityFieldObject['type'] == "number" || entityFieldObject['type'] == "decimal"){
                renderNumberField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer);
            } else if (entityFieldObject['type'] == 'longtext'){
                renderLongTextField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer);
            } else if(entityFieldObject['type'] == 'email'){
                renderEmailField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer);
            } else if(entityFieldObject['type'] == 'checkbox'){
                renderCheckBoxField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer, fillingData);
            } else if(entityFieldObject['type'] == 'date'){
                renderDateField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer);
            } else if(entityFieldObject['type'] == 'date_time'){
                renderDateTimeField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer);
            } else if(entityFieldObject['type'] == 'file'){
                renderFileField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer);
            } else if(entityFieldObject['type'] == 'dropdown' && options.length > 0){
                renderDropDownField(entityFieldObject, entityFieldKey, entityTypeId, options, parentFieldContainer, fillingData);
            } else if(entityFieldObject['type'] == 'multiselect' && options.length > 0){
                if(entityTypeId == candidateEntityTypeId){
                    renderCandidateMultiselectField(entityFieldObject, entityFieldKey, entityTypeId, options, parentFieldContainer, fillingData);
                } else {
                    renderMultiselectField(entityFieldObject, entityFieldKey, entityTypeId, options, parentFieldContainer, fillingData);
                }
            } else if(isEntityTypeField(entityFieldObject['type'])){
                renderEntityTypeField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer);
            }
        } else if(entityFieldObject && entityFieldObject['show_on_extension'] && renderedField && options && !fillingData){
            removeChildField(entityFieldKey, entityTypeId);
            deleteFieldValueForEntity(entityFieldKey, entityTypeId);
            renderChildField(entityFieldKey, entityFieldObject, entityTypeId, parentFieldContainer, options, fillingData);
        }
    }

    function removeChildField(entityFieldKey, entityTypeId){
        let entity = getEntityByEntityTypeId(entityTypeId);
        let renderedField = document.getElementById(entityFieldKey + entity + 'nestedDivId');
        if(renderedField){
            renderedField.innerHTML = '';
            renderedField.remove();
        }
    }

    function parentOptionSelected(fieldObject, fieldKey, optionLabel, entityTypeId, fillingData = false){
        let customFieldId = fieldObject['custom_field_id'];
        let isMultiSelectField = fieldObject['type'] == 'multiselect';
        let optionId = getOptionId(customFieldId, optionLabel, entityTypeId, isMultiSelectField);
        let parent = getParentField(customFieldId, entityTypeId);
        let optionsList = [];
        let entity = getEntityByEntityTypeId(entityTypeId);
        let parentFieldContainer = document.getElementById(fieldKey + entity + 'nestedDivId');
        if(parent){
            for(const key in parent[customFieldId].children){

                let childEntityFieldKey = getCustomFieldKeyById(key, entityTypeId);
                let childEntityFieldObject = null;
                let columns = getColumnsByEntity(entityTypeId);
                if(childEntityFieldKey){
                    childEntityFieldObject = columns[childEntityFieldKey];
                }
                
                if(Object.keys(parent[customFieldId].children[key].visibility).length > 0){
                    let isVisible = getVisibilityStatus(parent[customFieldId].children[key].visibility, optionId, isMultiSelectField);
                    if(isVisible){
                        if( childEntityFieldObject && childEntityFieldObject['type'] == 'dropdown' || childEntityFieldObject['type'] == 'multiselect'){
                            optionsList = childEntityFieldObject['data'].map(object => object.label);
                        }
                        renderChildField(childEntityFieldKey, childEntityFieldObject, entityTypeId, parentFieldContainer, optionsList, fillingData);
                    } else {
                        removeChildField(childEntityFieldKey, entityTypeId);
                        deleteFieldValueForEntity(childEntityFieldKey, entityTypeId);
                    }
                } else {
                    let childOptionIds = getChildOptionIds(parent[customFieldId].children[key].dependency, optionId, isMultiSelectField);
                    optionsList = getChildOptionsList(key, childOptionIds, entityTypeId);
                    if( optionId != -1  || (optionId == -1 && optionsList.length > 0)){
                        renderChildField(childEntityFieldKey, childEntityFieldObject, entityTypeId, parentFieldContainer, optionsList, fillingData);
                    }
                }
            }
        }
    }

    function getSelectedValue(entityFieldObject, entityFieldValue){
        if(entityFieldValue != '' && entityFieldValue != null){
            if(entityFieldObject['type'] == 'multiselect'){
                return entityFieldValue.split(',');
            } else if (entityFieldObject['type'] == 'checkbox'){
                return entityFieldValue == '1' ? 'Yes' : 'No';
            } else if (entityFieldObject['type'] == 'dropdown'){
                return entityFieldValue;
            }
        }
        return '';
    }

    function getParentIdByChildId(childId, nestedFields) {
        for (const field of nestedFields) {
            for (const [parentId, details] of Object.entries(field)) {
                if (details.children && details.children[childId]) {
                    return parentId;
                }
                if (details.children) {
                    const parent = getParentIdByChildId(childId, [details.children]);
                    if (parent) {
                        return parent;
                    }
                }
            }
        }
        return null;
    }

    function fillExistingData(entityData, entityColumns, entityTypeId){
        let entityType = entityTypeId == companyContactEntityTypeId ? contactEntityTypeId : entityTypeId;
        let childFields = nestedCustomFieldEntities[0][entityType].children;
        let entity = getEntityByEntityTypeId(entityTypeId);
        for(const key in childFields){
            let fieldKey = getCustomFieldKeyById(childFields[key], entityTypeId);
            let fieldContainer = document.getElementById(fieldKey + entity + 'nestedDivId');
            if(!fieldContainer){
                let parentId = getParentIdByChildId(childFields[key], nestedCustomFieldEntities[0][entityType].nestedFields);
                let parentFieldKey = getCustomFieldKeyById(parentId, entityTypeId);
                let parentFieldContainer = document.getElementById(parentFieldKey + entity + 'nestedDivId');
                let selectedValue = getSelectedValue(entityColumns[parentFieldKey], entityData[parentFieldKey]);
                if(parentFieldContainer && selectedValue){
                    parentOptionSelected(entityColumns[parentFieldKey], parentFieldKey, selectedValue, entityTypeId, true);
                }
            }
        }
    }


    function setAddressValue(fieldInputId, fieldType, addressValue){
        let addressField = document.getElementById(fieldInputId);
        addressField.value = addressValue;
        if(fieldInputId.includes('ForContact')){
            fieldsVisibleOnExtensionForContact[fieldType] = addressValue;
        } else if (fieldInputId.includes('ForCompany')){
            fieldsVisibleOnExtensionForCompany[fieldType] = addressValue;
        } else if (fieldInputId.includes('ForCompanyContact')){
            fieldsVisibleOnExtensionForCompanyContact[fieldType] = addressValue;
        } else {
            fieldsVisibleOnExtension[fieldType] = addressValue;
        }

        addressField.parentNode.classList.toggle('active');
    }

    function getAddressValueByField(address, field){
        let addressValue = '';
        if(field == 'locality'){
            addressValue = address.locality || '';
        } else if (field == 'city'){
            addressValue = address.city || '';
        } else if (field == 'state'){
            addressValue = address.state || '';
        } else if (field == 'country'){
            addressValue = address.country || '';
        } else if (field == 'postal_code'){
            addressValue = address.postal_code|| '';
        }

        return addressValue;
    }

    function renderAddressOptions(addressOptions, fieldPayload){
        let addressOptionContainer = document.getElementById('addressOptionsFor' + fieldPayload.fieldInputId);
        if(addressOptionContainer){
            addressOptionContainer.innerHTML = '';
        } else {
            addressOptionContainer = document.createElement('div');
            addressOptionContainer.id = 'addressOptionsFor' + fieldPayload.fieldInputId;
            addressOptionContainer.setAttribute('class', 'dropdown-content scrollable-alert');

            let addressField = document.getElementById(fieldPayload.fieldInputId);
            addressField.parentNode.appendChild(addressOptionContainer);
        }

        let addressValueArray = [];
        // Create and append options
        addressOptions.forEach(function (option) {
            let addressValue = getAddressValueByField(option, fieldPayload.fieldType);
            let fullAddressValue = option.full_address;
            if(fullAddressValue != ''){
                addressValueArray.push(addressValue);
                const optionElement = document.createElement('div');
            
                optionElement.className = 'custom-option user-option';
                optionElement.id = addressValue;

                optionElement.addEventListener('click', function(){
                    setAddressValue(fieldPayload.fieldInputId, fieldPayload.fieldType, addressValue);
                });
                
                optionElement.innerHTML = fullAddressValue.length >30 ? fullAddressValue.substring(0,30)+'...' : fullAddressValue

                if (fullAddressValue.length > 30) {
                    optionElement.classList.add('tooltip-collaborator', 'tooltip--bottom');
                    optionElement.setAttribute('data-tooltip', fullAddressValue); // Use data-tooltip attribute to store tooltip content
                }
        
                // Append the option to the container
                addressOptionContainer.appendChild(optionElement);
            }
        });

        if(addressOptions.length == 0 || addressValueArray.length == 0) {
            const notFound = document.createElement('div');
            notFound.className = 'collaborators-not-found';
            notFound.innerText = "No results found"
            addressOptionContainer.appendChild(notFound);
        }
    }
    
    function checkAddressField(fieldInputId){
        let fieldType = addressFields.find((field) => fieldInputId.indexOf(field) !== -1);
        if (fieldType) {
            let addressField = document.getElementById(fieldInputId);
            addressField.addEventListener('click',() => {
                addressField.parentNode.classList.toggle('active');
            });
            sendMessageToParent({'message' : 'getAddress', 'payload' : { 'fieldType' : fieldType, 'fieldInputId' : fieldInputId, 'fieldValue' : addressField.value}});
        }
    }

    function getEntityTypePlaceholder(entityFieldType){
        if(entityFieldType == 'candidate'){
            return 'Search By Candidate Name Or ID';
        } else if (entityFieldType == 'job'){
            return 'Search By Job Name Or ID';
        } else if (entityFieldType == 'company'){
            return 'Search By Company Name Or ID';
        } else if (entityFieldType == 'contact'){
            return 'Search By Contact Name Or ID';
        } else if (entityFieldType == 'deals'){
            return 'Search By Deal Name Or ID';
        } else if (entityFieldType == 'user'){
            return 'Search By User Name';
        } else if (entityFieldType == 'team'){
            return 'Search By Team Name';
        }
        return '';
    }

    function toggleEntityTypeOptionsContainer(elementId, searchInputId) {
        let entityTypeContainer = document.getElementById(elementId);
        if(entityTypeContainer && entityTypeContainer.style.display === 'none'){
            entityTypeContainer.style.display = 'block';
            document.getElementById(searchInputId).focus();
        } else {
            entityTypeContainer.style.display = 'none';
        };
    }

    function checkIsSelectedOption(optionsContainerId, optionId){
        return entityTypeFieldColumnValues[optionsContainerId][optionId] ? true : false;
    }

    function getDetailsByEntityFieldType(option, entityFieldType, optionsContainerId){
        let defaultLogos = {
            'company': BASE_IMAGES_URL + '/company-logo.svg',
            'contact': BASE_IMAGES_URL + '/contact-logo.svg',
            'job': BASE_IMAGES_URL + '/job-logo.svg',
            'candidate': BASE_IMAGES_URL + '/candidate-logo.svg',
            'user': BASE_IMAGES_URL + '/user-logo.svg',
            'team': BASE_IMAGES_URL + '/team-logo.svg',
            'deals': BASE_IMAGES_URL + '/deal-logo.svg',
        }
        let isLengthyTitle = option.title?.length > 20 ? true : false;
        let isSelectedOption = checkIsSelectedOption(optionsContainerId, option.id)
        let deatils = `<div class="d-flex align-items-center">
                        <div class="d-flex align-items-center entity-type-option">
                            <image src="${option.photo ? option.photo.split(',')[0] : defaultLogos[entityFieldType]}" class="image rounded-circle-avatar" />
                            <span class="m-l-5">
                                <span 
                                    class="${isLengthyTitle ? "tooltip-btn tooltip-bottom" : ""}"
                                    data-tooltip="${isLengthyTitle ? option.title : ""}">
                                    ${isLengthyTitle ? option.title.substring(0,20)+'..' : option.title}
                                </span>
                                ${ entityFieldType != 'user' && entityFieldType != 'team' ?
                                    `<span class="rcrm-tag">${'ID-' + option.srno}</span>` :
                                    entityFieldType == 'user' ? `<span>${' | ' + option.email}</span>` : ''
                                }
                            </span>
                        </div>
                        <div class="${isSelectedOption ? "checkmark" : ""}" id="selectedCheckMark"></div>
                    </div>`;

        return deatils;
    }

    function renderCheckMarkForSelectedOption(renderedOptionId, checkMarkState){
        if(checkMarkState){
            $(`#${renderedOptionId} #selectedCheckMark`).toggleClass('checkmark', true);
        } else {
            $(`#${renderedOptionId} #selectedCheckMark`).toggleClass('checkmark', false);
        }
    }

    function handleRemoveEntityTypeOptionClick(removedOptionId, entityTypeOptionsContainerId, renderedSelectedOptionId, entityTypeFieldType, selectedOptionsContainerId){
        if(entityTypeFieldColumnValues[entityTypeOptionsContainerId][removedOptionId]){
            delete entityTypeFieldColumnValues[entityTypeOptionsContainerId][removedOptionId];
            document.getElementById(renderedSelectedOptionId).remove();
            if(Object.keys(entityTypeFieldColumnValues[entityTypeOptionsContainerId]).length == 0){
                document.getElementById(selectedOptionsContainerId).textContent = getEntityTypePlaceholder(entityTypeFieldType);
            }
            $(`#${entityTypeOptionsContainerId + removedOptionId} #selectedCheckMark`).toggleClass('checkmark', false);
        }
    }

   function renderSingleSelectedEntityTypeFieldOption(selectedOption, selectedOptionsContainerId, entityTypeOptionsContainerId, key, entityTypeFieldType){
        let selectedOptionsContainer = document.getElementById(selectedOptionsContainerId);
        if(Object.keys(entityTypeFieldColumnValues[entityTypeOptionsContainerId]).length == 1){
            selectedOptionsContainer.textContent = '';
        }
        let selectedOptionSpan = document.createElement('span');
        selectedOptionSpan.textContent = selectedOption.title.length > 20 ? selectedOption.title.substring(0, 20)+'..' : selectedOption.title;
        selectedOptionSpan.id = entityTypeOptionsContainerId + key + 'Selected';
        selectedOptionSpan.setAttribute('class', 'selected-option');
        if(selectedOption.title.length > 20){
            selectedOptionSpan.classList.add('tooltip-btn', 'tooltip-top');
            selectedOptionSpan.setAttribute('data-tooltip', selectedOption.title);
        }

        selectedOptionSpan.addEventListener('click', (e) => {
            e.stopPropagation();
        });

        let closeIcon = document.createElement('span');
        closeIcon.setAttribute('class', 'mdi mdi-close entity-close-icon');

        closeIcon.addEventListener('click', (e) => {
            e.stopPropagation();
            handleRemoveEntityTypeOptionClick(key, entityTypeOptionsContainerId, selectedOptionSpan.id, entityTypeFieldType, selectedOptionsContainerId)
        });

        selectedOptionSpan.appendChild(closeIcon);
        selectedOptionsContainer.appendChild(selectedOptionSpan);
    }

    function renderSelectedEntityTypeFieldOptions(entityTypeId, entityFieldKey, entityTypeFieldType){
        let entity = getEntityByEntityTypeId(entityTypeId);
        let entityTypeOptionsContainerId = entityFieldKey + entity + 'ForEntityRecordOptions';
        let selectedOptionsContainer = document.getElementById(entityFieldKey + 'For' + entity + 'SelectedOptions');
        if(Object.keys(entityTypeFieldColumnValues[entityTypeOptionsContainerId]).length > 0 && selectedOptionsContainer){
            selectedOptionsContainer.textContent = '';
            Object.keys(entityTypeFieldColumnValues[entityTypeOptionsContainerId]).forEach((key) =>{
                let selectedOption = entityTypeFieldColumnValues[entityTypeOptionsContainerId][key];
                renderSingleSelectedEntityTypeFieldOption(selectedOption, selectedOptionsContainer.id, entityTypeOptionsContainerId, key, entityTypeFieldType);
            });
        }
    }

    function handleEntityTypeOptionClick(entityTypeOptionsContainerId, selectedOptionId, renderedOptionId, entityTypeOptions, entityTypeId, entityFieldKey, entityTypeFieldType){
        if(!entityTypeFieldColumnValues[entityTypeOptionsContainerId][selectedOptionId])
        {
            let selectedRecord = entityTypeOptions.find((option) => {
                return option.id == selectedOptionId;
            });
            if(selectedRecord){
                let entity = getEntityByEntityTypeId(entityTypeId);
                let selectedOptionsContainerId = entityFieldKey + 'For' + entity + 'SelectedOptions';
                entityTypeFieldColumnValues[entityTypeOptionsContainerId][selectedOptionId] = selectedRecord;
                renderSingleSelectedEntityTypeFieldOption(selectedRecord, selectedOptionsContainerId, entityTypeOptionsContainerId, selectedOptionId, entityTypeFieldType);
                renderCheckMarkForSelectedOption(renderedOptionId, true);
            } 
        }
    }

    function renderEntityTypeFieldOptions(entityTypeOptions, entityPayload){
        let entityTypeOptionsContainer = document.getElementById(entityPayload.entityTypeOptionsContainerId);
        entityTypeOptionsContainer.innerHTML = '';
        if(entityTypeOptions.length > 0){
            entityTypeOptions.forEach((option, index) => {
                const li = document.createElement('li');
                li.id = entityTypeOptionsContainer.id + option.id;
                li.addEventListener('click', () =>{
                    handleEntityTypeOptionClick(entityTypeOptionsContainer.id, option.id, li.id, entityTypeOptions, entityPayload.entityTypeId, entityPayload.entityFieldKey, entityPayload.entityFieldType)
                });
                
                let entityDetails = getDetailsByEntityFieldType(option, entityPayload.entityFieldType, entityTypeOptionsContainer.id);

                li.innerHTML = entityDetails;
    
                li.style.cursor = 'pointer';
                li.style.marginBottom = '5px';
                li.style.padding = '5px';
                li.style.color = 'black';
                
                li.addEventListener('mouseover', function () {
                    li.style.backgroundColor = '#f5f5f5';
                });
    
                li.addEventListener('mouseout', function () {
                    li.style.backgroundColor = 'white';
                });
    
                entityTypeOptionsContainer.appendChild(li);
            });
        } else {
            entityTypeOptionsContainer.innerHTML = 'No Results Found';
        }
    }

    function getEntityTypeFieldOptions(searchValue, entityFieldType, entityTypeId, entityTypeOptionsContainerId, entityFieldKey){
        let searchPayload = {
            'searchValue' : searchValue, 
            'entityFieldType' : entityFieldType,
            'entityTypeId' : entityTypeId,
            'entityTypeOptionsContainerId' : entityTypeOptionsContainerId,
            'entityFieldKey' : entityFieldKey
        };
        sendMessageToParent({ 'message': 'getEntityTypeRecords', 'payload': searchPayload});
    }

    function createEntityTypeDrodown(entityFieldType, entityFieldKey, entityTypeId, parentFieldContainer, entity){

        var entityTypeOptionsOuterContainer = document.createElement('div');
        entityTypeOptionsOuterContainer.id = entityFieldKey + entity + 'ForEntityTypeOptionsOuterContainer';
        entityTypeOptionsOuterContainer.setAttribute('class', 'entity-type-dropdown');
        entityTypeOptionsOuterContainer.setAttribute('style', 'display : none');
        var entityRecordOptionsContainer = document.createElement('ul');
        entityRecordOptionsContainer.id = entityFieldKey + entity + 'ForEntityRecordOptions';
        entityRecordOptionsContainer.setAttribute('class', 'entity-type-options-list');
        entityRecordOptionsContainer.textContent = 'No Results Found';

        entityTypeFieldColumnValues[entityRecordOptionsContainer.id] = {};

        var searchInput = document.createElement('input');
        searchInput.setAttribute('type', 'text');
        searchInput.setAttribute('id', entityFieldKey + entity + 'ForEntitySearch');
        searchInput.setAttribute('placeholder', 'Search & Select');
        searchInput.setAttribute('style', 'width: 100%; height: 25px; border: 1px solid #E8E8E8; border-radius: 5px; margin-bottom: 5px; padding-left: 5px;');
        searchInput.setAttribute('class', 'rcrm-ctrl');
        searchInput.setAttribute('autocomplete', 'off');

        searchInput.addEventListener('input', (e) =>{
            getEntityTypeFieldOptions(e.target.value.trim(), entityFieldType, entityTypeId, entityRecordOptionsContainer.id, entityFieldKey);
        });
        entityTypeOptionsOuterContainer.appendChild(searchInput);
        entityTypeOptionsOuterContainer.appendChild(entityRecordOptionsContainer);
        parentFieldContainer.appendChild(entityTypeOptionsOuterContainer);

    }

    function renderEntityTypeField(entityFieldObject, entityFieldKey, entityTypeId, parentFieldContainer){
        let entity = getEntityByEntityTypeId(entityTypeId);
        let outerDivContiner = document.createElement('div');
        outerDivContiner.id = entityFieldKey + entity + 'nestedDivId';
        outerDivContiner.setAttribute('class', 'rcrm-form-group rcrm-form-ctrl');
        outerDivContiner.style.marginBottom = '5px';

        let labelContainer = document.createElement('label');
        labelContainer.setAttribute('class', 'rcrm-headings-label');
        labelContainer.innerHTML = entityFieldObject['label'];

        // block for required fields validation
        labelContainer.id = entityFieldKey + entity + 'LabelId';
        let errorMessage = document.createElement('p');
        errorMessage.style.color = 'red';
        errorMessage.id = entityFieldKey + entity +'ErrorMessage';
        errorMessage.style.display = 'none';
        errorMessage.innerHTML = '' + entityFieldObject['label'] + ' field is required';

        // block for required fields validation
        if (entityFieldObject['required_on_form'] == true) {
            // add a star with red colour to the inner HTML label
            labelContainer.innerHTML = entityFieldObject['label'] + ' <span style="color: red;">*</span>';
        }

        let inputContainer = document.createElement('div');
        inputContainer.id = entityFieldKey + 'For' + entity;
        inputContainer.style.width = '95%';
        inputContainer.setAttribute('class', 'rcrm-ctrl d-flex align-items-center entity-type-field');
        inputContainer.setAttribute('style', 'color: #cdcccc; cursor: pointer;');

        let searchIcon = document.createElement('span');
        searchIcon.textContent = '';
        searchIcon.setAttribute('class', 'mdi mdi-magnify f-s-15');

        let selectedOptions = document.createElement('span');
        selectedOptions.textContent = getEntityTypePlaceholder(entityFieldObject['type']);
        selectedOptions.id = entityFieldKey + 'For' + entity + 'SelectedOptions';
        selectedOptions.setAttribute('class', 'entity-type-field-selected-options');
        
        inputContainer.appendChild(searchIcon);
        inputContainer.appendChild(selectedOptions);

        inputContainer.addEventListener('click', () => {
            toggleEntityTypeOptionsContainer(entityFieldKey + entity + 'ForEntityTypeOptionsOuterContainer', entityFieldKey + entity + 'ForEntitySearch')
        });

        outerDivContiner.appendChild(labelContainer);
        outerDivContiner.appendChild(errorMessage);
        outerDivContiner.appendChild(inputContainer);

        createEntityTypeDrodown(entityFieldObject['type'], entityFieldKey, entityTypeId, outerDivContiner, entity);
        
        parentFieldContainer.appendChild(outerDivContiner);
    }

    function isEntityTypeField(fieldType){
        return entityTypeFields.includes(fieldType);
    }

    function setEntityTypeFieldsForEntites(entityTypeId, entityFieldType, fieldKey){
        entityTypeFieldsForEntities[entityTypeId][entityFieldType].push(fieldKey);
    }

    function setEntityTypeFieldValuesForEntities(entityFieldType, entityTypeId, fieldKeys){
        let entity = getEntityByEntityTypeId(entityTypeId);
        fieldKeys.forEach(entityFieldKey => {
            let entityTypeOptionsContainerId = entityFieldKey + entity + 'ForEntityRecordOptions';
        
            if(entityTypeFieldColumnValues[entityTypeOptionsContainerId]){
                let slugs = Object.keys(entityTypeFieldColumnValues[entityTypeOptionsContainerId]).map((key) =>{
                    if(entityFieldType == 'teamType' || entityFieldType == 'userType'){
                        return key;
                    } else {
                        return entityTypeFieldColumnValues[entityTypeOptionsContainerId][key].slug;
                    }
                });
                let entityFieldValue = slugs.join(',');
                setFieldsVisibleOnExtensionForEntity(entityFieldKey, entityFieldValue, entityTypeId);
            }
            
        });
    }

    function getExistingEntityTypeValues(existingEntityId, entityTypeId){
        let existingValuePayload = {
            "recordIds": [existingEntityId],
            "entityTypeId": entityTypeId,
            "candidateCustomFieldIds": entityTypeFieldsForEntities[entityTypeId]['candidateType'],
            "contactCustomFieldIds": entityTypeFieldsForEntities[entityTypeId]['contactType'],
            "companyCustomFieldIds": entityTypeFieldsForEntities[entityTypeId]['companyType'],
            "jobCustomFieldIds": entityTypeFieldsForEntities[entityTypeId]['jobType'],
            "dealCustomFieldIds": entityTypeFieldsForEntities[entityTypeId]['dealsType'],
            "userCustomFieldIds": entityTypeFieldsForEntities[entityTypeId]['userType'],
            "teamCustomFieldIds": entityTypeFieldsForEntities[entityTypeId]['teamType'],
        }
        sendMessageToParent({ 'message': 'getExistingEntityTypeValues', 'payload': existingValuePayload});
    }

    function getExistingRecordByEntityTypeId(entityTypeId){
        if(entityTypeId == contactEntityTypeId){
            return holdContactObject;
        } else if (entityTypeId == companyEntityTypeId){
            return holdCompanyObject;
        }
    }

    function pushExistingRecordIntoEntityTypeFieldColumnValues(fieldKey, existingRecord, entityTypeId){
        let entity = getEntityByEntityTypeId(entityTypeId);
        let entityTypeOptionsContainerId = fieldKey + entity + 'ForEntityRecordOptions';
        entityTypeFieldColumnValues[entityTypeOptionsContainerId][existingRecord.id] = existingRecord;
        if(entityTypeId == contactEntityTypeId){
            entity = getEntityByEntityTypeId(companyContactEntityTypeId);
            entityTypeOptionsContainerId = fieldKey + entity + 'ForEntityRecordOptions';
            entityTypeFieldColumnValues[entityTypeOptionsContainerId][existingRecord.id] = existingRecord;
        }
    }

    function formatExistingEntityTypeValues(existingValuesByEntity, entityTypeId){
        existingValuesByEntity['user'] = collaboratorDataUser;
        existingValuesByEntity['team'] = collaboratorDataTeam;
        Object.keys(entityTypeFieldsForEntities[entityTypeId]).forEach((fieldType) => {
            entityTypeFieldsForEntities[entityTypeId][fieldType].forEach((fieldKey) => {
                let entity = getEntityByEntityTypeId(entityTypeId);
                let entityTypeOptionsContainerId = fieldKey + entity + 'ForEntityRecordOptions';
                if(entityTypeFieldColumnValues[entityTypeOptionsContainerId]){
                    fieldType = fieldType.replace('Type', '');
                    let existingRecord = getExistingRecordByEntityTypeId(entityTypeId);
                    if(existingRecord){
                        let existingValues = existingRecord[fieldKey];
                        existingValues = existingValues ? existingValues.split(',') : [];
                        existingValues.forEach((existingValue) => {
                            if(existingValuesByEntity[fieldType]){
                                let existingRecordFound = Object.values(existingValuesByEntity[fieldType]).find((record) => {
                                    if(fieldType == 'user' || fieldType == 'team'){
                                        return record.id == existingValue;
                                    } else {
                                        return record.slug == existingValue;
                                    }
                                });
                                if(existingRecordFound){
                                    existingRecordFound.title = existingRecordFound.name;
                                    pushExistingRecordIntoEntityTypeFieldColumnValues(fieldKey, existingRecordFound, entityTypeId);
                                }
                            }
                        });
                    }
                    renderSelectedEntityTypeFieldOptions(entityTypeId, fieldKey, fieldType);
                    if(entityTypeId == contactEntityTypeId){
                        renderSelectedEntityTypeFieldOptions(companyContactEntityTypeId, fieldKey, fieldType);
                    }
                }
            });
        });
    }
    function formatDateTime(date, timeFormatType = false) {
        const options = {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: 'numeric',
            minute: '2-digit',
            hour12: !timeFormatType, // true for 12-hour, false for 24-hour
        };
        let formatted = date.toLocaleString('en-US', options);
        // Convert am/pm to uppercase AM/PM
        return formatted.replace(/am|pm/g, match => match.toUpperCase());
    }

    function renderTimeOptions(selectId, selectedValue = null, is24HourFormat = false) {
        const select = document.getElementById(selectId);
        if (!select) return;

        // Clear previous options safely
        while (select.firstChild) {
            select.removeChild(select.firstChild);
        }
        const fragment = document.createDocumentFragment();

        for (let seconds = 0; seconds < 86400; seconds += 1800) {
            const option = document.createElement('option');
            option.value = seconds;

            let hours = Math.floor(seconds / 3600);
            let minutes = Math.floor((seconds % 3600) / 60);
            let label;

            if (is24HourFormat) {
                label = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
            } else {
                const period = hours >= 12 ? 'PM' : 'AM';
                const hour12 = hours % 12 === 0 ? 12 : hours % 12;
                label = `${String(hour12).padStart(2, '0')}:${String(minutes).padStart(2, '0')} ${period}`;
            }

            option.textContent = label;
            if (seconds === selectedValue) {
                option.selected = true;
            }
            fragment.appendChild(option);
        }
        select.appendChild(fragment);
    }
 }